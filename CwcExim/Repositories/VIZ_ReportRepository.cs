using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using CwcExim.DAL;
using CwcExim.Areas.Report.Models;
using System.Data;
using MySql.Data.MySqlClient;
using System.Globalization;
using Newtonsoft.Json;
using CwcExim.Areas.Import.Models;
using System.Dynamic;
using CwcExim.Areas.CashManagement.Models;
using CwcExim.Areas.Auction.Models;
using CwcExim.Areas.Export.Models;
using EinvoiceLibrary;

namespace CwcExim.Repositories
{
    public class VIZ_ReportRepository
    {
        private DatabaseResponse _DBResponse;
        public DatabaseResponse DBResponse   
        {
            get
            {
                return _DBResponse;
            }
        }
        public void GatePassReport(GatePassReport ObjGatePassReport, int UserId)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjGatePassReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjGatePassReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}        
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_UserId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = UserId });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GatePassReport", CommandType.StoredProcedure, DParam);
            IList<GatePassReport> LstGatePassReport = new List<GatePassReport>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    LstGatePassReport.Add(new GatePassReport
                    {



                        GatePassNo = Result["GatePassNo"].ToString(),
                        GatePassDate = Result["GatePassDate"].ToString(),
                        VehicleNo = Result["VehicleNo"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),


                        ContainerSize = Result["Size"].ToString(),
                        VesselName = Result["Vessel"].ToString(),
                        VoyageNo = Result["Voyage"].ToString(),
                        RotationNo = Result["Rotation"].ToString(),
                        LineNo = Result["LineNo"].ToString(),
                        ShippingSealLineNo = Result["SealNo"].ToString(),
                        CustomSealLineNo = Result["CustomSealNo"].ToString(),

                        ImporterExporter = Result["ImpExpName"].ToString(),
                        CHAName = Result["CHAName"].ToString(),
                        ShippingLine = Result["ShippingLineName"].ToString(),
                        Weight = Result["Weight"].ToString(),
                        LocationName = Result["Location"].ToString(),
                        NatureOfGoods = Result["Nature of goods"].ToString(),
                        LCLFCL = Result["LCLFCL"].ToString(),
                        BOENoOrSBNoOrWRNo = Result["BOENo"].ToString(),
                        Date = Result["BOEDate"].ToString(),
                        NoOfPackages = Result["NoOfPackages"].ToString(),

                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        ReceiptNo = Result["ReceiptNo"].ToString()
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstGatePassReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void GetInvoiceDetailsForPrint(int InvoiceId, string InvoiceType = "GE")
        {

            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceId", MySqlDbType = MySqlDbType.Int32, Value = InvoiceId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceType", MySqlDbType = MySqlDbType.VarChar, Size = 20, Value = InvoiceType });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetBulkInvoiceDetailsForPrint", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDInvoiceGate objPaymentSheet = new WFLDInvoiceGate();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objPaymentSheet.CompanyName = Result["CompanyName"].ToString();
                    objPaymentSheet.CompanyShortName = Result["CompanyShortName"].ToString();
                    objPaymentSheet.CompanyAddress = Result["CompanyAddress"].ToString();
                    objPaymentSheet.CompanyGstNo = Result["GstIn"].ToString();
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        objPaymentSheet.InvoiceNo = Result["InvoiceNo"].ToString();
                        objPaymentSheet.InvoiceDate = Result["InvoiceDate"].ToString();
                        objPaymentSheet.PartyName = Result["PartyName"].ToString();
                        objPaymentSheet.PartyState = Result["PartyState"].ToString();
                        objPaymentSheet.PartyAddress = Result["PartyAddress"].ToString();
                        objPaymentSheet.PartyStateCode = Result["PartyStateCode"].ToString();
                        objPaymentSheet.PartyGstNo = Result["PartyGSTNo"].ToString();
                        objPaymentSheet.TotalTax = Convert.ToDecimal(Result["TotalTaxable"]);
                        objPaymentSheet.TotalCGST = Convert.ToDecimal(Result["TotalCGST"]);
                        objPaymentSheet.TotalSGST = Convert.ToDecimal(Result["TotalSGST"]);
                        objPaymentSheet.TotalIGST = Convert.ToDecimal(Result["TotalIGST"]);
                        objPaymentSheet.TotalAmt = Convert.ToDecimal(Result["InvoiceAmt"]);

                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        objPaymentSheet.LstContainersGate.Add(new WFLDInvoiceContainerGate()
                        {
                            CfsCode = Convert.ToString(Result["CFSCode"]),
                            ContainerNo = Convert.ToString(Result["ContainerNo"]),
                            Size = Convert.ToString(Result["Size"]),
                            FromDate = Convert.ToString(Result["FromDate"]),
                            ToDate = Convert.ToString(Result["ToDate"])
                        });
                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        objPaymentSheet.LstChargesGate.Add(new WFLDInvoiceChargeGate()
                        {
                            ChargeSD = Convert.ToString(Result["OperationSDesc"]),
                            ChargeDesc = Convert.ToString(Result["OperationDesc"]),
                            HsnCode = Convert.ToString(Result["SACCode"]),
                            Rate = Convert.ToDecimal(Result["Rate"]),
                            TaxableAmt = Convert.ToDecimal(Result["Taxable"]),

                            CGSTRate = Convert.ToDecimal(Result["CGSTPer"]),
                            CGSTAmt = Convert.ToDecimal(Result["CGSTAmt"]),
                            SGSTRate = Convert.ToDecimal(Result["SGSTPer"]),
                            SGSTAmt = Convert.ToDecimal(Result["SGSTAmt"]),
                            IGSTRate = Convert.ToDecimal(Result["IGSTPer"]),
                            IGSTAmt = Convert.ToDecimal(Result["IGSTAmt"]),
                            Total = Convert.ToDecimal(Result["Total"]),

                        });
                    }
                }

                //-------------------------------------------------------------------------
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objPaymentSheet;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
                //-----------------------------------------------------------------------
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public List<WFLDInvoiceGate> GetBulkInvoiceDetailsForPrint(VIZ_BulkInvoiceReport ObjBulkInvoiceReport)
        {
            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceModule))
            {
                ObjBulkInvoiceReport.InvoiceModule = "";
            }
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceNumber))
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }

            List<WFLDInvoiceGate> objPaymentSheetList = new List<WFLDInvoiceGate>();
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceType", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceModule });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceNumber });

            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetBulkInvoiceDetailsForPrint", CommandType.StoredProcedure, DParam);
                IList<string> htmls = new List<string>();
                _DBResponse = new DatabaseResponse();




                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    WFLDInvoiceGate objPaymentSheetInvoiceHeader = new WFLDInvoiceGate();
                    foreach (DataRow dr in Result.Tables[0].Rows)
                    {
                        objPaymentSheetInvoiceHeader.CompanyName = dr["CompanyName"].ToString();
                        objPaymentSheetInvoiceHeader.CompanyShortName = dr["CompanyShortName"].ToString();
                        objPaymentSheetInvoiceHeader.CompanyAddress = dr["CompanyAddress"].ToString();
                        objPaymentSheetInvoiceHeader.CompanyGstNo = dr["GstIn"].ToString();
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        WFLDInvoiceGate objPaymentSheet = new WFLDInvoiceGate();
                        objPaymentSheet.CompanyName = objPaymentSheetInvoiceHeader.CompanyName;
                        objPaymentSheet.CompanyShortName = objPaymentSheetInvoiceHeader.CompanyShortName;
                        objPaymentSheet.CompanyAddress = objPaymentSheetInvoiceHeader.CompanyAddress;
                        objPaymentSheet.CompanyGstNo = objPaymentSheetInvoiceHeader.CompanyGstNo;

                        objPaymentSheet.InvoiceId = Convert.ToInt32(dr["InvoiceId"]);
                        objPaymentSheet.InvoiceNo = dr["InvoiceNo"].ToString();
                        objPaymentSheet.InvoiceDate = dr["InvoiceDate"].ToString();
                        objPaymentSheet.PartyName = dr["PartyName"].ToString();
                        objPaymentSheet.PartyState = dr["PartyState"].ToString();
                        objPaymentSheet.PartyAddress = dr["PartyAddress"].ToString();
                        objPaymentSheet.PartyStateCode = dr["PartyStateCode"].ToString();
                        objPaymentSheet.PartyGstNo = dr["PartyGSTNo"].ToString();
                        objPaymentSheet.TotalTax = Convert.ToDecimal(dr["TotalTaxable"]);
                        objPaymentSheet.TotalCGST = Convert.ToDecimal(dr["TotalCGST"]);
                        objPaymentSheet.TotalSGST = Convert.ToDecimal(dr["TotalSGST"]);
                        objPaymentSheet.TotalIGST = Convert.ToDecimal(dr["TotalIGST"]);
                        objPaymentSheet.TotalAmt = Convert.ToDecimal(dr["InvoiceAmt"]);

                        foreach (DataRow drContainer in Result.Tables[2].Rows)
                        {
                            if (objPaymentSheet.InvoiceId == Convert.ToInt32(drContainer["InoviceId"]))
                            {
                                objPaymentSheet.LstContainersGate.Add(new WFLDInvoiceContainerGate()
                                {
                                    CfsCode = Convert.ToString(drContainer["CFSCode"]),
                                    ContainerNo = Convert.ToString(drContainer["ContainerNo"]),
                                    Size = Convert.ToString(drContainer["Size"]),
                                    FromDate = Convert.ToString(drContainer["FromDate"]),
                                    ToDate = Convert.ToString(drContainer["ToDate"])
                                });
                            }
                        }

                        foreach (DataRow drCharges in Result.Tables[3].Rows)
                        {
                            if (objPaymentSheet.InvoiceId == Convert.ToInt32(drCharges["InoviceId"]))
                            {
                                objPaymentSheet.LstChargesGate.Add(new WFLDInvoiceChargeGate()
                                {
                                    ChargeSD = Convert.ToString(drCharges["OperationSDesc"]),
                                    ChargeDesc = Convert.ToString(drCharges["OperationDesc"]),
                                    HsnCode = Convert.ToString(drCharges["SACCode"]),
                                    Rate = Convert.ToDecimal(drCharges["Rate"]),
                                    TaxableAmt = Convert.ToDecimal(drCharges["Taxable"]),

                                    CGSTRate = Convert.ToDecimal(drCharges["CGSTPer"]),
                                    CGSTAmt = Convert.ToDecimal(drCharges["CGSTAmt"]),
                                    SGSTRate = Convert.ToDecimal(drCharges["SGSTPer"]),
                                    SGSTAmt = Convert.ToDecimal(drCharges["SGSTAmt"]),
                                    IGSTRate = Convert.ToDecimal(drCharges["IGSTPer"]),
                                    IGSTAmt = Convert.ToDecimal(drCharges["IGSTAmt"]),
                                    Total = Convert.ToDecimal(drCharges["Total"]),

                                });
                            }
                        }

                        objPaymentSheetList.Add(objPaymentSheet);
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = null;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }


            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }

            return objPaymentSheetList;
        }

        public void GenericInvoiceDetailsForPrint(string InvoiceNo)
        {

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();

            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = InvoiceNo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetCartingAppDetailsForPrint", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();

            CwcExim.Areas.Export.Models.WFLD_CartingApp obj = new Areas.Export.Models.WFLD_CartingApp();
            List<CwcExim.Areas.Export.Models.WFLD_CartingApp> lstcartingapp = new List<Areas.Export.Models.WFLD_CartingApp>();

            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    obj.lstcartapp.Add(new CwcExim.Areas.Export.Models.WFLD_CartingApp
                    {

                        SBNo = Convert.ToString(Result["SBNo"]),
                        ExporterImporterName = Convert.ToString(Result["ExporterImporterName"]),
                        CargoType = Convert.ToInt32(Result["CargoType"]),
                        Package = Convert.ToInt32(Result["Package"]),
                        Weight = Convert.ToInt32(Result["Weight"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = obj;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {

                Result.Close();
            }
        }
        public void GenericBulkInvoiceDetailsForPrint(VIZ_BulkInvoiceReport ObjBulkInvoiceReport)
        {
            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceModule))
            {
                ObjBulkInvoiceReport.InvoiceModule = "";
            }
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceNumber))
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceNumber });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PayeeId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PayeeId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceType", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceModule });

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            try
            {
                DParam = LstParam.ToArray();
                if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndadv" || ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bnd"
                    || ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndadvance"
                     )//|| ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndunloading"
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkInvoiceDetailsForBondPrint", CommandType.StoredProcedure, DParam);
                }

                else if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "pallatisation")
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkPallatisationPrint", CommandType.StoredProcedure, DParam);
                }
                else if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "resindiv")
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkRevIndvPrint", CommandType.StoredProcedure, DParam);
                }

                else
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkInvoiceDetailsForPrint", CommandType.StoredProcedure, DParam);
                }
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }


        public void GenericBulkInvoiceDetailsForPrintForExternal(VIZ_BulkInvoiceReport ObjBulkInvoiceReport)
        {
            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceModule))
            {
                ObjBulkInvoiceReport.InvoiceModule = "";
            }
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceNumber))
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceNumber });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PayeeId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PayeeId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceType", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceModule });

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            try
            {
                DParam = LstParam.ToArray();
                if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndadv" || ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bnd"
                    || ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndadvance"
                     )//|| ObjBulkInvoiceReport.InvoiceModule.ToLower() == "bndunloading"
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkInvoiceDetailsForBondPrintForExternalUser", CommandType.StoredProcedure, DParam);
                }

                else if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "pallatisation")
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkPallatisationPrint", CommandType.StoredProcedure, DParam);
                }
                else if (ObjBulkInvoiceReport.InvoiceModule.ToLower() == "resindiv")
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkRevIndvPrint", CommandType.StoredProcedure, DParam);
                }

                else
                {
                    Result = DataAccess.ExecuteDataSet("GetBulkInvoiceDetailsForPrintForExternalUser", CommandType.StoredProcedure, DParam);
                }
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        public void GetInvoiceList(string FromDate, string ToDate, string invoiceType)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            if (invoiceType == "All")
            {
                invoiceType = "";
            }

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.String, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.String, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Value = invoiceType });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("InvoiceListWithDate", CommandType.StoredProcedure, DParam);
            IList<invoiceLIst> LstInvoice = new List<invoiceLIst>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    LstInvoice.Add(new invoiceLIst
                    {



                        InvoiceNumber = Result["InvoiceNumber"].ToString()



                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = JsonConvert.SerializeObject(LstInvoice); ;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }


        public void GetInvoiceListForExternalUser(string FromDate, string ToDate, string invoiceType,int UserId)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            if (invoiceType == "All")
            {
                invoiceType = "";
            }

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.String, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.String, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Value = invoiceType });
            LstParam.Add(new MySqlParameter { ParameterName = "in_UserId", MySqlDbType = MySqlDbType.Int32, Value = UserId });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("InvoiceListWithDateForExternalUser", CommandType.StoredProcedure, DParam);
            IList<invoiceLIst> LstInvoice = new List<invoiceLIst>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    LstInvoice.Add(new invoiceLIst
                    {



                        InvoiceNumber = Result["InvoiceNumber"].ToString()



                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = JsonConvert.SerializeObject(LstInvoice); ;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void ModuleListWithInvoice(VIZ_BulkInvoiceReport ObjBulkInvoiceReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            int PartyId = ObjBulkInvoiceReport.PartyId;
            int PayeeId = ObjBulkInvoiceReport.PayeeId;

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.String, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.String, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PayeeId", MySqlDbType = MySqlDbType.Int32, Value = PayeeId });
            DParam = LstParam.ToArray();
            DataSet LstInvoice = new DataSet();
            LstInvoice = DataAccess.ExecuteDataSet("ModuleListWithInvoice", CommandType.StoredProcedure, DParam);

            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                if (LstInvoice != null)
                {
                    Status = 1;
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstInvoice;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                //Result.Close();
                //Result.Dispose();

            }
        }


        public void ModuleListWithInvoiceForExternalUser(VIZ_BulkInvoiceReport ObjBulkInvoiceReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            int PartyId = ObjBulkInvoiceReport.PartyId;
            int PayeeId = ObjBulkInvoiceReport.PayeeId;

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.String, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.String, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PayeeId", MySqlDbType = MySqlDbType.Int32, Value = PayeeId });
            DParam = LstParam.ToArray();
            DataSet LstInvoice = new DataSet();
            LstInvoice = DataAccess.ExecuteDataSet("ModuleListWithInvoiceForExternalUser", CommandType.StoredProcedure, DParam);

            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                if (LstInvoice != null)
                {
                    Status = 1;
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstInvoice;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                //Result.Close();
                //Result.Dispose();

            }
        }
        public void GetInvoicePayeeList()
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetInvoicePayeeList", CommandType.StoredProcedure);
            _DBResponse = new DatabaseResponse();
            IList<WFLDImpPartyForpage> objPayeeName = new List<WFLDImpPartyForpage>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objPayeeName.Add(new WFLDImpPartyForpage()
                    {
                        PartyId = Convert.ToInt32(Result["PayeeId"]),
                        PartyName = Convert.ToString(Result["PayeeName"]),

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objPayeeName;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetSingleInvoiceDtl(string InvoiceNo)
        {
            IDataParameter[] DParam = { };
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvNo", MySqlDbType = MySqlDbType.VarChar, Value = InvoiceNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Flag", MySqlDbType = MySqlDbType.VarChar, Value = "M" });
            DParam = LstParam.ToArray();
            DataSet LstInvoice = new DataSet();
            LstInvoice = DataAccess.ExecuteDataSet("getsinglebulkinvdtl", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            dynamic InvoiceDate = "", Module = "";
            try
            {
                if (LstInvoice.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                    InvoiceDate = LstInvoice.Tables[0].Rows[0]["InvoiceDate"].ToString();
                    Module = LstInvoice.Tables[0].Rows[0]["Module"].ToString();
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { InvoiceDate, Module };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                //Result.Close();
                //Result.Dispose();

            }
        }
        public void GetInvoiceBySearch(string InvoiceNo)
        {
            IDataParameter[] DParam = { };
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvNo", MySqlDbType = MySqlDbType.VarChar, Value = InvoiceNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Flag", MySqlDbType = MySqlDbType.VarChar, Value = "S" });
            DParam = LstParam.ToArray();
            DataSet LstInvoice = new DataSet();
            LstInvoice = DataAccess.ExecuteDataSet("getsinglebulkinvdtl", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<string> Invoice = new List<string>();
            try
            {
                if (LstInvoice.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                    for (int i = 0; i < LstInvoice.Tables[0].Rows.Count; i++)
                    {
                        Invoice.Add(LstInvoice.Tables[0].Rows[i]["InvoiceNo"].ToString());
                    }

                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Invoice;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                //Result.Close();
                //Result.Dispose();

            }
        }

        public void getCompanyDetails()
        {

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();


            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getCompanyDetails", CommandType.StoredProcedure, DParam);
            CompanyDetailsForReport objCompanyDetails = new CompanyDetailsForReport();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    objCompanyDetails.RoAddress = Convert.ToString(Result["ROAddress"]).Replace("<br/>", " ");
                    objCompanyDetails.CompanyName = Convert.ToString(Result["CompanyName"]);
                    objCompanyDetails.CompanyAddress = Convert.ToString(Result["CompanyAddress"]).Replace("<br/>", " ");
                    objCompanyDetails.EmailAddress = Convert.ToString(Result["EmailAddress"]).Replace("<br/>", " ");
                    objCompanyDetails.EffectVersion = Convert.ToDecimal(Result["Version"]);
                    objCompanyDetails.VersionLogoFile = Convert.ToString(Result["Effectlogofile"]);



                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objCompanyDetails;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void GetSDBalanceforReport(int PayeeId, int invid)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_PayeeId", MySqlDbType = MySqlDbType.Int32, Value = PayeeId });
            lstParam.Add(new MySqlParameter { ParameterName = "in_invoiceId", MySqlDbType = MySqlDbType.Int32, Value = invid });

            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("getSDBalanceForprint", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            WFLDSDBalancePrint objSDBalance = new WFLDSDBalancePrint();
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    objSDBalance.SDBalance = Convert.ToDecimal(Result["SDBalanceAmount"]);

                }


                if (Status == 1)
                {
                    _DBResponse.Data = objSDBalance;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }


        public void GetVehicleforBond(int invid)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_invoiceId", MySqlDbType = MySqlDbType.Int32, Value = invid });

            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("getVehicleForprint", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            int Vno = 0;
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    Vno = Convert.ToInt32(Result["NoOfVechicle"]);

                }


                if (Status == 1)
                {
                    _DBResponse.Data = Vno;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetTotalSBNoforReport(string InvoiceNo)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.String, Size = 40, Value = InvoiceNo });


            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("getTotalSBForExport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            WFLDSDBalancePrint objSDBalance = new WFLDSDBalancePrint();
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    objSDBalance.TotalSbNo = Convert.ToInt32(Result["TotalSBNo"]);
                    objSDBalance.TransporterName = Result["TransporterName"].ToString();

                }


                if (Status == 1)
                {
                    _DBResponse.Data = objSDBalance;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetTransporterforReport(string InvoiceNo)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.String, Size = 40, Value = InvoiceNo });


            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("getTransporterForExport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            WFLDSDBalancePrint objSDBalance = new WFLDSDBalancePrint();
            try
            {


                while (Result.Read())
                {
                    Status = 1;

                    objSDBalance.TransporterName = Result["TransporterName"].ToString();
                    objSDBalance.CustomSeal = Result["CustomSeal"].ToString();
                    objSDBalance.LinerSeal = Result["LinerSeal"].ToString();
                    objSDBalance.CHAName = Result["CHA"].ToString();
                    objSDBalance.Country = Result["Country"].ToString();

                }


                if (Status == 1)
                {
                    _DBResponse.Data = objSDBalance;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public string GetPreviousInvDate(String DelAppNo)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_DeliApp", MySqlDbType = MySqlDbType.VarChar, Value = DelAppNo });

            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("GetPreviousInvoiceDate", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            // WFLDSDBalancePrint objSDBalance = new WFLDSDBalancePrint();
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    ReturnObj = Result["PDate"].ToString();

                }


                if (Status == 1)
                {
                    _DBResponse.Data = ReturnObj;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
            return ReturnObj;
        }


        public void GetDaysWeeksForIMPYard(int invid, string CFSCode, int fvalue)
        {
            String ReturnObj = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_invoiceId", MySqlDbType = MySqlDbType.Int32, Value = invid });
            lstParam.Add(new MySqlParameter { ParameterName = "in_CFSCode", MySqlDbType = MySqlDbType.VarChar, Value = CFSCode });
            lstParam.Add(new MySqlParameter { ParameterName = "in_flag", MySqlDbType = MySqlDbType.Int32, Value = fvalue });

            //    lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            //lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.VarChar, Value = ReturnObj, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("GetDaysWeeksForIMPYard", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            WFLDDaysWeeks objDaysWeeks = new WFLDDaysWeeks();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objDaysWeeks.Days = Convert.ToInt32(Result["Days"]);
                    //objDaysWeeks.Weeks = Convert.ToInt32(Result["Weeks"]);
                }
                if (Status == 1)
                {
                    _DBResponse.Data = objDaysWeeks;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetPartyList()
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            IDataParameter[] DParam = { };
            DParam = lstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAllPartyList", CommandType.StoredProcedure, DParam);
            List<dynamic> lstParty = new List<dynamic>();
            int Status = 0;
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstParty.Add(new { PartyId = Convert.ToInt32(Result["PartyId"]), PartyName = Convert.ToString(Result["PartyName"]) });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstParty;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "Error";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }

        #region  SD A/c Statement
        public void GetPDAStatement(int Month, int Year)
        {
            int Status = 0;
            DataSet Result = new DataSet();
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Month", MySqlDbType = MySqlDbType.Int32, Value = Month });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Year", MySqlDbType = MySqlDbType.Int32, Value = Year });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            Result = DataAccess.ExecuteDataSet("RptSdStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDSDStatement ObjSDStatement = new WFLDSDStatement();
            try
            {
                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    foreach (DataRow dr in Result.Tables[0].Rows)
                    {
                        ObjSDStatement.LstSD.Add(new WFLDSDList
                        {
                            PartyName = Convert.ToString(dr["PartyName"]),
                            SDAmount = Convert.ToString(dr["SDAmount"]),
                            UnpaidAmount = Convert.ToString(dr["UnpaidAmount"]),
                            BalanceAmount = Convert.ToString(dr["BalanceAmount"]),
                            AdjustAmount = Convert.ToDecimal(dr["AdjustAmount"]),
                            UtilizationAmount = Convert.ToDecimal(dr["UtilizationAmount"]),
                            RefundAmount = Convert.ToDecimal(dr["RefundAmount"])



                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjSDStatement;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion

        #region  On Account Statement
        public void GetOnAccountStatement(string Fdt, string Tdt)
        {
            int Status = 0;
            DataSet Result = new DataSet();
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.VarString, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Tdt", MySqlDbType = MySqlDbType.VarString, Value = Tdt });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            Result = DataAccess.ExecuteDataSet("RptOAStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDOAStatement ObjOAStatement = new WFLDOAStatement();
            try
            {
                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    foreach (DataRow dr in Result.Tables[0].Rows)
                    {
                        ObjOAStatement.LstOnAccount.Add(new WFLDOAList
                        {
                            PartyName = Convert.ToString(dr["PartyName"]),
                            OpeningAmount = Convert.ToDecimal(dr["OpeningBalance"]),
                            BalanceAmount = Convert.ToDecimal(dr["BalanceAmount"]),
                            AdjustAmount = Convert.ToDecimal(dr["AdjustAmount"]),
                            ReceiptAmount = Convert.ToDecimal(dr["ReceiptAmount"]),

                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjOAStatement;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion

        #region Party Wise On Account Statement Details Statement
        public void GetAllPartyForOADet(string PartyCode, int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyCode", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = PartyCode });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAllPartyForPartyWiseOADet", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLDPartyForOADet> LstParty = new List<WFLDPartyForOADet>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstParty.Add(new WFLDPartyForOADet
                    {
                        Party = Result["Party"].ToString(),
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyCode = Result["PartyCode"].ToString()

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstParty, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetPartyWiseOnAccountStatement(int PartyId, string Fdt, string Tdt)
        {
            int Status = 0;
            DataSet Result = new DataSet();
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_OAPartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.VarString, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Tdt", MySqlDbType = MySqlDbType.VarString, Value = Tdt });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            Result = DataAccess.ExecuteDataSet("RptOAPartyWiseStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDOADtlStatement OAResult = new WFLDOADtlStatement();
            try
            {

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    foreach (DataRow dr in Result.Tables[0].Rows)
                    {
                        OAResult.PartyName = Convert.ToString(dr["PartyName"]);
                        OAResult.PartyCode = Convert.ToString(dr["PartyCode"]);
                        OAResult.PartyGst = Convert.ToString(dr["PartyGst"]);
                        //OAResult.CompanyGst = "";//Result["CompanyGst"].ToString();
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OAResult.LstOnAccountDtl.Add(new WFLDOADtlStatementList
                        {
                            Particular = Convert.ToString(dr["ReceiptNo"]),
                            ReceivedDate = Convert.ToString(dr["ReceivedDate"]),
                            AdjustAmount = Convert.ToDecimal(dr["AdjustAmount"]),
                            ReceiptAmount = Convert.ToDecimal(dr["ReceiptAmount"]),
                            ClosingBalance = Convert.ToDecimal(dr["ClosingBalance"]),

                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = OAResult;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }


        #endregion

        #region Register of Outward Supply
        //public void GetRegisterofOutwardSupply(DateTime date1, DateTime date2, string Type)
        //{
        //    var LstParam = new List<MySqlParameter>();
        //    LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
        //    LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
        //    LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
        //    IDataParameter[] DParam = { };
        //    DParam = LstParam.ToArray();
        //    DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
        //    _DBResponse = new DatabaseResponse();
        //    //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
        //    DataSet ds = DataAccess.ExecuteDataSet("GetRegisterofOutwardSupply", CommandType.StoredProcedure, DParam);
        //    DataTable dt = ds.Tables[0];




        //    if (Type == "Inv" || Type == "Unpaid" || Type == "CancelInv")
        //    {
        //        List<WFLDRegisterOfOutwardSupplyModel> model = new List<WFLDRegisterOfOutwardSupplyModel>();
        //        try
        //        {

        //            decimal InvoiceAmount = 0, CRAmount = 0;

        //            _DBResponse.Status = 0;
        //            _DBResponse.Message = "No Data";
        //            _DBResponse.Data = RegisterofOutwardSupplyExcel(model, InvoiceAmount, CRAmount, dt);
        //        }
        //        catch (Exception ex)
        //        {
        //            _DBResponse.Status = 0;
        //            _DBResponse.Message = "No Data";
        //            _DBResponse.Data = null;
        //        }
        //        finally
        //        {
        //            ds.Dispose();
        //        }
        //    }
        //    else
        //    {
        //        List<WFLDRegisterOfOutwardSupplyModelCreditDebit> modelCreditDebit = new List<WFLDRegisterOfOutwardSupplyModelCreditDebit>();
        //        try
        //        {
        //            if (ds.Tables[0].Rows.Count > 0)
        //            {
        //                modelCreditDebit = (from DataRow dr in dt.Rows
        //                                    select new WFLDRegisterOfOutwardSupplyModelCreditDebit()
        //                                    {
        //                                        SlNo = Convert.ToInt32(dr["SlNo"]),
        //                                        GST = dr["GST"].ToString(),
        //                                        Place = dr["Place"].ToString(),
        //                                        Name = dr["Name"].ToString(),
        //                                        InvoiceNo = dr["InvoiceNo"].ToString(),
        //                                        InvoiceDate = dr["InvoiceDate"].ToString(),

        //                                        // Period = dr["Period"].ToString(),

        //                                        // Nature = dr["Nature"].ToString(),
        //                                        // HSNCode = dr["HSNCode"].ToString(),
        //                                        // Rate = Convert.ToDecimal(dr["Rate"]),
        //                                        GSTC = dr["GST"].ToString(),
        //                                        PlaceC = dr["Name"].ToString(),
        //                                        CreditNoteNo = dr["CreditNoteNo"].ToString(),
        //                                        CRNoteDate = dr["CRNoteDate"].ToString(),
        //                                        ServiceValue = Convert.ToDecimal(dr["ServiceValue"]),

        //                                        //  ITaxPercent = dr["ITaxPercent"].ToString(),
        //                                        ITaxAmount = Convert.ToDecimal(dr["ITaxAmount"]),
        //                                        //  CTaxPercent = dr["CTaxPercent"].ToString(),
        //                                        CTaxAmount = Convert.ToDecimal(dr["CTaxAmount"]),
        //                                        //  STaxPercent = dr["STaxPercent"].ToString(),
        //                                        STaxAmount = Convert.ToDecimal(dr["STaxAmount"]),

        //                                        Total = Convert.ToDecimal(dr["Total"])

        //                                    }).ToList();
        //                _DBResponse.Status = 0;
        //                _DBResponse.Message = "No Data";
        //                decimal InvoiceAmount = 0, CRAmount = 0;

        //                _DBResponse.Data = RegisterofOutwardSupplyExcelCreditDebit(modelCreditDebit, InvoiceAmount, CRAmount, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"), Type);

        //            }

        //            //foreach (DataRow dr in ds.Tables[1].Rows)
        //            //{
        //            //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //            //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //            //}
        //        }
        //        catch (Exception ex)
        //        {
        //            _DBResponse.Status = 0;
        //            _DBResponse.Message = "No Data";
        //            _DBResponse.Data = null;
        //        }
        //        finally
        //        {
        //            ds.Dispose();
        //        }
        //    }


        //}



        private string PLedgerConsolidateExcel(List<WFLD_PartyLedCons> model, DataTable dt, string datevalue)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Consolidate Party Ledger Statement As On Date " + datevalue + "";
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }




        private string EgmFclReportExcel(DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "EGM FCL REPORT From Date " + datevalue + " To " + datevalueto + "";
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }


        private string EgmLclReportExcel(DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "EGM LCL REPORT From Date " + datevalue + " To " + datevalueto + "";
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }


        private string RegisterofOutwardSupplyExcel(List<WFLDRegisterOfOutwardSupplyModel> model, decimal InvoiceAmount, decimal CRAmount, DataTable dt)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                cell2.Text = "Principal Place of Business";
                System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                tr2.Cells.Add(cell2);
                tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }
        private string RegisterofOutwardSupplyExcel(List<WFLDRegisterOfOutwardSupplyModel> model, decimal InvoiceAmount, decimal CRAmount)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                exl.MargeCell("A1:M1", title, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N1:O1", "BILL REGISTER", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "Place" + Environment.NewLine + "(Name of State)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "Name of Customer to whom Service rendered", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Period of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "Nature of Invoice" + Environment.NewLine + "(Resv./Initial Fumigation/General Basic/Over & Above)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "HSN Code", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H2:H4", "Rate per" + Environment.NewLine + "Bag/MT/Sqm", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I2:K2", "Invoice Details", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I3:I4", "Invoice No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J3:J4", "Date of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K3:K4", "Value of Service" + Environment.NewLine + "(Before Tax)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L2:Q2", "Rate of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L3:M3", "IGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N3:O3", "CGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("P3:Q3", "SGST", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(11+13 or 11+15+17))", DynamicExcel.CellAlignment.Middle);

                exl.MargeCell("S2:S4", "PaymentMode", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                for (var i = 65; i < 85; i++)
                {
                    char character = (char)i;
                    string text = character.ToString();
                    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                }

                exl.AddTable<WFLDRegisterOfOutwardSupplyModel>("A", 6, model, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 20, 12, 12, 8, 14, 8, 14, 8, 14, 16, 10, 30 });
                var igstamt = model.Sum(o => o.ITaxAmount);
                var sgstamt = model.Sum(o => o.STaxAmount);
                var cgstamt = model.Sum(o => o.CTaxAmount);
                var totalamt = model.Sum(o => o.Total);
                exl.AddCell("M" + (model.Count + 6).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 6).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Q" + (model.Count + 6).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("R" + (model.Count + 6).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                /*exl.AddCell("O" + (model.Count + 7).ToString(), "Invoice Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 7).ToString(), InvoiceAmount, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 8).ToString(), "Cash Receipt Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 8).ToString(), CRAmount, DynamicExcel.CellAlignment.CenterRight);*/

                exl.Save();
            }
            return excelFile;
        }
        private string RegisterofOutwardSupplyExcelCreditDebit(List<WFLDRegisterOfOutwardSupplyModelCreditDebit> modelCreditDebit, decimal InvoiceAmount, decimal CRAmount, string date1, string date2, string Type)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                string typeOfValue = "";
                if (Type == "C")
                {
                    typeOfValue = "Credit Note Issued During Period Of " + date1 + " TO " + date2;

                }
                else
                {
                    typeOfValue = "Debit Note Issued During Period Of " + date1 + " TO " + date2;

                }
                exl.MargeCell("A1:D1", "CENTRAL WAREHOUSING CORPORATION", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:D2", typeOfValue, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A4:F4", "DETAILS OF ORIGINAL INOICE", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G4:O4", "DETAILS OF CREDIT NOTE ISSUED", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A5:A6", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B5:B6", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C5:C6", "Name of State", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D5:D6", "Name of Customer", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E5:E6", "Original Invoice No.", DynamicExcel.CellAlignment.Middle);

                exl.MargeCell("F5:F6", "Date of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G5:G6", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H5:H6", "Name of Customer", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I5:I6", "Invoice No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J5:J6", "Invoice Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K5:K6", "Taxable Value", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L5:L6", "IGST 18%", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M5:M6", "CGST 9%", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N5:N6", "SGST 9%", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("O5:O6", "Total Invoice Value", DynamicExcel.CellAlignment.Middle);


                //for (var i = 65; i < 86; i++)
                //{
                //    char character = (char)i;
                //    string text = character.ToString();
                //    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                //}

                exl.AddTable("A", 7, modelCreditDebit, new[] { 6, 20, 20, 30, 12, 20, 20, 15, 15, 15, 14, 12, 12, 8, 14 });
                var TaxAmt = modelCreditDebit.Sum(o => o.ServiceValue);

                var igstamt = modelCreditDebit.Sum(o => o.ITaxAmount);
                var sgstamt = modelCreditDebit.Sum(o => o.STaxAmount);
                var cgstamt = modelCreditDebit.Sum(o => o.CTaxAmount);
                var totalamt = modelCreditDebit.Sum(o => o.Total);
                exl.AddCell("J" + (modelCreditDebit.Count + 7).ToString(), "Total", DynamicExcel.CellAlignment.TopLeft);
                exl.AddCell("K" + (modelCreditDebit.Count + 7).ToString(), TaxAmt.ToString(), DynamicExcel.CellAlignment.TopLeft);

                exl.AddCell("L" + (modelCreditDebit.Count + 7).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.TopLeft);
                exl.AddCell("M" + (modelCreditDebit.Count + 7).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.TopLeft);
                exl.AddCell("N" + (modelCreditDebit.Count + 7).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.TopLeft);
                exl.AddCell("O" + (modelCreditDebit.Count + 7).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.TopLeft);

                exl.Save();
            }
            return excelFile;
        }

        #endregion

        #region Party Wise Unpaid Invoice
        public void PartyWiseUnpaidAmout(int PartyId, string AsOnDate)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Date", MySqlDbType = MySqlDbType.String, Value = Convert.ToDateTime(AsOnDate).ToString("yyyy/MM/dd") });
            IDataParameter[] DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("PartyWiseUnpaidAmt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            PartyWiseUnpaidDtl ObjDet = new PartyWiseUnpaidDtl();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    ObjDet.AsOnDate = AsOnDate.ToString();
                    ObjDet.PartyName = Result["PartyName"].ToString();
                    ObjDet.lstDtl.Add(new InvoiceDtl
                    {
                        InvoiceNo = Convert.ToString(Result["InvoiceNo"]),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceAmt = Convert.ToDecimal(Result["InvoiceAmt"])
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjDet;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion

        #region All Party Unpaid Invoice
        public void PartyUnpaidCreditStatus(string AsOnDate)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Date", MySqlDbType = MySqlDbType.String, Value = Convert.ToDateTime(AsOnDate).ToString("yyyy/MM/dd") });
            IDataParameter[] DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("AllPartyUnpaidAmt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<PartyUnpaidDetails> lstDet = new List<PartyUnpaidDetails>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstDet.Add(new PartyUnpaidDetails
                    {
                        PartyName = Convert.ToString(Result["PartyName"]),
                        UnpaidAmt = Convert.ToDecimal(Result["UnpaidAmt"])
                    });
                }
                if (lstDet.Count > 0)
                {
                    lstDet[0].AsOnDate = AsOnDate.ToString();
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstDet;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion

        #region Bulk Cash receipt 
        public void GetBulkCashreceipt(string FromDate, string ToDate, string ReceiptNo)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(FromDate == null ? "" : FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(ToDate == null ? "" : ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_CashReceiptId", MySqlDbType = MySqlDbType.VarChar, Size = 30, Value = ReceiptNo });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetBulkCashRecptForPrint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }

        public void GetBulkCashreceiptForExternalUser(string FromDate, string ToDate, string ReceiptNo,int PartyId)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(FromDate == null ? "" : FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(ToDate == null ? "" : ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_CashReceiptId", MySqlDbType = MySqlDbType.VarChar, Size = 30, Value = ReceiptNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Size = 30, Value = PartyId });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetBulkCashRecptForPrintForExternalUser", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        public void GetChequeBounceCashreceipt(string ReceiptNo)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            //    LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(FromDate == null ? "" : FromDate).ToString("yyyy-MM-dd") });
            //     LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(ToDate == null ? "" : ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_CashReceiptId", MySqlDbType = MySqlDbType.VarChar, Size = 30, Value = ReceiptNo });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetCashRecptForCCPrint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion

        #region ContainerwiseInvoiceReport

        public void ContainerInvoiceDetailsForPrint(WFLDContainerInvoiceReport ObjBulkInvoiceReport)
        {

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.InvoiceId });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("getContainerwiseInvoiceforprint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }


        public void GetContainer()
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerInvoice", CommandType.StoredProcedure);
            _DBResponse = new DatabaseResponse();
            IList<WFLDContainerInvoiceReport> objContainerLst = new List<WFLDContainerInvoiceReport>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objContainerLst.Add(new WFLDContainerInvoiceReport()
                    {
                        InvoiceId = Convert.ToInt32(Result["InoviceId"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objContainerLst;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion

        #region DailyCashBook
        public void DailyCashBook(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DailyCashBookReport", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstDailyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstDailyCashBook.Add(new DailyCashBookWFLD
                    {

                        //ReceiptNo, ReceiptDate, Party, ChequeNo, CashReceiptId, GenSpace, sto, Insurance, GroundRentEmpty, GroundRentLoaded, Mf, EntCharge, 
                        //Fum, OtCharge, CGSTAmt, SGSTAmt, IGSTAmt, MISC, MiscExcess, TotalCash, TotalCheque, tdsCol, crTDS
                        /*CRNo = Result["ReceiptNo"].ToString(),
                        ReceiptDate = Convert.ToDateTime(Result["ReceiptDate"] == DBNull.Value ? "N/A" : Result["ReceiptDate"]).ToString("dd/MM/yyyy"),

                        Depositor = Result["Party"].ToString(),*/
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Result["InvoiceDate"].ToString(),
                        InvoiceType = Result["InvoiceType"].ToString(),
                        PartyName = Result["PartyName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        ModeOfPay = Result["ModeOfPay"].ToString(),

                        ChqNo = Result["ChequeNo"].ToString(),
                        GenSpace = Result["GenSpace"].ToString(),
                        StorageCharge = Result["sto"].ToString(),
                        Insurance = Result["Insurance"].ToString(),
                        GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                        GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                        MfCharge = Result["Mf"].ToString(),
                        EntryCharge = Result["EntCharge"].ToString(),
                        Fumigation = Result["Fum"].ToString(),
                        OtherCharge = Result["OtCharge"].ToString(),
                        Misc = Result["MISC"].ToString(),
                        Cgst = Result["CGSTAmt"].ToString(),
                        Sgst = Result["SGSTAmt"].ToString(),
                        Igst = Result["IGSTAmt"].ToString(),

                        MiscExcess = Result["MiscExcess"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        TotalOthers = Result["TotalOther"].ToString(),
                        Tds = Result["tdsCol"].ToString(),
                        CrTds = Result["crTDS"].ToString(),
                        TotalPDA = Result["TotalPDA"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        //TDSPlus = Result["TDSPlus"].ToString(),
                        //Exempted = Result["Exempted"].ToString(),
                        //PdaPLus = Result["PdaPLus"].ToString(),
                        //TDSMinus = Result["TDSMinus"].ToString(),
                        //PdaMinus = Result["PdaMinus"].ToString(),
                        //HtAdjust = Result["HtAdjust"].ToString(),
                        //RoundOff = Result["RoundUp"].ToString(),
                        //RowTotal = Result["Total"].ToString()


                        //Party = Result["Party"].ToString(),
                        //Deposit = Result["Deposit"].ToString(),
                        //Withdraw = Result["Withdraw"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDailyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void DailyCashBookCash(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DailyCashBookReportCash", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstDailyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstDailyCashBook.Add(new DailyCashBookWFLD
                    {

                        CRNo = Result["Receiptno"].ToString(),
                        ReceiptDate = Result["ReceiptDate"].ToString(),
                        PartyName = Result["PartyName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        ModeOfPay = Result["ModeOfPay"].ToString(),
                        ChqNo = Result["ChequeNo"].ToString(),
                        ChqDate = Result["ChequeDate"].ToString(),
                        ChequeBank = Result["ChequeBank"].ToString(),
                        TotalOnAccount = Result["OnAccount"].ToString(),
                        TotalPDA = Result["TotalPDA"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        TotalOthers = Result["TotalOther"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        CRNotes = Result["CRNotes"].ToString(),

                        /* InvoiceNo = Result["InvoiceNo"].ToString(),
                         InvoiceDate = Result["InvoiceDate"].ToString(),
                         InvoiceType = Result["InvoiceType"].ToString(),
                         PartyName = Result["PartyName"].ToString(),
                         PayeeName = Result["PayeeName"].ToString(),
                         ModeOfPay = Result["ModeOfPay"].ToString(),
                         ChqNo = Result["ChequeNo"].ToString(),
                         GenSpace = Result["GenSpace"].ToString(),
                         StorageCharge = Result["sto"].ToString(),
                         Insurance = Result["Insurance"].ToString(),
                         GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                         GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                         MfCharge = Result["Mf"].ToString(),
                         EntryCharge = Result["EntCharge"].ToString(),
                         Fumigation = Result["Fum"].ToString(),
                         OtherCharge = Result["OtCharge"].ToString(),
                         Misc = Result["MISC"].ToString(),
                         Cgst = Result["CGSTAmt"].ToString(),
                         Sgst = Result["SGSTAmt"].ToString(),
                         Igst = Result["IGSTAmt"].ToString(),

                         MiscExcess = Result["MiscExcess"].ToString(),
                         TotalCash = Result["TotalCash"].ToString(),
                         TotalCheque = Result["TotalCheque"].ToString(),
                         TotalOthers = Result["TotalOther"].ToString(),
                         Tds = Result["tdsCol"].ToString(),
                         CrTds = Result["crTDS"].ToString(),
                         TotalPDA = Result["TotalPDA"].ToString(),
                         Remarks = Result["Remarks"].ToString(),*/


                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDailyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        public void MonthlyCashBook(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("MonthlyCashBookReport", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstMonthlyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstMonthlyCashBook.Add(new DailyCashBookWFLD
                    {
                        //CRNo = Result["ReceiptNo"].ToString(),
                        ReceiptDate = Convert.ToDateTime(Result["ReceiptDate"] == DBNull.Value ? "N/A" : Result["ReceiptDate"]).ToString("dd/MM/yyyy"),

                        //Depositor = Result["Party"].ToString(),
                        //ChqNo = Result["ChequeNo"].ToString(),
                        GenSpace = Result["GenSpace"].ToString(),
                        StorageCharge = Result["sto"].ToString(),
                        Insurance = Result["Insurance"].ToString(),
                        GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                        GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                        MfCharge = Result["Mf"].ToString(),
                        EntryCharge = Result["EntCharge"].ToString(),
                        Fumigation = Result["Fum"].ToString(),
                        OtherCharge = Result["OtCharge"].ToString(),
                        Cgst = Result["CGSTAmt"].ToString(),
                        Sgst = Result["SGSTAmt"].ToString(),
                        Igst = Result["IGSTAmt"].ToString(),
                        Misc = Result["MISC"].ToString(),
                        MiscExcess = Result["MiscExcess"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        TotalOthers = Result["TotalOther"].ToString(),
                        TotalPDA = Result["TotalPDA"].ToString(),
                        Tds = Result["tdsCol"].ToString(),
                        CrTds = Result["crTDS"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstMonthlyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #region Monthly SD Book
        public void MonthSDBookReport(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("MonthSDBookReport", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstMonthlyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstMonthlyCashBook.Add(new DailyCashBookWFLD
                    {
                        //CRNo = Result["ReceiptNo"].ToString(),
                        ReceiptDate = Convert.ToDateTime(Result["InvoiceDate"] == DBNull.Value ? "N/A" : Result["InvoiceDate"]).ToString("dd/MM/yyyy"),

                        //Depositor = Result["Party"].ToString(),
                        //ChqNo = Result["ChequeNo"].ToString(),
                        GenSpace = Result["GenSpace"].ToString(),
                        StorageCharge = Result["sto"].ToString(),
                        Insurance = Result["Insurance"].ToString(),
                        GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                        GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                        MfCharge = Result["Mf"].ToString(),
                        EntryCharge = Result["EntCharge"].ToString(),
                        Fumigation = Result["Fum"].ToString(),
                        OtherCharge = Result["OtCharge"].ToString(),
                        Cgst = Result["CGSTAmt"].ToString(),
                        Sgst = Result["SGSTAmt"].ToString(),
                        Igst = Result["IGSTAmt"].ToString(),
                        Misc = Result["MISC"].ToString(),
                        MiscExcess = Result["MiscExcess"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        Tds = Result["tdsCol"].ToString(),
                        CrTds = Result["crTDS"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstMonthlyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion


        public void GetInvoicePartyList()
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetInvoicePartyList", CommandType.StoredProcedure);
            _DBResponse = new DatabaseResponse();
            IList<WFLDImpPartyForpage> objPayeeName = new List<WFLDImpPartyForpage>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objPayeeName.Add(new WFLDImpPartyForpage()
                    {
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyName = Convert.ToString(Result["PartyName"]),

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objPayeeName;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetInsentiveReport(string FromDate, string ToDate,int Partyid)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy/MM/dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyID", MySqlDbType = MySqlDbType.Int32, Value = Partyid });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_Party", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(PartyId) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            DataSet Result = DataAccess.ExecuteDataSet("InsentiveReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            Status = 1;
            try
            {

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                //  Result.Close();
            }
        }

        #region WorkSlipImport 

        public void GetWorkSlipImport(string FromDate, string ToDate )
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy/MM/dd") });
           // LstParam.Add(new MySqlParameter { ParameterName = "in_Party", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(PartyId) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            DataSet Result = DataAccess.ExecuteDataSet("WorkSlipImport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            Status = 1;
            try
            {

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                //  Result.Close();
            }
        }
        public void GetWorkSlipExport(string FromDate, string ToDate)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy/MM/dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy/MM/dd") });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_Party", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(PartyId) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            DataSet Result = DataAccess.ExecuteDataSet("WorkSlipExport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            Status = 1;
            try
            {

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                //  Result.Close();
            }
        }
        #endregion
        public void DailyPdaActivity(WFLDDailyPdaActivityReport ObjDailyPdaActivityReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyPdaActivityReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyPdaActivityReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DailySdActivityReport", CommandType.StoredProcedure, DParam);
            WFLDDailyPdaActivityReport lstRptDailyPdaActivity = new WFLDDailyPdaActivityReport();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    lstRptDailyPdaActivity.LstDailyPdaActivityReport.Add(new WFLDDailyPdaActivityList
                    {
                        Party = Result["PartyName"].ToString(),
                        partycode = Result["PartyCode"].ToString(),
                        Opening = Convert.ToDecimal(Result["OpeningAmount"]),
                        Deposit = Convert.ToDecimal(Result["DebitAmount"]),
                        Withdraw = Convert.ToDecimal(Result["AdjustAmount"]),
                        Closing = Convert.ToDecimal(Result["UtilizationAmount"]),
                    });
                }


                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstRptDailyPdaActivity;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }


        public void PdSummaryReport(PdSummary ObjPdSummaryReport, int type = 1)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjPdSummaryReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            // DateTime dtTo = DateTime.ParseExact(ObjCargoInStockReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_asOndate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Type", MySqlDbType = MySqlDbType.Int32, Value = type });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("PdSummaryReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDPDSummaryModel> model = new List<WFLDPDSummaryModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetPDSummaryExcel(model, dt, ObjPdSummaryReport.PeriodFrom);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetPDSummaryExcel(List<WFLDPDSummaryModel> model, DataTable dt, string datevalue)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "SD Summary Report As on " + datevalue;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }



        public void PdConsolidateReport(PdSummary ObjPdSummaryReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjPdSummaryReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            // DateTime dtTo = DateTime.ParseExact(ObjCargoInStockReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status
            _DBResponse = new DatabaseResponse();

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("RptPartyLedgerConsolidate", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];






            List<WFLD_PartyLedCons> model = new List<WFLD_PartyLedCons>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = PLedgerConsolidateExcel(model, dt, ObjPdSummaryReport.PeriodFrom);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }



            //    IDataReader Result = DataAccess.ExecuteDataReader("RptPartyLedgerConsolidate", CommandType.StoredProcedure, DParam);
            //IList<WFLD_PartyLedCons> LstPdSummaryReport = new List<WFLD_PartyLedCons>();
            //// CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            //_DBResponse = new DatabaseResponse();
            //try
            //{
            //    while (Result.Read())
            //    {
            //        Status = 1;
            //        //ObjStatusDtl = new ConsumerList();
            //        //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
            //        //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
            //        //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
            //        //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


            //        //                 InvoiceDate DATE,
            //        //         InvoiceNumber       VARCHAR(30),
            //        //ReceiptAmount DECIMAL(18, 3),
            //        //InvoiceAmount DECIMAL(18, 3),
            //        //Value DECIMAL(18, 3),
            //        //OpeningBalance DECIMAL(18, 3),
            //        //ClosingBalance DECIMAL(18, 3)

            //        LstPdSummaryReport.Add(new WFLD_PartyLedCons
            //        {



            //            PartyName = Result["PartyName"].ToString(),
            //            PartyCode = Result["PartyCode"].ToString(),

            //            Amount = Result["Amount"].ToString(),
            //            CreditAmt = Result["CreditAmt"].ToString(),
            //            DebitAmt = Result["DebitAmt"].ToString(),
            //            SDAmount = Result["SDAmount"].ToString(),


            //            //ContainerNo = Result["ContainerNo"].ToString(),
            //            //value = Result["value"].ToString()

            //        });
            //    }

            //    if (Status == 1)
            //    {
            //        _DBResponse.Status = 1;
            //        _DBResponse.Message = "Success";
            //        _DBResponse.Data = LstPdSummaryReport;
            //    }
            //    else
            //    {
            //        _DBResponse.Status = 0;
            //        _DBResponse.Message = "No Data";
            //        _DBResponse.Data = null;
            //    }
            //}
            //catch (Exception ex)
            //{
            //    _DBResponse.Status = 0;
            //    _DBResponse.Message = "Error";
            //    _DBResponse.Data = null;
            //}
            //finally
            //{
            //    Result.Close();
            //    Result.Dispose();

            //}
        }

        public void GetPayeeNameforUnpaidInvoice()
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            IDataParameter[] DParam = { };
            DParam = lstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetPayeeNameforUnpaidInv", CommandType.StoredProcedure, DParam);
            List<dynamic> lstParty = new List<dynamic>();
            int Status = 0;
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstParty.Add(new { PartyId = Convert.ToInt32(Result["PartyId"]), PartyName = Convert.ToString(Result["PartyName"]) });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstParty;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "Error";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }

        #region BulkDebit/CreaditNote
        public void PrintDetailsForBulkCRNote(string PeriodFrom, string PeriodTo, string CRDR)
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            lstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Todate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_CRDR", MySqlDbType = MySqlDbType.VarChar, Value = CRDR });

            IDataParameter[] DParam = { };
            DParam = lstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("PrintOfBulkDRNote", CommandType.StoredProcedure, DParam);
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();


            int Status = 0;
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {

                    objCR.CompanyName = Result["CompanyName"].ToString();
                    objCR.CompanyAddress = Result["CompanyAddress"].ToString();
                    objCR.CompStateName = Result["CompStateName"].ToString();
                    objCR.CompStateCode = Result["CompStateCode"].ToString();
                    objCR.CompCityName = Result["CompCityName"].ToString();
                    objCR.CompGstIn = Result["CompGstIn"].ToString();
                    objCR.CompPan = Result["CompPan"].ToString();
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        objCR.lstCrParty.Add(new PrintModelOfBulkCrParty
                        {
                            PartyName = Result["PartyName"].ToString(),
                            PartyAddress = Result["PartyAddress"].ToString(),
                            PartyCityName = Result["PartyCityName"].ToString(),
                            PartyStateName = Result["PartyStateName"].ToString(),
                            PartyStateCode = Result["PartyStateCode"].ToString(),
                            PartyGSTIN = Result["PartyGSTIN"].ToString(),
                            CRNoteNo = Result["CRNoteNo"].ToString(),
                            CRNoteDate = Result["CRNoteDate"].ToString(),
                            InvoiceNo = Result["InvoiceNo"].ToString(),
                            InvoiceDate = Result["InvoiceDate"].ToString(),
                            TotalAmt = Convert.ToDecimal(Result["TotalAmt"]),
                            RoundUp = Convert.ToDecimal(Result["RoundUp"]),
                            GrandTotal = Convert.ToDecimal(Result["GrandTotal"]),
                            CRNoteId = Convert.ToInt32(Result["CRNoteId"]),
                            Remarks = Result["Remarks"].ToString(),
                            irn = Result["irn"].ToString(),
                            SignedQRCode = Result["SignedQRCode"].ToString(),
                            SupplyType = Result["SupplyType"].ToString(),
                            PayeeName = Result["PayeeName"].ToString(),
                        });

                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        objCR.lstCharges.Add(new ChargesModel
                        {
                            ChargeName = Result["ChargeName"].ToString(),
                            Taxable = Convert.ToDecimal(Result["Taxable"]),
                            IGSTPer = Convert.ToDecimal(Result["IGSTPer"]),
                            IGSTAmt = Convert.ToDecimal(Result["IGSTAmt"]),
                            CGSTPer = Convert.ToDecimal(Result["CGSTPer"]),
                            CGSTAmt = Convert.ToDecimal(Result["CGSTAmt"]),
                            SGSTPer = Convert.ToDecimal(Result["SGSTPer"]),
                            SGSTAmt = Convert.ToDecimal(Result["SGSTAmt"]),
                            Total = Convert.ToDecimal(Result["Total"]),
                            CRNoteId = Convert.ToInt32(Result["CRNoteId"]),
                            SACCode = Result["SACCode"].ToString()
                        });
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objCR;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "Error";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }

        public void PrintDetailsForBulkCRNoteForExternalUser(string PeriodFrom, string PeriodTo, string CRDR,int UserId)
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            lstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Todate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_CRDR", MySqlDbType = MySqlDbType.VarChar, Value = CRDR });
            lstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = UserId });

            IDataParameter[] DParam = { };
            DParam = lstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("PrintOfBulkDRNoteForExternalUser", CommandType.StoredProcedure, DParam);
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();


            int Status = 0;
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {

                    objCR.CompanyName = Result["CompanyName"].ToString();
                    objCR.CompanyAddress = Result["CompanyAddress"].ToString();
                    objCR.CompStateName = Result["CompStateName"].ToString();
                    objCR.CompStateCode = Result["CompStateCode"].ToString();
                    objCR.CompCityName = Result["CompCityName"].ToString();
                    objCR.CompGstIn = Result["CompGstIn"].ToString();
                    objCR.CompPan = Result["CompPan"].ToString();
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        objCR.lstCrParty.Add(new PrintModelOfBulkCrParty
                        {
                            PartyName = Result["PartyName"].ToString(),
                            PartyAddress = Result["PartyAddress"].ToString(),
                            PartyCityName = Result["PartyCityName"].ToString(),
                            PartyStateName = Result["PartyStateName"].ToString(),
                            PartyStateCode = Result["PartyStateCode"].ToString(),
                            PartyGSTIN = Result["PartyGSTIN"].ToString(),
                            CRNoteNo = Result["CRNoteNo"].ToString(),
                            CRNoteDate = Result["CRNoteDate"].ToString(),
                            InvoiceNo = Result["InvoiceNo"].ToString(),
                            InvoiceDate = Result["InvoiceDate"].ToString(),
                            TotalAmt = Convert.ToDecimal(Result["TotalAmt"]),
                            RoundUp = Convert.ToDecimal(Result["RoundUp"]),
                            GrandTotal = Convert.ToDecimal(Result["GrandTotal"]),
                            CRNoteId = Convert.ToInt32(Result["CRNoteId"]),
                            Remarks = Result["Remarks"].ToString(),
                            irn = Result["irn"].ToString(),
                            SignedQRCode = Result["SignedQRCode"].ToString(),
                            SupplyType = Result["SupplyType"].ToString(),
                            PayeeName = Result["PayeeName"].ToString(),
                        });

                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        objCR.lstCharges.Add(new ChargesModel
                        {
                            ChargeName = Result["ChargeName"].ToString(),
                            Taxable = Convert.ToDecimal(Result["Taxable"]),
                            IGSTPer = Convert.ToDecimal(Result["IGSTPer"]),
                            IGSTAmt = Convert.ToDecimal(Result["IGSTAmt"]),
                            CGSTPer = Convert.ToDecimal(Result["CGSTPer"]),
                            CGSTAmt = Convert.ToDecimal(Result["CGSTAmt"]),
                            SGSTPer = Convert.ToDecimal(Result["SGSTPer"]),
                            SGSTAmt = Convert.ToDecimal(Result["SGSTAmt"]),
                            Total = Convert.ToDecimal(Result["Total"]),
                            CRNoteId = Convert.ToInt32(Result["CRNoteId"]),
                            SACCode = Result["SACCode"].ToString()
                        });
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objCR;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "Error";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        public void PrintDetailsForPortwise(string Fdt, String Tdt)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();

            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.Date, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Tdt", MySqlDbType = MySqlDbType.Date, Value = Tdt });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("PortWiseReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            PortWiseReport SDResult = new PortWiseReport();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    SDResult.PortWiseReportList.Add(new PortWiseReport
                    {

                        SlaCode = Result["SLACode"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        RLoni = Convert.ToInt32(Result["RLoni"]),
                        ROth = Convert.ToInt32(Result["ROth"]),
                        RTkd = Convert.ToInt32(Result["RTkd"]),
                        TLoni = Convert.ToInt32(Result["TLoni"]),
                        TOth = Convert.ToInt32(Result["TOth"]),
                        TTkd = Convert.ToInt32(Result["TTkd"]),

                    });

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        if (Result["ContainerLoadType"].ToString() == "FCL")
                        {
                            SDResult.TotalFCL = Convert.ToInt32(Result["ContainerLoadTypeCount"]);
                        }
                        else if (Result["ContainerLoadType"].ToString() == "LCL")
                        {
                            SDResult.TotalLCL = Convert.ToInt32(Result["ContainerLoadTypeCount"]);
                        }



                    }
                }


                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = SDResult;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        # endregion

        #region CashReceiptInvoiceLedgerReport Partywise
        public void GetCrInvLedgerReport(int partyId, string fromdate, string todate, string comname, string address)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = partyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = fromdate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = todate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CashReceiptInvoiceLedger", CommandType.StoredProcedure, DParam);
            WFLDCashReceiptInvoiceLedger CrInvLedgerObj = new WFLDCashReceiptInvoiceLedger();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {

                    CrInvLedgerObj.OpenningBalance = Convert.ToDecimal(Result["OpenningBalance"]);
                    CrInvLedgerObj.EximTraderName = Convert.ToString(Result["EximTraderName"]);
                    CrInvLedgerObj.Address = Convert.ToString(Result["Address"]);
                    CrInvLedgerObj.City = Convert.ToString(Result["City"]);
                    CrInvLedgerObj.State = Convert.ToString(Result["State"]);
                    CrInvLedgerObj.GSTNo = Convert.ToString(Result["GSTNo"]);
                    CrInvLedgerObj.PinCode = Convert.ToString(Result["PinCode"]);
                    CrInvLedgerObj.COMGST = Convert.ToString(Result["COMGST"]);
                    CrInvLedgerObj.COMPAN = Convert.ToString(Result["COMPAN"]);
                    CrInvLedgerObj.CurDate = DateTime.Now.ToString("dd-MMM-yyyy");

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        CrInvLedgerObj.lstLedgerSummary.Add(new WFLDCrInvLedgerSummary
                        {
                            InvCr = Convert.ToInt32(Result["InvCr"]),
                            InvCrId = Convert.ToInt32(Result["InvCrId"]),
                            InvCrNo = Convert.ToString(Result["InvCrNo"]),
                            InvCrDate = Convert.ToString(Result["InvCrDate"]),
                            Debit = Convert.ToDecimal(Result["Debit"]),
                            Credit = Convert.ToDecimal(Result["Credit"]),
                            CreatedOn = Convert.ToString(Result["CreatedOn"]),
                            ContainerNo = Convert.ToString(Result["ContainerNo"]),
                            Size = Convert.ToString(Result["Size"]),
                        });
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        CrInvLedgerObj.lstLedgerDetails.Add(new WFLDCrInvLedgerDetails
                        {
                            InvCr = Convert.ToInt32(Result["InvCr"]),
                            InvCrId = Convert.ToInt32(Result["InvCrId"]),
                            Description = Convert.ToString(Result["Description"]),
                            Amount = Convert.ToDecimal(Result["Amount"]),
                        });
                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        CrInvLedgerObj.lstLedgerDetailsFull.Add(new WFLDCrInvLedgerFullDetails
                        {
                            Sr = Convert.ToInt32(Result["Sr"]),
                            //Sr, ReceiptDt, ReceiptNo, ChargeCode, ContNo, Size, Debit, Credit, Balance, GroupSr, InvCr, InvCrId
                            ReceiptDt = Convert.ToString(Result["ReceiptDt"]),
                            ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                            ChargeCode = Convert.ToString(Result["ChargeCode"]),
                            ContNo = Convert.ToString(Result["ContNo"]),
                            Size = Convert.ToString(Result["Size"]),
                            Debit = Convert.ToDecimal(Result["Debit"]),
                            Credit = Convert.ToDecimal(Result["Credit"]),
                            Balance = Convert.ToDecimal(Result["Balance"]),
                            GroupSr = Convert.ToString(Result["GroupSr"]),


                        });
                    }
                }

                if (Status == 1)
                {
                    CrInvLedgerObj.CompanyName = comname;
                    CrInvLedgerObj.CompanyAddress = address;

                    CrInvLedgerObj.lstLedgerSummary.ForEach(item =>
                    {
                        var dtls = CrInvLedgerObj.lstLedgerDetails.Where(o => o.InvCr == item.InvCr && o.InvCrId == item.InvCrId).ToList();
                        dtls.ForEach(d =>
                        {
                            item.LedgerDetails.Add(d);
                        });
                    });

                    CrInvLedgerObj.TotalDebit = CrInvLedgerObj.lstLedgerDetailsFull.Sum(x => x.Debit);
                    CrInvLedgerObj.TotalCredit = CrInvLedgerObj.lstLedgerDetailsFull.Sum(x => x.Credit);
                    CrInvLedgerObj.ClosingBalance = CrInvLedgerObj.OpenningBalance + CrInvLedgerObj.TotalCredit - CrInvLedgerObj.TotalDebit;
                    /* CrInvLedgerObj.ClosingBalance = CrInvLedgerObj.lstLedgerBalance.Sum(x => x.Total);*/


                    /*  CrInvLedgerObj.ClosingBalance = (CrInvLedgerObj.OpenningBalance + (CrInvLedgerObj.lstLedgerSummary.Sum(o => o.Debit)))
                                                      - (CrInvLedgerObj.lstLedgerSummary.Sum(o => o.Credit));*/


                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = CrInvLedgerObj;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region WorkSlip
        public void WorkSlipDetailsForPrint(string PeriodFrom, string PeriodTo, int CasualLabour, int Uid = 0)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>(); 
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(PeriodFrom) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(PeriodTo) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Labour", MySqlDbType = MySqlDbType.Int32, Value = CasualLabour });
            LstParam.Add(new MySqlParameter { ParameterName = "in_uid", MySqlDbType = MySqlDbType.Int32, Value = Uid });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetWorkslipReport", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }
        #endregion
        #region Account Report Export Cargo In General Carting
        public void GetCargoExport(WFLD_CarGenCar objPC)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPC.AsOnDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ExpCarGenCarReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<WFLD_ExpCarGen> lstPV = new List<WFLD_ExpCarGen>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLD_ExpCarGen
                    {
                        EntryNo = Result["EntryNo"].ToString(),
                        InDate = Result["InDate"].ToString(),
                        SbNo = (Result["SbNo"]).ToString(),
                        SbDate = Result["SbDate"].ToString(),
                        Shed = Result["Shed"].ToString(),
                        Area = Convert.ToDecimal(Result["Area"]),
                        NoOfDays = Convert.ToInt32(Result["NoOfDays"]),
                        NoOfWeek = Convert.ToInt32(Result["NoOfWeek"]),
                        GeneralAmount = Convert.ToDecimal(Result["GeneralAmount"]),
                        CompanyAddress = Result["CompanyAddress"].ToString(),
                        Email = Result["Email"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region PV Report
      
        public void GetPVReportImport(string AsOnDate, string Module, int GodownId, string GodownName)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(AsOnDate).ToString("yyyy-MM-dd HH:mm:ss") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Size = 6, Value = Module });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            DParam = LstParam.ToArray();
            //  DataTable dt = ds.Tables[0];
            //  DataSet Result = DataAccess.ExecuteDataReader("PVReport", CommandType.StoredProcedure, DParam);
            DataSet ds = DataAccess.ExecuteDataSet("PVReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            _DBResponse = new DatabaseResponse();
            int Status = 0;

            List<VIZ_ImpPVReportViewModel> lstPV = new List<VIZ_ImpPVReportViewModel>();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    lstPV = (from DataRow dr in dt.Rows
                             select new VIZ_ImpPVReportViewModel()



                             {
                                 SlNo = Convert.ToInt32(dr["SlNo"]),
                                 BOLNo = dr["BOLNo"].ToString(),
                                 DestuffingEntryDate = dr["DestuffingEntryDate"].ToString(),
                                 CFSCode = dr["CFSCode"].ToString(),
                                 CommodityAlias = dr["CommodityAlias"].ToString(),
                                 NoOfUnits = Convert.ToInt32(dr["NoOfUnits"]),
                                 NoOfUnitsRec = Convert.ToInt32(dr["NoOfUnitsRec"]),
                                 Weight = Convert.ToDecimal(dr["Weight"]),
                                 Area = Convert.ToDecimal(dr["Area"].ToString()),
                                 LocationName = dr["LocationName"].ToString(),
                                 //Remarks = dr["Remarks"].ToString(),


                                 BOLDate = Convert.ToString(dr["BOLDate"]),
                                 CBM = Convert.ToDecimal(dr["CBM"]),
                                 CIF = Convert.ToDecimal(dr["CIFValue"]),
                                 ContainerNo = Convert.ToString(dr["ContainerNo"]),
                                 ImporterName = Convert.ToString(dr["ImporterName"]),
                                 ItemNo = Convert.ToString(dr["LineNo"]),
                                 PortName = Convert.ToString(dr["POL"]),
                                 SLA = Convert.ToString(dr["SLA"]),
                                 TSADate = Convert.ToString(dr["TSADate"]),
                                 TSANo = Convert.ToString(dr["TSANo"])
                             }).ToList();
                }

                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = PVReportImportExcel(lstPV, AsOnDate, GodownName);

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {

                ds.Dispose();

            }
        }
        private string PVReportImportExcel(List<VIZ_ImpPVReportViewModel> lstPV, string AsOnDate, string GodownName)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = "CENTRAL WAREHOUSING CORPORATION";
                var h1 = "(A Govt.of India Undertaking)";
                var h2 = "CFS Visakhapatnam";
                var h3 = "As On Date -" + AsOnDate + "";
                var h4 = "Shed Cd -" + GodownName + "";
                var h5 = "Physical Verification Report for Import Cargo";



                exl.MargeCell("A1:K1", title, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A2:K2", h1, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A3:K3", h2, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A4:K4", h3, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A5:K5", h4, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A6:K6", h5, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A7:A7", "SL. No.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("B7:B7", "CFS CD", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("C7:C7", "CONTAINER NO", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D7:D7", "DESTUFF DATE", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("E7:E7", "OBL", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("F7:F7", "OBL DATE", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("G7:G7", "IMPORTER", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("H7:H7", "TSA NO.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("I7:I7", "TSA DATE", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("J7:J7", "ITEM NO.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("K7:K7", "NO OF PKG", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("L7:L7", "RECEIVED PKG", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("M7:M7", "WT", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("N7:N7", "SLOT", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("O7:O7", "AREA", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("P7:P7", "CBM", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("Q7:Q7", "CIF VALUE", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("R7:R7", "DESC", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("S7:S7", "SLA", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("T7:T7", "CFS/PORT NAME", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);


                exl.AddTable<VIZ_ImpPVReportViewModel>("A", 8, lstPV, new[] { 6, 20, 20, 20, 20, 20, 10, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });
                var NoOfUnits = lstPV.Sum(o => o.NoOfUnits);
                var NoOfUnitsRec = lstPV.Sum(o => o.NoOfUnitsRec);
                var Weight = lstPV.Sum(o => o.Weight);
                var Area = lstPV.Sum(o => o.Area);

                var CBM = lstPV.Sum(o => o.CBM);

                var CIF = lstPV.Sum(o => o.CIF);

                exl.MargeCell("A" + (lstPV.Count + 8).ToString() + ":J" + (lstPV.Count + 8).ToString() + "", "TOTAL", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("K" + (lstPV.Count + 8).ToString(), NoOfUnits.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("L" + (lstPV.Count + 8).ToString(), NoOfUnitsRec.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("M" + (lstPV.Count + 8).ToString(), Weight.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("O" + (lstPV.Count + 8).ToString(), Area.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("P" + (lstPV.Count + 8).ToString(), CBM.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("Q" + (lstPV.Count + 8).ToString(), CIF.ToString(), DynamicExcel.CellAlignment.CenterRight, DynamicExcel.CellFontStyle.Bold);



                exl.Save();
            }
            return excelFile;
        }
        public void GetPVReportExport(string AsOnDate, string Module, int GodownId, string GodownName)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(AsOnDate).ToString("yyyy-MM-dd HH:mm:ss") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Size = 6, Value = Module });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            DParam = LstParam.ToArray();
            DataSet dss = DataAccess.ExecuteDataSet("PVReport", CommandType.StoredProcedure, DParam);
            DataTable dt = dss.Tables[0];
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            //DParam = LstParam.ToArray();
            //IDataReader Result = DataAccess.ExecuteDataReader("PVReport", CommandType.StoredProcedure, DParam);
            //_DBResponse = new DatabaseResponse();
            //int Status = 0;
            //IList<WFLD_ExpPVReport> lstPV = new List<WFLD_ExpPVReport>();
            //try
            //{
            //    while (Result.Read())
            //    {
            //        Status = 1;
            //        lstPV.Add(new WFLD_ExpPVReport
            //        {



            List<VIZ_ExpPVReport> lstPV = new List<VIZ_ExpPVReport>();
            try
            {
                if (dss.Tables.Count > 0)
                {
                    lstPV = (from DataRow dr in dt.Rows
                             select new VIZ_ExpPVReport()
                             {
                                 SlNo = Convert.ToInt32(dr["SlNo"]),
                                 ShippingBillNo = dr["ShippingBillNo"].ToString(),
                                 ShippingBillDate = dr["ShippingBillDate"].ToString(),
                                 EntryNo = dr["EntryNo"].ToString(),
                                 RegisterDate = dr["RegisterDate"].ToString(),
                                 Units = Convert.ToInt32(dr["Units"]),
                                 Weight = Convert.ToDecimal(dr["Weight"]),
                                 Fob = Convert.ToDecimal(dr["Fob"]),
                                 ReservedCBM = Convert.ToDecimal(dr["ReservedCBM"]),
                                 GeneralCBM = Convert.ToDecimal(dr["GeneralCBM"]),
                                 ShippingCode = dr["EximTraderAlias"].ToString(),
                                 //   ShippingLineId = Convert.ToInt32(dr["ShippingLineId"]),
                                 ShippingName = dr["EximTraderName"].ToString(),
                                 LocationName = dr["LocationName"].ToString(),
                                 PkgType = dr["PkgType"].ToString(),
                                 ExporterName = Convert.ToString(dr["ExporterName"]),
                                 CHAName = Convert.ToString(dr["CHAName"])

                             }).ToList();
                }
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = PVReportExportExcel(lstPV, AsOnDate, GodownName);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {

                dss.Dispose();

            }
        }
        private string PVReportExportExcel(List<VIZ_ExpPVReport> lstPV, string AsOnDate, string GodownName)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                       + Environment.NewLine + "(A Govt.of India Undertaking)"
                       + Environment.NewLine + "CFS Visakhapatnam"
                         + Environment.NewLine + Environment.NewLine
                       + "Stock Register of Shed No -" + GodownName + ""
                       + Environment.NewLine + Environment.NewLine
                       + "As On Date -" + AsOnDate + ""
                       + Environment.NewLine + Environment.NewLine
                       + "Physical Verification Report for Export Cargo";


                exl.MargeCell("A1:K1", title, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "SlNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "ShippingBillNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "ShippingBillDate", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "EntryNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Carting Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "Units", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "Weight", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H2:H4", "Fob", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I2:I4", "General CBM", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J2:J4", "Reserve CBM", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K2:K4", "Shippingline Code", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L2:L4", "Shippingline Name", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M2:M4", "SlotNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N2:N4", "PkgType", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("O2:O4", "ExporterName", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("P2:P4", "CHAName", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("L3:L4", "IGST", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("P2:P4", "Total Amount", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("P2:P4", "SGST", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(11+13 or 11+15+17))", DynamicExcel.CellAlignment.Middle);

                // exl.MargeCell("S2:S4", "PaymentMode", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                //for (var i = 65; i < 85; i++)
                //{
                //    char character = (char)i;
                //    string text = character.ToString();
                //    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                //}

                exl.AddTable<VIZ_ExpPVReport>("A", 5, lstPV, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 20, 12, 12, 8, 14, 14, 12, 15 });
                var Units = lstPV.Sum(o => o.Units);
                var Weight = lstPV.Sum(o => o.Weight);
                var Fob = lstPV.Sum(o => o.Fob);
                var GeneralCBM = lstPV.Sum(o => o.GeneralCBM);
                var ReservedCBM = lstPV.Sum(o => o.ReservedCBM);
                exl.AddCell("F" + (lstPV.Count + 5).ToString(), Units.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("G" + (lstPV.Count + 5).ToString(), Weight.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("H" + (lstPV.Count + 5).ToString(), Fob.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("I" + (lstPV.Count + 5).ToString(), GeneralCBM.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("J" + (lstPV.Count + 5).ToString(), ReservedCBM.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //var igstamt = model.Sum(o => o.ITaxAmount);
                //var sgstamt = model.Sum(o => o.STaxAmount);
                //var cgstamt = model.Sum(o => o.CTaxAmount);
                //var totalamt = model.Sum(o => o.Total);
                //exl.AddCell("M" + (model.Count + 6).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("O" + (model.Count + 6).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("Q" + (model.Count + 6).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("R" + (model.Count + 6).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                /*exl.AddCell("O" + (model.Count + 7).ToString(), "Invoice Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 7).ToString(), InvoiceAmount, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 8).ToString(), "Cash Receipt Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 8).ToString(), CRAmount, DynamicExcel.CellAlignment.CenterRight);*/

                exl.Save();
            }
            return excelFile;
        }
        public void GetPVReportBond(string AsOnDate, string Module, int GodownId, string GodownName)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(AsOnDate).ToString("yyyy-MM-dd HH:mm:ss") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Size = 6, Value = Module });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("PVReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            List<VIZ_BondPVReport> lstPV = new List<VIZ_BondPVReport>();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    lstPV = (from DataRow dr in dt.Rows
                             select new VIZ_BondPVReport()
                             {
                                 SlNo = Convert.ToInt32(dr["SlNo"]),
                                 //CompAddress = dr["CompanyAddress"].ToString(),
                                 //CompEmail = dr["CompanyEmail"].ToString(),
                                 BondNo = dr["BondNo"].ToString(),
                                 BondDate = dr["BondDate"].ToString(),
                                 Importer = dr["Importer"].ToString(),
                                 ItemDesc = dr["ItemDesc"].ToString(),
                                 Units = Convert.ToInt32(dr["Unit"]),
                                 Weight = Convert.ToDecimal(dr["Weight"]),
                                 Value = Convert.ToDecimal(dr["Value"]),
                                 Duty = Convert.ToDecimal(dr["Duty"]),
                                 Total = Convert.ToDecimal(dr["Total"]),
                                 Area = Convert.ToDecimal(dr["Area"]),
                                 CHA = dr["CHA"].ToString()
                             }).ToList();
                }
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = PVReportBondExcel(lstPV, AsOnDate, GodownName);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {

                ds.Dispose();

            }
        }

        private string PVReportBondExcel(List<VIZ_BondPVReport> lstPV, string AsOnDate, string GodownName)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "(A Govt.of India Undertaking)"
                        + Environment.NewLine + "CWC 18-7-1101,Guest House block, <br/> Kedareswarapet,Dist.-Krishna"
                        + Environment.NewLine + Environment.NewLine
                        + ",Vijayawada-520003, A.P."
                        + Environment.NewLine + Environment.NewLine
                        + "Email: -cwcwfdcfs@gmail.com"
                        + Environment.NewLine + Environment.NewLine
                       + "PV STATEMENT OF LIVE BONDS IN GODOWN NO: -" + GodownName + "AS ON" + AsOnDate + ""
                       + Environment.NewLine + Environment.NewLine
                       + "GODOWN NO: " + GodownName + "";

                exl.MargeCell("A1:L1", title, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "SlNo", DynamicExcel.CellAlignment.Middle);
                ////exl.MargeCell("B2:B4", "CompAddress", DynamicExcel.CellAlignment.Middle);
                ////exl.MargeCell("C2:C4", "CompEmail", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "BondNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "BondDate", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "Name Of Importer", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Description Of Good", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "NO OF PKGS", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "WT.IN. KGS", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H2:H4", "ACCESIBLE VALUE", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I2:I4", "DUTY", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J2:J4", "TOTAL", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K2:K4", "AREA IN SQ. MT", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L2:L4", "CHA", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M2:M4", "REMARKS", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("L3:L4", "IGST", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("P2:P4", "Total Amount", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("P2:P4", "SGST", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(11+13 or 11+15+17))", DynamicExcel.CellAlignment.Middle);

                // exl.MargeCell("S2:S4", "PaymentMode", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                //for (var i = 65; i < 85; i++)
                //{
                //    char character = (char)i;
                //    string text = character.ToString();
                //    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                //}

                exl.AddTable<VIZ_BondPVReport>("A", 5, lstPV, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 20, 12, 12, 8, 14, 8, });

                var Units = lstPV.Sum(o => o.Units);
                var Weight = lstPV.Sum(o => o.Weight);
                var Value = lstPV.Sum(o => o.Value);
                var Duty = lstPV.Sum(o => o.Duty);
                var Area = lstPV.Sum(o => o.Area);
                var Total = lstPV.Sum(o => o.Value) + lstPV.Sum(o => o.Duty);
                exl.AddCell("F" + (lstPV.Count + 5).ToString(), Units.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("G" + (lstPV.Count + 5).ToString(), Weight.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("H" + (lstPV.Count + 5).ToString(), Value.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("I" + (lstPV.Count + 5).ToString(), Duty.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("J" + (lstPV.Count + 5).ToString(), Total.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("K" + (lstPV.Count + 5).ToString(), Area.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //var igstamt = model.Sum(o => o.ITaxAmount);
                //var sgstamt = model.Sum(o => o.STaxAmount);
                //var cgstamt = model.Sum(o => o.CTaxAmount);
                //var totalamt = model.Sum(o => o.Total);
                //exl.AddCell("M" + (model.Count + 6).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("O" + (model.Count + 6).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("Q" + (model.Count + 6).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //exl.AddCell("R" + (model.Count + 6).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                /*exl.AddCell("O" + (model.Count + 7).ToString(), "Invoice Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 7).ToString(), InvoiceAmount, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 8).ToString(), "Cash Receipt Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 8).ToString(), CRAmount, DynamicExcel.CellAlignment.CenterRight);*/

                exl.Save();
            }
            return excelFile;
        }

        #endregion

        #region Daily Transaction Report
        public void DTRForPrint(string DTRDate, int GodownId = 0)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Date", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(DTRDate) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("DailyTransactionReport", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                }
                else if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                else
                {
                    Status = 0;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }
        public void DTRForExport(string DTRDate, int GodownId = 0)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(DTRDate) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(DTRDate) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            _DBResponse = new DatabaseResponse();
            try
            {
                DParam = LstParam.ToArray();
                //Result = DataAccess.ExecuteDataSet("DailyTransactionExp", CommandType.StoredProcedure, DParam);
                WFLDDTRExp obj = new WFLDDTRExp();
                obj = (WFLDDTRExp)DataAccess.ExecuteDynamicSet<WFLDDTRExp>("DailyTransactionExp", DParam);
                if (obj.lstBTTDetails.Count > 0 || obj.lstCargoAccepting.Count > 0 || obj.lstCargoShifting.Count > 0 || obj.lstCartingDetails.Count > 0 ||
                    obj.lstStuffingDetails.Count > 0 || obj.StockOpening.Count > 0 || obj.StockClosing.Count > 0 || obj.lstShortCartingDetails.Count > 0)
                    _DBResponse.Status = 1;
                else
                    _DBResponse.Status = 0;
                _DBResponse.Message = "Data";
                _DBResponse.Data = obj;
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region SealCuttingReport
        public void SealCuttingReport(SealCuttingReport SealCuttingReport)
        {

            DateTime dtfrom = DateTime.ParseExact(SealCuttingReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(SealCuttingReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            DataSet Result = new DataSet();
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            Result = DataAccess.ExecuteDataSet("GetSealCuttingReport", CommandType.StoredProcedure, DParam);
            IList<SealCuttingReport> LstSealClosingReport = new List<SealCuttingReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                if (Result != null && Result.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                }
                else
                {
                    Status = 0;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }
        #endregion


        #region Collection Report
        public void CollectionReport(WFLD_CollectionReport ObjCollectionReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjCollectionReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjCollectionReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CollectionReport", CommandType.StoredProcedure, DParam);
            WFLD_FinalCollectionReportTotal LstCollectionReport = new WFLD_FinalCollectionReportTotal();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstCollectionReport.listCollectionReport.Add(new WFLD_CollectionReport
                    {
                        Date = Result["DateFormatted"].ToString(),
                        Cash = Result["Cash"].ToString(),
                        Bank = Result["Cheque"].ToString(),//bank has data for cheque see view
                        PO = Result["PO"].ToString(),
                        DD = Result["DRAFT"].ToString(),
                        Pd = Result["NEFT"].ToString(),//neft has data for pd see view
                        Chln = Result["CHALLAN"].ToString(),
                        Total = Result["Total"].ToString()

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        LstCollectionReport.objCollectionReportTotal.TotalPDA = Convert.ToString(Result["TotalNEFT"]);
                        LstCollectionReport.objCollectionReportTotal.TotalCash = Convert.ToString(Result["TotalCash"]);
                        LstCollectionReport.objCollectionReportTotal.TotalBank = Convert.ToString(Result["TotalCheque"]);

                        LstCollectionReport.objCollectionReportTotal.TotalPO = Convert.ToString(Result["TotalPO"]);
                        LstCollectionReport.objCollectionReportTotal.TotalCHALLAN = Convert.ToString(Result["TotalCHALLAN"]);
                        LstCollectionReport.objCollectionReportTotal.TotalDraft = Convert.ToString(Result["TotalDRAFT"]);



                    }
                }
                if (Status == 1)
                {
                    if (LstCollectionReport.listCollectionReport.Count > 0)
                    {
                        LstCollectionReport.listCollectionReport.Add(new WFLD_CollectionReport
                        {
                            Date = "Total",
                            Cash = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.Cash)).ToString(),
                            Bank = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.Bank)).ToString(),
                            PO = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.PO)).ToString(),
                            DD = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.DD)).ToString(),
                            Pd = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.Pd)).ToString(),
                            Chln = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.Chln)).ToString(),
                            Total = LstCollectionReport.listCollectionReport.Sum(o => Convert.ToDecimal(o.Total)).ToString()

                        });
                    }
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstCollectionReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Accounts Report for Import Cargo
        public void GetImpCargo(WFLD_PV objPV)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPV.AsOnDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Size = 6, Value = "" });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = objPV.GodownId });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetImpCargoReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<WFLD_ImpPVReport> lstPV = new List<WFLD_ImpPVReport>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLD_ImpPVReport
                    {
                        BOLNo = Result["BOLNo"].ToString(),
                        DestuffingEntryDate = Result["DestuffingEntryDate"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        CommodityAlias = Result["CommodityAlias"].ToString(),
                        NoOfUnits = Convert.ToInt32(Result["NoOfUnits"]),
                        NoOfUnitsRec = Convert.ToInt32(Result["NoOfUnitsRec"]),
                        Weight = Convert.ToDecimal(Result["Weight"]),
                        Area = Convert.ToDecimal(Result["Area"].ToString()),
                        LocationName = Result["LocationName"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        Amount = Convert.ToDecimal(Result["Amount"]),
                        TotWk = Convert.ToInt32(Result["TotWk"]),
                        CompanyAddress = Result["CompanyAddress"].ToString(),
                        Email = Result["Email"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Cheque Summary Report
        public void ChequeSummary(WFLD_ChequeSummary ObjChequeSummary)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjChequeSummary.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjChequeSummary.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            LstParam.Add(new MySqlParameter { ParameterName = "in_Type", MySqlDbType = MySqlDbType.VarChar, Value = ObjChequeSummary.Type });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ChequeSummaryReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_ChequeSummary> LstChequeSummary = new List<WFLD_ChequeSummary>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstChequeSummary.Add(new WFLD_ChequeSummary
                    {



                        Bank = Result["DraweeBank"].ToString(),

                        Amount = Result["Amount"].ToString(),

                        ChequeNumber = Result["chequeNumber"].ToString(),
                        Date = Result["Date"].ToString(),
                        Party = Result["Party"].ToString(),
                        InvoiceNumber = Result["InvoiceNo"].ToString(),
                        ReceiptNo = Result["ReceiptNo"].ToString(),
                        ChequeDate = Result["ChqDate"].ToString()
                        //value = Result["value"].ToString()

                    });
                }
                if (Status == 1)
                {
                    LstChequeSummary.Add(new WFLD_ChequeSummary
                    {



                        Bank = string.Empty,

                        Amount = Math.Ceiling(LstChequeSummary.ToList().Sum(m => Convert.ToDecimal(m.Amount))).ToString(),

                        ChequeNumber = "<strong>Total</strong>",
                        Date = string.Empty,
                        Party = string.Empty,
                        InvoiceNumber = string.Empty,
                        ReceiptNo = string.Empty
                        //value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstChequeSummary;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void ChequeCashDDPOSummary(WFLD_CashChequeDDSummary ObjChequeSummary)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjChequeSummary.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjChequeSummary.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            LstParam.Add(new MySqlParameter { ParameterName = "in_Type", MySqlDbType = MySqlDbType.VarChar, Value = ObjChequeSummary.Type });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CashCqeDdPoSdStmtRpt", CommandType.StoredProcedure, DParam);
            IList<WFLD_CashChequeDDSummary> LstChequeSummary = new List<WFLD_CashChequeDDSummary>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstChequeSummary.Add(new WFLD_CashChequeDDSummary
                    {



                        Bank = Result["DraweeBank"].ToString(),
                        Type = Result["PayMode"].ToString(),
                        CashAmount = Convert.ToDecimal(Result["CASHAmount"]),
                        ChequeAmount = Convert.ToDecimal(Result["CHEQUEAmount"]),
                        POSAmount = Convert.ToDecimal(Result["POAmount"]),
                        Amount = Result["OtherAmount"].ToString(),
                        SDAmount = Convert.ToDecimal(Result["SDAmount"]),


                        GCashAmount = Convert.ToDecimal(Result["CASHAmount"]),
                        GChequeAmount = Convert.ToDecimal(Result["CHEQUEAmount"]),
                        GPOSAmount = Convert.ToDecimal(Result["POAmount"]),
                        GOthersAmount = Convert.ToDecimal(Result["OtherAmount"]),

                        ChequeNumber = Result["chequeNumber"].ToString(),
                        Date = Result["Date"].ToString(),
                        Party = Result["Party"].ToString(),
                        InvoiceNumber = Result["InvoiceNo"].ToString(),
                        ReceiptNo = Result["ReceiptNo"].ToString()
                        //value = Result["value"].ToString()

                    });
                }
                if (Status == 1)
                {
                    LstChequeSummary.Add(new WFLD_CashChequeDDSummary
                    {



                        Bank = string.Empty,

                        GOthersAmount = LstChequeSummary.ToList().Sum(m => Convert.ToDecimal(m.GOthersAmount)),
                        GCashAmount = LstChequeSummary.ToList().Sum(m => m.GCashAmount),
                        GChequeAmount = LstChequeSummary.ToList().Sum(m => m.ChequeAmount),
                        GPOSAmount = LstChequeSummary.ToList().Sum(m => m.GPOSAmount),
                        SDAmount = LstChequeSummary.ToList().Sum(m => m.SDAmount),

                        Amount = string.Empty,


                        ChequeNumber = "<strong>Total</strong>",
                        Date = string.Empty,
                        Party = string.Empty,
                        InvoiceNumber = string.Empty,
                        ReceiptNo = string.Empty
                        //value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstChequeSummary;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }



        #endregion

        #region PV Report Of Empty Container
        public void GetEmptyCont(VIZ_PVReport objPV)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Date", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPV.AsOnDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("PVReportEmptyCont", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<VIZ_PVReportImpEmptyCont> lstPV = new List<VIZ_PVReportImpEmptyCont>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new VIZ_PVReportImpEmptyCont
                    {
                        CFSCode = Result["EntryNo"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        EntryDateTime = Result["InDate"].ToString(),
                        Size = Result["Size"].ToString(),
                        EximTraderAlias = Result["SlaCd"].ToString(),
                        Days = Convert.ToInt32(Result["Days"]),
                        Amount = Convert.ToDecimal(Result["GRE"]),
                        InDateEcy = Result["InDateEcy"].ToString(),
                        OutDateEcy = Result["OutDate"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region LongStandingEmptyCont Container
        public void LongStandingEmptyCont(WFLD_PVReport objPV)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Date", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPV.AsOnDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("LongStandingEmptyContiner", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<WFLD_LongStandingEmptyCont> lstPV = new List<WFLD_LongStandingEmptyCont>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLD_LongStandingEmptyCont
                    {
                        CFSCode = Result["EntryNo"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        Address = Result["Address"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        EntryDateTime = Result["InDate"].ToString(),
                        Size = Result["Size"].ToString(),
                        EximTraderAlias = Result["SlaCd"].ToString(),
                        Days = Convert.ToInt32(Result["Days"]),
                        Amount = Convert.ToDecimal(Result["GRE"]),
                        InDateEcy = Result["InDateEcy"].ToString(),
                        OutDateEcy = Result["OutDate"].ToString(),
                        Notices1 = Result["NoticeDate1"].ToString(),
                        Notices2 = Result["NoticeDate2"].ToString(),
                        AuctionNo = Result["AuctionNoticeNo"].ToString(),
                        NocNO = Result["RefNo"].ToString(),
                        NocDate = Result["RefDate"].ToString(),
                        Remarks = Result["Remarks1"].ToString(),


                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region PV Report Of Import Loaded Container
        public void GetImpLoadedCont(WFLD_PVReport objPV)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPV.AsOnDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("PVReportImpLoadedCont", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<VIZ_PVReportImpLoadedCont> lstPV = new List<VIZ_PVReportImpLoadedCont>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new VIZ_PVReportImpLoadedCont
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        EntryDateTime = Result["EntryDateTime"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        EximTraderAlias = Result["EximTraderAlias"].ToString(),
                        Days = Convert.ToInt32(Result["Days"]),
                        Amount = Convert.ToDecimal(Result["Amount"]),
                        TransportFrom = Result["TransportFrom"].ToString(),
                        Size = Result["Size"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Bulk Credit Note print
        public void BulkCreditNoteprint(string InvoiceNumber, int PartyId, DateTime FromDate, DateTime ToDate)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_CRNo", MySqlDbType = MySqlDbType.VarChar, Value = InvoiceNumber });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd") });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("getBulkCRNoteDetailsForPrint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }
        #endregion

        #region Daily Invoice Report
        public void DailyInvoiceReport(WFLD_DailyInvReport ObjDailyReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyReport.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyReport.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.String, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.String, Value = PeriodTo });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjTDSReport.PartyId });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DailyInvoiceReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_DailyReport> lstPV = new List<WFLD_DailyReport>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLD_DailyReport
                    {
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        Party = Result["PartyName"].ToString(),
                        TotalAmt = Convert.ToDecimal(Result["TotalAmt"]),
                        ReceiptNo = Result["ReceiptNo"].ToString(),
                        ReceiptAmt = Convert.ToDecimal(Result["Amount"]),
                        CompanyAddress = Result["CompanyAddress"].ToString(),
                        Email = Result["Email"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region SDSummary
        public void SDSummary(string FromDate, string ToDate)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("SDSummary", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<WFLDSDSummary> lstPV = new List<WFLDSDSummary>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLDSDSummary
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        Date = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        Module = Result["InvoiceType"].ToString(),
                        EximTraderName = Result["PartyName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),

                        BILL = Convert.ToDecimal(Result["MiscExcess"]),
                        GEN = Convert.ToDecimal(Result["GenSpace"]),
                        STO = Convert.ToDecimal(Result["sto"]),
                        INS = Convert.ToDecimal(Result["Insurance"]),
                        GRE = Convert.ToDecimal(Result["GroundRentEmpty"]),
                        GRL = Convert.ToDecimal(Result["GroundRentLoaded"]),
                        MFCHRG = Convert.ToDecimal(Result["Mf"]),
                        //MFTAX = Convert.ToDecimal(Result["MFTAX"]),
                        PDA = Convert.ToDecimal(Result["TotalPDA"]),
                        ENT = Convert.ToDecimal(Result["EntCharge"]),
                        FUM = Convert.ToDecimal(Result["Fum"]),
                        OT = Convert.ToDecimal(Result["OtCharge"]),
                        CGST = Convert.ToDecimal(Result["CGSTAmt"]),
                        SGST = Convert.ToDecimal(Result["SGSTAmt"]),
                        IGST = Convert.ToDecimal(Result["IGSTAmt"]),
                        MISC = Convert.ToDecimal(Result["MISC"]),
                        Total = Convert.ToDecimal(Result["TotalPDA"]),
                        TDS = Convert.ToString(Result["tdsCol"]),
                        CRTDS = Convert.ToDecimal(Result["crTDS"]),
                        PaymentType = Result["ModeOfPay"].ToString(),
                        Remarks = Result["Remarks"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion

        #region Satement Of Empty Container
        public void StatementOfEmptyContainer(WFLDStatementOfEmptyContainer ObjStatementOfEmptyContainer)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjStatementOfEmptyContainer.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjStatementOfEmptyContainer.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("StatementOfEmptyContainer", CommandType.StoredProcedure, DParam);
            IList<WFLDStatementOfEmptyContainer> LstStatementOfEmptyContainer = new List<WFLDStatementOfEmptyContainer>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstStatementOfEmptyContainer.Add(new WFLDStatementOfEmptyContainer
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        DateOfArrival = Result["DateOFarrival"].ToString(),
                        ImportExport = Result["OperationType"].ToString(),
                        dateofdetuffing = Result["DateOFDestuffing"] == DBNull.Value ? "" : Result["DateOFDestuffing"].ToString()

                        // Withdraw = Result["Withdraw"].ToString()//OperationType

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstStatementOfEmptyContainer;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region GodownList according to Godown Rights
        public void GetGodownRightsWise(int Uid)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Uid", MySqlDbType = MySqlDbType.Int32, Value = Uid });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetGodownListAccdRights", CommandType.StoredProcedure, DParam);
            IList<CwcExim.Areas.Export.Models.GodownList> lst = new List<CwcExim.Areas.Export.Models.GodownList>();
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lst.Add(new CwcExim.Areas.Export.Models.GodownList
                    {
                        GodownName = Result["GodownName"].ToString(),
                        GodownId = Convert.ToInt32(Result["GodownId"])
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lst;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion
        #region IWB report
        public void GetContainerForExportRR()
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerForExportRR", CommandType.StoredProcedure);
            _DBResponse = new DatabaseResponse();
            List<WFLDExportRRReport> LstStuffing = new List<WFLDExportRRReport>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    if (LstStuffing.Count <= 0)
                    {
                        LstStuffing.Add(new WFLDExportRRReport
                        {
                            ContainerNo = Result["ContainerNo"].ToString(),
                            CFSCode = Result["CFSCode"].ToString()
                        });
                    }

                    else
                    {
                        int flag = 0;

                        for (int i1 = 0; i1 < LstStuffing.Count; i1++)
                        {
                            if (LstStuffing[i1].ContainerNo == Result["ContainerNo"].ToString())
                            {
                                flag = 1;
                                break;
                            }
                        }

                        if (flag == 0)
                        {
                            LstStuffing.Add(new WFLDExportRRReport
                            {
                                ContainerNo = Result["ContainerNo"].ToString(),
                                CFSCode = Result["CFSCode"].ToString()
                            });
                        }
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstStuffing;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }



        public void PrintInlandWayBill(int GatePassId)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();

            LstParam.Add(new MySqlParameter { ParameterName = "in_GatePassId", MySqlDbType = MySqlDbType.Int32, Value = GatePassId });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("PrintIWB", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            VIZInlandWayBill ObjIWB = new VIZInlandWayBill();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //GatepassId
                    ObjIWB.IWBNo = Result["IWBNo"].ToString();
                    ObjIWB.IWBDate = Result["IWBDate"].ToString();
                    ObjIWB.PortOfLoading = Result["POL"].ToString();
                    ObjIWB.Destination = Result["POD"].ToString();
                    ObjIWB.Country = Result["Country"].ToString();
                    ObjIWB.CargoDesc = Result["CargoDescription"].ToString();
                    ObjIWB.CHAName = Result["CHAName"].ToString();
                    ObjIWB.ExporterName = Result["ExpName"].ToString();
                    ObjIWB.ShippingLineName = Result["ShippingLineName"].ToString();
                    ObjIWB.Container = Result["ContainerNo"].ToString();
                    ObjIWB.ShippingSeal = Result["ShippingSeal"].ToString();
                    ObjIWB.CFSCode = Result["CFSCode"].ToString();
                    ObjIWB.ShippBillNo = Result["ShippBillNo"].ToString();
                    ObjIWB.ShippBillDate = Result["ShippBillDate"].ToString();
                    ObjIWB.Forwarder = Result["ForwarderName"].ToString();
                    ObjIWB.TrailerNo = Result["VehicleNo"].ToString();
                    ObjIWB.CIFValue = Convert.ToDecimal(Result["CIFValue"]);
                    ObjIWB.NoOfPkg = Convert.ToDecimal(Result["NoOfPkg"]);
                    ObjIWB.Weight = Convert.ToDecimal(Result["Weight"]);
                    ObjIWB.Liner = Result["Liner"].ToString();
                    ObjIWB.Transporter = Result["Transporter"].ToString();
                    ObjIWB.OTLNo = Result["OTLNo"].ToString();
                    ObjIWB.SealNo = Result["ShippingSeal"].ToString();
                    ObjIWB.PlaceOfStuffing = Result["PlaceOfStuffing"].ToString();
                }
                ObjIWB.PlaceOfStuffing = Result["PlaceOfStuffing"].ToString();

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjIWB;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }


        #endregion


        #region SD Details Statement
        public void GetAllPartyForSDDet(string PartyCode, int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyCode", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = PartyCode });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAllPartyForSDDet", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLDPartyForSDDet> LstParty = new List<WFLDPartyForSDDet>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstParty.Add(new WFLDPartyForSDDet
                    {
                        Party = Result["Party"].ToString(),
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyCode = Result["PartyCode"].ToString()

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstParty, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetSDDetStatement(int PartyId, string Fdt, String Tdt)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_SDPartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.Date, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Tdt", MySqlDbType = MySqlDbType.Date, Value = Tdt });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetSDDetailsStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDSDDetailsStatement SDResult = new WFLDSDDetailsStatement();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    SDResult.PartyName = Result["PartyName"].ToString();
                    SDResult.PartyCode = Result["PartyCode"].ToString();
                    SDResult.PartyGst = Result["PartyGst"].ToString();
                    SDResult.CompanyGst = Result["CompanyGst"].ToString();

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.lstInvc.Add(
                            new WFLDSDInvoiceDet
                            {
                                //Sl, InvoiceNo, InvoiceDate, ReceiptNo, ReceiptDate, ReceiptAmt, TranType, TranAmt
                                SL = Convert.ToInt32(Result["Sl"]),
                                InvoiceNo = Result["InvoiceNo"].ToString(),
                                InvoiceDate = Result["InvoiceDate"].ToString(),
                                ReceiptNo = Result["ReceiptNo"].ToString(),
                                ReceiptDate = Result["ReceiptDate"].ToString(),
                                ReceiptAmt = Convert.ToDecimal(Result["ReceiptAmt"]),
                                TranType = Result["TranType"].ToString(),
                                TranAmt = Convert.ToDecimal(Result["TranAmt"]),


                            });
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.UtilizationAmount = Convert.ToDecimal(Result["UtilizationAmount"]);
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = SDResult;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }


        #endregion

        #region-- VC REPORT --
        public void VCCapacityDetails(string dtArray)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "In_Xml", MySqlDbType = MySqlDbType.Text, Value = dtArray });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            //var Result1 = DataAccess.ExecuteDynamicSet<VCCapacityModel>("GetVCCapacityDetails", DParam);
            IDataReader Result = DataAccess.ExecuteDataReader("GetVCCapacityDetails", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            IList<WFLDVCCapacityModel> LstVCCapacity = new List<WFLDVCCapacityModel>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstVCCapacity.Add(new WFLDVCCapacityModel
                    {
                        //vccapid = (Result["vccapid"] == DBNull.Value ? 0 : Convert.ToInt32(Result["vccapid"])),
                        //vcoptdate = (Result["vcoptdate"] == DBNull.Value ? DateTime.Now : Convert.ToDateTime(Result["vcoptdate"])),
                        cfscap = (Result["cfscap"] == DBNull.Value ? 496034M : Convert.ToDecimal(Result["cfscap"])),
                        bndcap = (Result["bndcap"] == DBNull.Value ? 8766M : Convert.ToDecimal(Result["bndcap"])),
                        cfsutlz = (Result["cfsutlz"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["cfsutlz"])),
                        bndutlz = (Result["bndultz"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["bndultz"])),
                        //weekid = Result["weekid"].ToString()
                    });
                }
                if (LstVCCapacity.Count() < 3)
                {
                    for (var i = LstVCCapacity.Count; i < 3; i++)
                    {
                        LstVCCapacity.Add(new WFLDVCCapacityModel());
                    }
                }
                if (Result.NextResult())
                {
                    var row = 0;
                    while (Result.Read())
                    {
                        LstVCCapacity[row].Occupency = (Result["occupency"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["occupency"]));
                        LstVCCapacity[row].Income = (Result["income"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["income"]));
                        row += 1;
                    }
                }
                if (Result.NextResult())
                {
                    var row = 0;
                    while (Result.Read())
                    {
                        LstVCCapacity[row].Import = 0;//(Result["Import"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Import"]));
                        LstVCCapacity[row].Export = 0; //(Result["Export"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Export"]));
                        LstVCCapacity[row].Empty = 0;// (Result["Empty"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Empty"]));
                        row += 1;
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstVCCapacity;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void AddVCDetails(DateTime date, decimal cfscap, decimal bndcap, decimal cfsutl, decimal bndutl)
        {
            string GeneratedClientId = "0";
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "In_Date", MySqlDbType = MySqlDbType.DateTime, Value = date });
            LstParam.Add(new MySqlParameter { ParameterName = "In_CfsCap", MySqlDbType = MySqlDbType.Decimal, Value = cfscap });
            LstParam.Add(new MySqlParameter { ParameterName = "In_BndCap", MySqlDbType = MySqlDbType.Decimal, Value = bndcap });
            LstParam.Add(new MySqlParameter { ParameterName = "In_CfsUtl", MySqlDbType = MySqlDbType.Decimal, Value = cfsutl });
            LstParam.Add(new MySqlParameter { ParameterName = "In_BndUtl", MySqlDbType = MySqlDbType.Decimal, Value = bndutl });
            LstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Direction = ParameterDirection.Output, Value = 0 });
            LstParam.Add(new MySqlParameter { ParameterName = "GeneratedClientId", MySqlDbType = MySqlDbType.Int32, Direction = ParameterDirection.Output, Value = GeneratedClientId });
            _DBResponse = new DatabaseResponse();
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            int Result = DataAccess.ExecuteNonQuery("AddVCDetails", CommandType.StoredProcedure, DParam, out GeneratedClientId);
            try
            {
                if (Result == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Bank Details Saved Successfully";
                    _DBResponse.Data = GeneratedClientId;
                }
                else if (Result == 2)
                {
                    _DBResponse.Status = 2;
                    _DBResponse.Message = "Bank And Branch Combination Already Exist";
                    _DBResponse.Data = null;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "Error";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        public void VCCapacityReport(string dtArray)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "In_Xml", MySqlDbType = MySqlDbType.Text, Value = dtArray });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            //var Result1 = DataAccess.ExecuteDynamicSet<VCCapacityModel>("GetVCCapacityDetails", DParam);
            IDataReader Result = DataAccess.ExecuteDataReader("GetVCCapacityReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            IList<WFLDVCCapacityModel> LstVCCapacity = new List<WFLDVCCapacityModel>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstVCCapacity.Add(new WFLDVCCapacityModel
                    {
                        Occupency = (Result["occupency"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["occupency"])),
                        Income = (Result["income"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["income"]))
                    });
                }
                if (LstVCCapacity.Count() < 3)
                {
                    for (var i = LstVCCapacity.Count; i < 3; i++)
                    {
                        LstVCCapacity.Add(new WFLDVCCapacityModel());
                    }
                }
                /*if (Result.NextResult())
                {
                    var row = 0;
                    while (Result.Read())
                    {
                        LstVCCapacity[row].Occupency = (Result["occupency"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["occupency"]));
                        LstVCCapacity[row].Income = (Result["income"] == DBNull.Value ? 0 : Convert.ToDecimal(Result["income"]));
                        row += 1;
                    }
                }*/
                if (Result.NextResult())
                {
                    var row = 0;
                    while (Result.Read())
                    {
                        LstVCCapacity[row].Import = (Result["Import"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Import"]));
                        LstVCCapacity[row].Export = (Result["Export"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Export"]));
                        LstVCCapacity[row].Empty = (Result["Empty"] == DBNull.Value ? 0 : Convert.ToInt32(Result["Empty"]));
                        row += 1;
                    }
                }
                if (Result.NextResult())
                {
                    var row = 0;
                    while (Result.Read())
                    {
                        LstVCCapacity[row].CurYear = (Result["CurYear"] == DBNull.Value ? 0 : Convert.ToInt32(Result["CurYear"]));
                        LstVCCapacity[row].PreYear = (Result["PreYear"] == DBNull.Value ? 0 : Convert.ToInt32(Result["PreYear"]));
                        row += 1;
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstVCCapacity;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        #endregion
        #region-- LandingCertificate --
        public void GetLandingCertificateReport(String TrainNo, String TrainDate)
        {
            DataSet Result = new DataSet();
            int Status = 0;
            try
            {
                IDataParameter[] DParam = { };
                List<MySqlParameter> LstParam = new List<MySqlParameter>();
                DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
                LstParam.Add(new MySqlParameter { ParameterName = "In_TrainNo", MySqlDbType = MySqlDbType.String, Value = TrainNo });
                LstParam.Add(new MySqlParameter { ParameterName = "In_TrainDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(TrainDate) });
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetLandingCertificateReport", CommandType.StoredProcedure, DParam);

                _DBResponse = new DatabaseResponse();
                TrainDetl trndtl = new TrainDetl();
                int Sr = 0;
                if (Result != null && Result.Tables.Count > 0)
                {
                    trndtl.TrainNo = Result.Tables[0].Rows[0]["TrainNo"].ToString();
                    trndtl.TrainDate = Result.Tables[0].Rows[0]["TrainDate"].ToString();
                    trndtl.PortName = Result.Tables[0].Rows[0]["PortName"].ToString();
                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        Status = 1;
                        trndtl.objTrainSummaryUpload.Add(new LandingCerificate
                        {
                            SrNo = Sr + 1,
                            Container_No = Convert.ToString(dr["Container_No"]),
                            CT_Size = Convert.ToString(dr["CT_Size"]),
                            S_Line = Convert.ToString(dr["S_Line"]),
                            TP_No = Convert.ToString(dr["Smtp_No"]),
                            TP_Date = Convert.ToString(dr["Smtp_Date"]),
                            ArrivalDate = Convert.ToString(dr["ArrivalDate"]),
                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = trndtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }

        public void GetAllTrainNo()
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_TrainNo", MySqlDbType = MySqlDbType.VarChar, Value = "" });
            // lstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] dpram = lstParam.ToArray();
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader result = DA.ExecuteDataReader("GetAllTrainNoForLC", CommandType.StoredProcedure, dpram);
            IList<CwcExim.Areas.Export.Models.WFLD_TrainList> lstTrainNo = new List<CwcExim.Areas.Export.Models.WFLD_TrainList>();
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            try
            {
                while (result.Read())
                {

                    Status = 1;
                    lstTrainNo.Add(new CwcExim.Areas.Export.Models.WFLD_TrainList { TrainNo = result["TrainNo"].ToString(), TrainSummaryID = Convert.ToInt32(result["TrainSummaryID"]) });
                }
                if (Status == 1)
                {
                    _DBResponse.Data = lstTrainNo;
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Status = -1;
                _DBResponse.Message = "Error";
            }
            finally
            {
                result.Dispose();
                result.Close();
            }
        }

        public void GetTrainDateByTrainNo(String TrainNo)
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_TrainNo", MySqlDbType = MySqlDbType.VarChar, Value = TrainNo });
            // lstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] dpram = lstParam.ToArray();
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader result = DA.ExecuteDataReader("GetTrainDateByTrainNo", CommandType.StoredProcedure, dpram);
            IList<WFLD_TrainDateList> lstTrainDate = new List<WFLD_TrainDateList>();
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            try
            {
                while (result.Read())
                {

                    Status = 1;
                    lstTrainDate.Add(new WFLD_TrainDateList { TrainDate = result["TrainDate"].ToString() });
                }
                if (Status == 1)
                {
                    _DBResponse.Data = lstTrainDate;
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Status = -1;
                _DBResponse.Message = "Error";
            }
            finally
            {
                result.Dispose();
                result.Close();
            }
        }
        #endregion

        #region Long Standing Report For Container
        public void GetLongStandingImpLoadedCont(WFLD_LongStandingImpCon ObjContainerBalanceInCFS)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjContainerBalanceInCFS.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ObjContainerBalanceInCFS.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_days", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjContainerBalanceInCFS.days });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("LongStandingImpLoadedCont", CommandType.StoredProcedure, DParam);
            IList<WFLD_LongStandingImpConDtl> LstContainerBalanceInCFS = new List<WFLD_LongStandingImpConDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstContainerBalanceInCFS.Add(new WFLD_LongStandingImpConDtl
                    {
                        BOLNo = Result["OBL_NO"].ToString(),
                        IGMNo = Result["IGM_No"].ToString(),
                        IGMDate = Result["IGM_Date"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        EntryDateTime = Result["EntryDateTime"].ToString(),
                        ImporterName = Result["ImporterName"].ToString(),
                        ImporterAddress = Result["ImporterAddress"].ToString(),
                        InDate = Result["EntryDateTime"].ToString(),
                        CargoType = Result["CargoType"].ToString(),
                        SlaCd = Result["SlaCd"].ToString(),
                        NoOfPkg = Convert.ToInt32(Result["NO_PKG"].ToString()),
                        GrWt = Convert.ToDecimal(Result["GR_WT"].ToString()),
                        Commodity = Result["CommodityName"].ToString(),
                        Notice1 = Result["Notice1"].ToString(),
                        Notice2 = Result["Notice2"].ToString(),
                        Date1 = Result["Date1"].ToString(),
                        Date2 = Result["Date2"].ToString(),
                        Nocr = Result["Nocr"].ToString(),
                        Remarks1 = Result["Remarks1"].ToString(),
                        Remarks2 = Result["Remarks2"].ToString(),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainerBalanceInCFS;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region ECONOMY REPORT
        public void GetEconomyReport(int month, int year)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "repoYear", MySqlDbType = MySqlDbType.VarChar, Value = year });
            LstParam.Add(new MySqlParameter { ParameterName = "repoMonth", MySqlDbType = MySqlDbType.Int32, Value = month });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetMonthlyEconomyRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<EconomyReport> LstData = new List<EconomyReport>();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    LstData.Add(new EconomyReport
                    {
                        IncomeExpHeadId = Convert.ToInt32(Result["IncomeExpHeadId"]),
                        ItemType = Result["ItemType"].ToString(),
                        ItemHead = Result["ItemHead"].ToString(),
                        ItemLabel = Result["ItemLabel"].ToString(),
                        Amount = Result["Amount"].ToString(),
                        CumAmount = Result["CumAmount"].ToString(),
                        ProCumAmount = Result["ProCumAmount"].ToString(),
                        IsTextBox = Convert.ToInt32(Result["IsTextBox"])

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void SaveEconomyReport(int Month, int Year, string xmlMonthlyEconomyReport, int Uid)
        {
            string GenId = "0";
            string RetObj = "";
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "repoYear", MySqlDbType = MySqlDbType.Int32, Value = Year });
            LstParam.Add(new MySqlParameter { ParameterName = "repoMonth", MySqlDbType = MySqlDbType.Int32, Value = Month });
            LstParam.Add(new MySqlParameter { ParameterName = "uid", MySqlDbType = MySqlDbType.Int32, Value = Uid });
            LstParam.Add(new MySqlParameter { ParameterName = "xmlMonthlyEconomyReport", MySqlDbType = MySqlDbType.LongText, Value = xmlMonthlyEconomyReport });
            LstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Direction = ParameterDirection.Output, Value = 0 });
            LstParam.Add(new MySqlParameter { ParameterName = "GeneratedClientId", MySqlDbType = MySqlDbType.Int32, Direction = ParameterDirection.Output, Value = GenId });
            LstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.Text, Direction = ParameterDirection.Output, Value = RetObj });
            _DBResponse = new DatabaseResponse();
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            int Result = DataAccess.ExecuteNonQuery("RptMonthlyEconomySave", CommandType.StoredProcedure, DParam, out GenId, out RetObj);
            try
            {
                if (Result == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = RetObj;
                    _DBResponse.Data = RetObj;
                }
                else if (Result == 2)
                {
                    _DBResponse.Status = 2;
                    _DBResponse.Message = RetObj;
                    _DBResponse.Data = RetObj;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = RetObj;
                    _DBResponse.Data = RetObj;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }


        public void GetEconomyReportForPrint(int month, int year)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "repoYear", MySqlDbType = MySqlDbType.VarChar, Value = year });
            LstParam.Add(new MySqlParameter { ParameterName = "repoMonth", MySqlDbType = MySqlDbType.Int32, Value = month });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetMonthlyEconomyRptForPrint", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            EconomyRptPrint PrintData = new EconomyRptPrint();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    PrintData.FormDate = Result["FormDate"].ToString();
                    PrintData.ToDate = Result["ToDate"].ToString();
                    PrintData.SqmCovered = Result["SqmCovered"].ToString();
                    PrintData.BagCovered = Result["BagCovered"].ToString();
                    PrintData.SqmOpen = Result["SqmOpen"].ToString();
                    PrintData.BagOpen = Result["BagOpen"].ToString();
                    PrintData.CreatedOn = Result["CreatedOn"].ToString();
                    PrintData.IsFound = Convert.ToInt32(Result["IsFound"]);
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        PrintData.RptDetails.Add(new EconomyReport
                        {
                            Sr = Convert.ToInt32(Result["Sr"]),
                            IncomeExpHeadId = Convert.ToInt32(Result["IncomeExpHeadId"]),
                            ItemType = Result["ItemType"].ToString(),
                            ItemHead = Result["ItemHead"].ToString(),
                            ItemLabel = Result["ItemLabel"].ToString(),
                            Amount = Result["Amount"].ToString(),
                            CumAmount = Result["CumAmount"].ToString(),
                            ProCumAmount = Result["ProCumAmount"].ToString(),
                            ItemCodeNo = Result["ItemCodeNo"].ToString(),
                            ItemSortOrder = Convert.ToInt32(Result["ItemSortOrder"]),
                            PageNo = Convert.ToInt32(Result["PageNo"]),

                        });
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        PrintData.RptSummary.Add(new EconomyRptIncomeSummary
                        {
                            Sr = Convert.ToInt32(Result["Sr"]),
                            IncomeExpHeadId = Convert.ToInt32(Result["IncomeExpHeadId"]),
                            ItemLabel = Result["ItemLabel"].ToString(),
                            Amount = Result["Amount"].ToString(),
                            CumAmount = Result["CumAmount"].ToString(),
                            ProCumAmount = Result["ProCumAmount"].ToString(),
                            CodeNo = Result["CodeNo"].ToString(),

                        });
                    }
                }

                if (PrintData.IsFound == 0)
                {
                    Status = 0;
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = PrintData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data saved for this month and year";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion

        #region Long Standing Report For Cargo
        public void GetLongStandingImpLoadedCargo(WFLD_LongStandingImpCargo ObjContainerBalanceInCFS)
        {


            DateTime dtTo = DateTime.ParseExact(ObjContainerBalanceInCFS.AsOnDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = ObjContainerBalanceInCFS.GodownId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_days", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjContainerBalanceInCFS.days });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("LongStandingImpLoadedCargo", CommandType.StoredProcedure, DParam);
            IList<WFLD_LongStandingImpCargoDtl> LstContainerBalanceInCFS = new List<WFLD_LongStandingImpCargoDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstContainerBalanceInCFS.Add(new WFLD_LongStandingImpCargoDtl
                    {
                        BOLNo = Result["OBL_NO"].ToString(),
                        IGMNo = Result["IGM_No"].ToString(),
                        IGMDate = Result["IGM_Date"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        EntryDateTime = Result["EntryDateTime"].ToString(),
                        DstfDate = Result["DestuffingEntryDate"].ToString(),
                        ImporterName = Result["ImporterName"].ToString(),
                        ImporterAddress = Result["ImporterAddress"].ToString(),
                        InDate = Result["EntryDateTime"].ToString(),
                        CargoType = Result["CargoType"].ToString(),
                        SlaCd = Result["SlaCd"].ToString(),
                        NoOfPkg = Convert.ToInt32(Result["NO_PKG"].ToString()),
                        GrWt = Convert.ToDecimal(Result["GR_WT"].ToString()),
                        Area = Convert.ToDecimal(Result["Area"].ToString()),
                        Commodity = Result["CommodityName"].ToString(),
                        Notice1 = Result["Notice1"].ToString(),
                        Notice2 = Result["Notice2"].ToString(),
                        Date1 = Result["Date1"].ToString(),
                        Date2 = Result["Date2"].ToString(),
                        Nocr = Result["Nocr"].ToString(),
                        Remarks1 = Result["Remarks1"].ToString(),
                        Remarks2 = Result["Remarks2"].ToString(),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainerBalanceInCFS;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Export Job Order report
        public void GetContainerForExportJobOrder(String Type)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });


            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();

            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerForExportJobOrder", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLDExportRRReport> LstStuffing = new List<WFLDExportRRReport>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    if (LstStuffing.Count <= 0)
                    {
                        LstStuffing.Add(new WFLDExportRRReport
                        {
                            ContainerNo = Result["ContainerNo"].ToString(),
                            CFSCode = Result["CFSCode"].ToString()
                        });
                    }

                    else
                    {
                        int flag = 0;

                        for (int i1 = 0; i1 < LstStuffing.Count; i1++)
                        {
                            if (LstStuffing[i1].ContainerNo == Result["ContainerNo"].ToString())
                            {
                                flag = 1;
                                break;
                            }
                        }

                        if (flag == 0)
                        {
                            LstStuffing.Add(new WFLDExportRRReport
                            {
                                ContainerNo = Result["ContainerNo"].ToString(),
                                CFSCode = Result["CFSCode"].ToString()
                            });
                        }
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstStuffing;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }



        public void PrintExportJobOrder(String PFrom, String PTo, String Ttype)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(PFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(PTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });

            LstParam.Add(new MySqlParameter { ParameterName = "in_PTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Ttype", MySqlDbType = MySqlDbType.VarChar, Value = Ttype });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader result = DataAccess.ExecuteDataReader("GetDetForPrntjoborder", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            CwcExim.Areas.Export.Models.WFLDPrintJOModel objMdl = new CwcExim.Areas.Export.Models.WFLDPrintJOModel();
            _DBResponse = new DatabaseResponse();
            List<CwcExim.Areas.Export.Models.WFLDPrintJOModelDet> lstJobOrder = new List<CwcExim.Areas.Export.Models.WFLDPrintJOModelDet>();
            try
            {

                while (result.Read())
                {
                    Status = 1;
                    lstJobOrder.Add(new CwcExim.Areas.Export.Models.WFLDPrintJOModelDet
                    {
                        ContainerNo = result["ContainerNo"].ToString(),
                        ContainerSize = result["SZ"].ToString(),
                        ShippingLineName = result["ShippingLineName"].ToString(),
                        OnBehalf = result["OnBehalf"].ToString(),
                        CustomSealNo = result["CustomSeal"].ToString(),

                        Sline = result["LineSeal"].ToString(),
                        POL = result["POL"].ToString(),
                        POD = result["POD"].ToString(),
                        Ct_Tare = Convert.ToDecimal(result["TW"].ToString()),
                        Cargo_Wt = Convert.ToDecimal(result["CW"].ToString()),
                        CFSCode = result["CFSCode"].ToString(),


                        CargoType = result["CargoType"].ToString(),
                        ContainerLoadType = result["ContainerLoadType"].ToString(),
                    });

                }
                if (Status == 1)
                {
                    _DBResponse.Data = lstJobOrder;
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                result.Dispose();
                result.Close();
            }
        }

        public void PrintExportJoSum(String PFrom, String PTo, String Ttype)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(PFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(PTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });

            LstParam.Add(new MySqlParameter { ParameterName = "in_PTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Ttype", MySqlDbType = MySqlDbType.VarChar, Value = Ttype });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader result = DataAccess.ExecuteDataReader("GetDetForPrntjosummary", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            CwcExim.Areas.Export.Models.WFLDPrintJOModel objMdl = new CwcExim.Areas.Export.Models.WFLDPrintJOModel();
            _DBResponse = new DatabaseResponse();
            List<CwcExim.Areas.Export.Models.WFLDexportjobordersum> lstJobOrder = new List<CwcExim.Areas.Export.Models.WFLDexportjobordersum>();
            try
            {

                while (result.Read())
                {
                    Status = 1;
                    lstJobOrder.Add(new CwcExim.Areas.Export.Models.WFLDexportjobordersum
                    {

                        POL = result["POL"].ToString(),
                        SZ20 = result["SZ20"] == System.DBNull.Value ? 0 : Convert.ToInt32(result["SZ20"].ToString()),
                        SZ40 = result["SZ40"] == System.DBNull.Value ? 0 : Convert.ToInt32(result["SZ40"].ToString())
                    });

                }
                if (Status == 1)
                {
                    _DBResponse.Data = lstJobOrder;
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                result.Dispose();
                result.Close();
            }
        }
        #endregion

        #region core data report
        public void PrintCoreData(String Fdt, String ToDt)
        {


            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = ToDt });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjTDSReport.PartyId });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CoreDataReport", CommandType.StoredProcedure, DParam);
            WFLDCoreData objCoreData = new WFLDCoreData();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    objCoreData.ICDCash = Convert.ToDecimal(Result["ICDCash"].ToString());
                    objCoreData.ICDBill = Convert.ToDecimal(Result["ICDBill"].ToString());
                    objCoreData.ICDTotal = Convert.ToDecimal(Result["ICDTotal"].ToString());
                    objCoreData.DESSCash = Convert.ToDecimal(Result["DESSCash"].ToString());
                    objCoreData.DESSTotal = Convert.ToDecimal(Result["DESSTotal"].ToString());
                    objCoreData.CFSCash = Convert.ToDecimal(Result["CFSCash"].ToString());
                    objCoreData.IRRCash = Convert.ToDecimal(Result["IRRCash"].ToString());
                    objCoreData.IRRTotal = Convert.ToDecimal(Result["IRRTotal"].ToString());
                    objCoreData.GrossCash = Convert.ToDecimal(Result["GrossCash"].ToString());
                    objCoreData.GrossBill = Convert.ToDecimal(Result["GrossBill"].ToString());
                    objCoreData.GrossTotal = Convert.ToDecimal(Result["GrossTotal"].ToString());
                    objCoreData.CFSTotal = Convert.ToDecimal(Result["CFSTotal"].ToString());


                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objCoreData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Bill Cum SD Ledger
        public void GetBillCumSDLedgerReport(int partyId, string fromdate, string todate, string comname, string address)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = partyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = fromdate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = todate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("BillCumSDLedger", CommandType.StoredProcedure, DParam);
            BillCumSDLedger LedgerObj = new BillCumSDLedger();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {

                    LedgerObj.OpenningBalance = Convert.ToDecimal(Result["OpenningBalance"]);
                    LedgerObj.EximTraderName = Convert.ToString(Result["EximTraderName"]);
                    LedgerObj.EximTraderAlias = Convert.ToString(Result["EximTraderAlias"]);

                    LedgerObj.COMGST = Convert.ToString(Result["COMGST"]);
                    LedgerObj.COMPAN = Convert.ToString(Result["COMPAN"]);
                    LedgerObj.CurDate = DateTime.Now.ToString("dd-MMM-yyyy");

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {

                        LedgerObj.lstDetails.Add(new BillCumSDLedgerDetails
                        {
                            Sr = Convert.ToInt32(Result["Sr"]),
                            Col1 = Convert.ToString(Result["Col1"]),
                            Col2 = Convert.ToString(Result["Col2"]),
                            Col3 = Convert.ToString(Result["Col3"]),
                            Col4 = Convert.ToString(Result["Col4"]),
                            Col5 = Convert.ToString(Result["Col5"]),
                            Col6 = Convert.ToString(Result["Col6"]),
                        });
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LedgerObj.ClosingBalance = Convert.ToDecimal(Result["ClosingBalance"]);
                    }
                }


                if (Status == 1)
                {
                    LedgerObj.CompanyName = comname;
                    LedgerObj.CompanyAddress = address;


                    /*
                    CrInvLedgerObj.ClosingBalance = (CrInvLedgerObj.OpenningBalance + (CrInvLedgerObj.lstLedgerSummary.Sum(o => o.Debit)))
                                                    - (CrInvLedgerObj.lstLedgerSummary.Sum(o => o.Credit));
                    */

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LedgerObj;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region ContainerArrivalReport
        public void ContainerArrivalReport(ContainerArrivalReport ObjContainerArrivalReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjContainerArrivalReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjContainerArrivalReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_OperationType", MySqlDbType = MySqlDbType.VarChar, Size = 20, Value = ObjContainerArrivalReport.ImportExport });
            LstParam.Add(new MySqlParameter { ParameterName = "in_EmptyLoaded", MySqlDbType = MySqlDbType.VarChar, Size = 20, Value = ObjContainerArrivalReport.EmptyLoaded });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ContainerArrivalReport", CommandType.StoredProcedure, DParam);
            //IList<ContainerArrivalReport> LstContainerArrivalReport = new List<ContainerArrivalReport>();
            ContainerArrivalReport LstContainerArrivalReport = new ContainerArrivalReport();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            int SizeTwenty = 0;
            int SizeFourty = 0;
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstContainerArrivalReport.ListArrivalReport.Add(new ArrivalReportList
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        LoadOrEmpty = Result["LoadOrEmpty"].ToString(),
                        SealNo = Result["CustomSealNo"].ToString(),
                        Date = Result["Date"].ToString(),
                        Time = Result["Time"].ToString(),
                        Commodity = Result["Commodity"].ToString(),
                        ImportExport = Result["OperationType"].ToString(),
                        Size = Convert.ToString(Result["Size"] == null ? "" : Result["Size"]),
                        ICDCode = Result["ICDCode"].ToString(),
                        VehicleNo = Result["VehicleNo"].ToString(),
                        ModeOfTransport = Result["TransportMode"].ToString(),
                        CFSPORT = Result["CFSPORT"].ToString(),

                        // Withdraw = Result["Withdraw"].ToString()

                    });
                }

                if (Status == 1)
                {
                    SizeTwenty = LstContainerArrivalReport.ListArrivalReport.Count(o => o.Size == "20");
                    SizeFourty = LstContainerArrivalReport.ListArrivalReport.Count(o => o.Size == "40");
                    LstContainerArrivalReport.SizeTewnty = Convert.ToString(SizeTwenty);
                    LstContainerArrivalReport.SizeFourty = Convert.ToString(SizeFourty);
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainerArrivalReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion
        #region ContainerOutReport
        public void ContainerOutport(ContainerOutReport ObjContainerOutReport)
        {
            int sizeTwenty = 0;
            int sizeFourty = 0;
            DateTime dtfrom = DateTime.ParseExact(ObjContainerOutReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjContainerOutReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_OperationType", MySqlDbType = MySqlDbType.VarChar, Size = 20, Value = ObjContainerOutReport.ImportExport });
            LstParam.Add(new MySqlParameter { ParameterName = "in_LoadedEmpty", MySqlDbType = MySqlDbType.VarChar, Size = 20, Value = ObjContainerOutReport.LoadedEmpty });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ContainerOutReport", CommandType.StoredProcedure, DParam);
            ContainerOutReport LstContainerOutReport = new ContainerOutReport();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    LstContainerOutReport.lstContainerOutReport.Add(new ContainerOutReportList
                    {



                        Date = Result["Date"].ToString(),

                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        Time = Result["Time"].ToString(),
                        LoadedEmpty = Result["LoadedEmpty"].ToString(),
                        ImportExport = Result["ImportExport"].ToString()
                    });
                }

                if (Status == 1)
                {

                    if (LstContainerOutReport.lstContainerOutReport.Count > 0)
                    {
                        sizeTwenty = LstContainerOutReport.lstContainerOutReport.Count(o => o.Size == "20");
                        sizeFourty = LstContainerOutReport.lstContainerOutReport.Count(o => o.Size == "40");
                        //sizeTwenty = 0;
                        //sizeFourty = 0;

                        //LstContainerOutReport.lstContainerOutReport.ToList().ForEach(m =>
                        //{
                        //    if (m.Size == "20" && m.Size != null && m.Size != "")
                        //    {
                        //        sizeTwenty += 1;
                        //    }
                        //    if (m.Size == "40" && m.Size != null && m.Size != "")
                        //    {
                        //        sizeFourty += 1;
                        //    }

                        //});
                    }

                    LstContainerOutReport.SizeTwenty = Convert.ToString(sizeTwenty);
                    LstContainerOutReport.SizeFouirty = Convert.ToString(sizeFourty);

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Container Payment Details
        public void ListOfContainerWithCFSCode(string CFSCode, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_CFSCode", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = CFSCode });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerWithCFSCode", CommandType.StoredProcedure, Dparam);
            IList<WFLD_ContainerList> lstContainer = new List<WFLD_ContainerList>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    lstContainer.Add(new WFLD_ContainerList
                    {
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"])
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { lstContainer, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }
        public void ContainerPaymentDetail(WFLD_ContainerPaymentInfo Obj)
        {
            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_CFSCode", MySqlDbType = MySqlDbType.VarChar, Value = Obj.CFSCode });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getContainerEnquiry", CommandType.StoredProcedure, DParam);
            //List<WFLD_ContainerPaymentDtl> LstMonthlyCashBook = new List<WFLD_ContainerPaymentDtl>();
            WFLD_ContainerPaymentInfo CPI = new WFLD_ContainerPaymentInfo();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    CPI.CFSCode = Convert.ToString(Result["CFSCode"]);
                    CPI.ContainerNo = Convert.ToString(Result["ContainerNo"]);
                    CPI.InDate = Convert.ToString(Result["EntryDateTime"]);
                    CPI.Size = Convert.ToString(Result["Size"]);
                    CPI.EximTraderAlias = Convert.ToString(Result["EximTraderAlias"]);
                    CPI.OutDate = Convert.ToString(Result["GateExitDateTime"]);

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        CPI.lstContainerPaymentDtl.Add(new WFLD_ContainerPaymentDtl
                        {
                            ReceiptDate = Convert.ToDateTime(Result["ReceiptDate"] == DBNull.Value ? "N/A" : Result["ReceiptDate"]).ToString("dd/MM/yyyy"),
                            ReceiptNo = Result["ReceiptNo"].ToString(),
                            PartyName = Result["PartyName"].ToString(),
                            ChargeType = Convert.ToString(Result["ChargeType"]),
                            Amount = Convert.ToDecimal(Result["Amount"]),
                            FromDate = Result["FromDate"].ToString(),
                            ToDate = Result["ToDate"].ToString(),
                            InvoiceType = Result["InvoiceType"].ToString()
                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = CPI;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region tds report
        public void TdsReport(TDSReport ObjTDSReport)
        {
            _DBResponse = new DatabaseResponse();

            DateTime dtfrom = DateTime.ParseExact(ObjTDSReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjTDSReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjTDSReport.PartyId });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("TDSReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLD_TDSReportModel> model = new List<WFLD_TDSReportModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetTDSReportExcel(model, dt, ObjTDSReport.PeriodFrom, ObjTDSReport.PeriodTo);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetTDSReportExcel(List<WFLD_TDSReportModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "TDS Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        public void GetEximTraderForPartyLedger()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetEximTraderForPartyLedger", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<PartyLedgerList> LstParty = new List<PartyLedgerList>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstParty.Add(new PartyLedgerList
                    {
                        PartyId = Convert.ToInt32(Result["EximTraderId"].ToString()),
                        PartyName = Result["EximTraderName"].ToString()

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstParty;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion

        #region Import Con Income
        public void ImportConIncomeDetail(WFLD_ImportConIncome Obj)
        {
            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.VarChar, Value = Obj.FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.VarChar, Value = Obj.ToDate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getImportContainerIncome", CommandType.StoredProcedure, DParam);
            List<WFLD_ImportConIncomeDtl> lstImportConIncomeDtl = new List<WFLD_ImportConIncomeDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstImportConIncomeDtl.Add(new WFLD_ImportConIncomeDtl
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        PartyName = Result["PartyName"].ToString(),
                        PartyCode = Result["PartyCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        EntryNo = Result["GateInNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        MovementType = Result["MovementType"].ToString(),
                        TrainNo = Result["TrainNo"].ToString(),
                        TrainDate = Result["TrainDate"].ToString(),
                        SLACode = Convert.ToString(Result["SLACode"]),
                        PortCode = Result["PortCode"].ToString(),
                        DestuffingDate = Result["DestuffingDate"].ToString(),
                        CustomSealNo = Result["CustomSealNo"].ToString(),
                        ShedNo = Result["ShedNo"].ToString(),
                        THC = Convert.ToDecimal(Result["THC"]),
                        TPT = Convert.ToDecimal(Result["TPT"]),
                        ECC = Convert.ToDecimal(Result["ECC"]),
                        DTF = Convert.ToDecimal(Result["DTF"]),
                        LOL = Convert.ToDecimal(Result["LOL"]),
                        IRR = Convert.ToDecimal(Result["IRR"]),
                        HAZ = Convert.ToDecimal(Result["HAZ"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstImportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Export Con Income
        public void ExportConIncomeDetail(WFLD_ExportConIncome Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.VarChar, Value = Obj.FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.VarChar, Value = Obj.ToDate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getExportContainerIncome", CommandType.StoredProcedure, DParam);
            List<WFLD_ExportConIncomeDtl> lstExportConIncomeDtl = new List<WFLD_ExportConIncomeDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstExportConIncomeDtl.Add(new WFLD_ExportConIncomeDtl
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        PartyName = Result["PartyName"].ToString(),
                        PartyCode = Result["PartyCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerType = Result["ContainerType"].ToString(),
                        Size = Result["Size"].ToString(),
                        MovementType = Result["MovementType"].ToString(),
                        CargoWeight = Convert.ToDecimal(Result["CargoWeight"]),
                        TareWeight = Convert.ToDecimal(Result["TareWeight"]),
                        TotalWeight = Convert.ToDecimal(Result["TotalWeight"]),
                        SLACode = Convert.ToString(Result["SLACode"]),
                        PortCode = Result["PortCode"].ToString(),
                        PortOfLoading = Result["PortOfLoading"].ToString(),
                        StuffingDate = Result["StuffingDate"].ToString(),
                        MovementDate = Result["MovementDate"].ToString(),
                        SealDate = Result["SealDate"].ToString(),
                        ShedNo = Result["ShedNo"].ToString(),
                        ShedArea = Result["ShedArea"].ToString(),
                        THC = Convert.ToDecimal(Result["THC"]),
                        HND = Convert.ToDecimal(Result["HND"]),
                        RR = Convert.ToDecimal(Result["RR"]),
                        FNC = Convert.ToDecimal(Result["FNC"]),
                        WHT = Convert.ToDecimal(Result["WHT"]),
                        GRL = Convert.ToDecimal(Result["GRL"]),
                        GRE = Convert.ToDecimal(Result["GRE"]),
                        MO = Convert.ToDecimal(Result["MO"]),
                        INS = Convert.ToDecimal(Result["INS"]),
                        GEN = Convert.ToDecimal(Result["GEN"]),
                        HAZ = Convert.ToDecimal(Result["HAZ"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstExportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Assessment sheet LCL Report
        public void AssessmentSheetLCLDetail(WFLD_AssessmentSheetLCL Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getAssessmentSheetLCL", CommandType.StoredProcedure, DParam);
            List<WFLD_AssessmentSheetLCLDtl> lstImportConIncomeDtl = new List<WFLD_AssessmentSheetLCLDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstImportConIncomeDtl.Add(new WFLD_AssessmentSheetLCLDtl
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        ImporterName = Result["ImporterName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        PayeeCode = Result["PayeeCode"].ToString(),
                        BOENo = Result["BOENo"].ToString(),
                        BOEValueDuty = Convert.ToDecimal(Result["BOEValueDuty"]),
                        Area = Convert.ToDecimal(Result["Area"]),
                        GrossWt = Convert.ToDecimal(Result["GrossWt"]),
                        Week = Convert.ToInt32(Result["Week"]),
                        CargoType = Result["CargoType"].ToString(),
                        ENT = Convert.ToDecimal(Result["ENT"]),
                        HND = Convert.ToDecimal(Result["HND"]),
                        STO = Convert.ToDecimal(Result["STO"]),
                        INS = Convert.ToDecimal(Result["INS"]),
                        OTI = Convert.ToDecimal(Result["OTI"]),
                        HAZ = Convert.ToDecimal(Result["HAZ"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstImportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Seal Closing Report
        public void SealClosingReport(WFLD_SealClosingReport ObjSealClosingReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjSealClosingReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjSealClosingReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("SealClosingReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_SealClosingReport> LstSealClosingReport = new List<WFLD_SealClosingReport>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstSealClosingReport.Add(new WFLD_SealClosingReport
                    {


                        Date = Result["Date"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        Commodity = Result["Commodity"].ToString(),
                        LCLFCL = Result["LCLFCL"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        CHAOrPort = Result["CHA"].ToString(),
                        Weight = Result["StuffWeight"].ToString(),

                        value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstSealClosingReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Empty Container Payment Report
        public void EmptyContainerPayment(WFLD_EmptyConPayRpt Obj)
        {
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getEmptyContainerPaymentReport", CommandType.StoredProcedure, DParam);
            List<WFLD_EmptyConPayRptDtl> lstEmptyContDtl = new List<WFLD_EmptyConPayRptDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstEmptyContDtl.Add(new WFLD_EmptyConPayRptDtl
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        ImporterName = Result["ImporterName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        TotalDays = Convert.ToInt32(Result["TotalDays"]),
                        LOE = Convert.ToDecimal(Result["LOE"]),
                        GRE = Convert.ToDecimal(Result["GRE"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstEmptyContDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Reserve Space Income Report
        public void ReserveSpaceIncomeReport(DateTime FromDate, DateTime ToDate)
        {

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetReserveSpaceIncomeReport", CommandType.StoredProcedure, DParam);
            List<ReserveSpaceReport> lstEmptyContDtl = new List<ReserveSpaceReport>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstEmptyContDtl.Add(new ReserveSpaceReport
                    {

                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Result["InvoiceDate"].ToString(),
                        //SLNo =Convert.ToInt32(Result["SlNo"]),
                        TotalAMount = Convert.ToDecimal(Result["InvoiceAmt"].ToString()),
                        SGST = Convert.ToDecimal(Result["TotalSGST"].ToString()),
                        ReservationAmount = Convert.ToDecimal(Result["TotalTaxable"].ToString()),
                        Remarks = Result["Remarks"].ToString(),
                        Rate = Convert.ToDecimal(Result["Rent"].ToString()),
                        PartyName = Result["PartyName"].ToString(),
                        PartyCode = Result["PartyCode"].ToString(),
                        Month = Result["Month"].ToString(),
                        AmountReceivable = Convert.ToDecimal(Result["OutstandingAmt"].ToString()),
                        Area = Convert.ToDecimal(Result["Area"].ToString()),
                        BillingDate = "", //Result["InvoiceDate"].ToString(),
                        BillingNo = "",//Result["InvoiceNo"].ToString(),
                        CGST = Convert.ToDecimal(Result["TotalCGST"].ToString()),
                        IGST = Convert.ToDecimal(Result["TotalIGST"].ToString())

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstEmptyContDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region Outstanding Amount Report
        public void OutstandingAmountReport(DateTime FromDate, DateTime ToDate)
        {

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GETOutstandingAmountReport", CommandType.StoredProcedure, DParam);
            List<WFLD_OutstandingAmountReport> lstEmptyContDtl = new List<WFLD_OutstandingAmountReport>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstEmptyContDtl.Add(new WFLD_OutstandingAmountReport
                    {

                        BillingNo = Result["InvoiceNo"].ToString(),
                        BillingDate = Result["InvoiceDate"].ToString(),
                        //SLNo =Convert.ToInt32(Result["SlNo"]),
                        AmountReceivalbe = Convert.ToDecimal(Result["GrossTotal"].ToString()),
                        TotalAmount = Convert.ToDecimal(Result["Amount"].ToString()),
                        SGST = Convert.ToDecimal(Result["SGSTAmt"].ToString()),
                        Remarks = Result["Remarks"].ToString(),
                        SQM = Convert.ToDecimal(Result["Rate"].ToString()),
                        PartyName = Result["PartyName"].ToString(),
                        PartyCode = Result["PartyCode"].ToString(),
                        Month = Result["Month"].ToString(),
                        Area = Convert.ToDecimal(Result["Area"].ToString()),
                        CGST = Convert.ToDecimal(Result["CGSTAmt"].ToString()),
                        IGST = Convert.ToDecimal(Result["IGSTAmt"].ToString())

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstEmptyContDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Assessment sheet FCL Report
        public void AssessmentSheetFCLDetail(WFLD_AssessmentSheetFCL Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAssessmentSheetFCL", CommandType.StoredProcedure, DParam);
            List<WFLD_AssessmentSheetFCLDtl> lstImportConIncomeDtl = new List<WFLD_AssessmentSheetFCLDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstImportConIncomeDtl.Add(new WFLD_AssessmentSheetFCLDtl
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        ImporterName = Result["ImporterName"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        //PayeeCode = Result["PayeeCode"].ToString(),
                        BOENo = Result["BOENo"].ToString(),
                        BOEValueDuty = Convert.ToDecimal(Result["BEOValue"]),
                        //Area = Convert.ToDecimal(Result["Area"]),
                        GrossWt = Convert.ToDecimal(Result["TotalGrossWt"]),
                        Days = Convert.ToInt32(Result["Days"]),
                        CargoType = Result["CargoType"].ToString(),
                        ENT = Convert.ToDecimal(Result["ENT"]),
                        GRL = Convert.ToDecimal(Result["GRL"]),
                        MF = Convert.ToDecimal(Result["MF"]),
                        INS = Convert.ToDecimal(Result["INS"]),
                        OTI = Convert.ToDecimal(Result["OTI"]),
                        HAZ = Convert.ToDecimal(Result["HAZ"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstImportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Rent Income Report
        public void RentIncomeReport(WFLD_RentIncomeReportViewModel Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetRentIncomeReport", CommandType.StoredProcedure, DParam);
            List<WFLD_RentIncomeReportViewModel> lstImportConIncomeDtl = new List<WFLD_RentIncomeReportViewModel>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstImportConIncomeDtl.Add(new WFLD_RentIncomeReportViewModel
                    {
                        //i = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        PartyName = Result["EximTraderName"].ToString(),
                        PartyCode = Result["EximTraderAlias"].ToString(),
                        Month = Result["Month"].ToString(),
                        TDSCertification = Result["CirtificateNo"].ToString(),
                        RentReceived = Convert.ToDecimal(Result["Taxable"]),
                        TDSAmount = Convert.ToDecimal(Result["TDSAmount"]),
                        SGST = Convert.ToDecimal(Result["SGSTAmt"]),
                        CGST = Convert.ToDecimal(Result["CGSTAmt"]),
                        IGST = Convert.ToDecimal(Result["IGSTAmt"]),
                        TotalAmountReceived = Convert.ToDecimal(Result["Total"]),
                        AmountOutstanding = (Convert.ToDecimal(Result["Total"]) - Convert.ToDecimal(Result["ReceivedAmount"])),
                        Remarks = Result["Remarks"].ToString()

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstImportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Cargo Stock Register
        public void CargoStockRegister(WFLD_CrgStkRgt ObjCargoStockRegister)
        {
            DateTime dtfrom = DateTime.ParseExact(ObjCargoStockRegister.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjCargoStockRegister.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("CargoStockRegister", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLD_CrgStkRgt _ObjCargoStockRegister = new WFLD_CrgStkRgt();
            IList<WFLDexportCargoStock> ppgexportCargoStocklst = new List<WFLDexportCargoStock>();

            IList<WFLDimportCargoStock> ppgimportCargoStocklst = new List<WFLDimportCargoStock>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    _ObjCargoStockRegister.ppgexportCargoStocklst.Add(new WFLDexportCargoStock
                    {
                        shippingBillNo = Result["ShippingBillNo"].ToString().Trim(),
                        Date = (Result["RegisterDate"] == null ? "" : Result["RegisterDate"]).ToString(),
                        NoOfPackage = (Result["NoOfUnits"] == null ? "" : Result["NoOfUnits"]).ToString(),
                        Commodity = (Result["CommodityName"] == null ? "" : Result["CommodityName"]).ToString(),
                        Remarks = (Result["Remarks"] == null ? "" : Result["Remarks"]).ToString(),

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        _ObjCargoStockRegister.ppgimportCargoStocklst.Add(new WFLDimportCargoStock
                        {
                            BOE = Result["BOENo"].ToString(),
                            Date = (Result["BOEDate"] == null ? "" : Result["BOEDate"]).ToString(),
                            NoOfPackage = (Result["NoOfUnits"] == null ? "" : Result["NoOfUnits"]).ToString(),
                            Commodity = (Result["Commodity"] == null ? "" : Result["Commodity"]).ToString(),
                            Remarks = (Result["Remarks"] == null ? "" : Result["Remarks"]).ToString(),

                        });
                    }



                }

                /*  if (Result.NextResult())
                  {
                      while (Result.Read())
                      {
                          Status = 1;
                          _ObjCargoStockRegister.bondCargoStocklst.Add(new bondCargoStock
                          {
                              Warehouse = Result["WRNo"].ToString(),
                              Date = (Result["WRDate"] == null ? "" : Result["WRDate"]).ToString(),
                              NoOfPackage = (Result["NoOfUnits"] == null ? "" : Result["NoOfUnits"]).ToString(),
                              Commodity = (Result["CargoDescription"] == null ? "" : Result["CargoDescription"]).ToString(),
                              Remarks = (Result["Remarks"] == null ? "" : Result["Remarks"]).ToString(),

                          });
                      }



                  }*/
                if (Status == 1)
                {
                    _ObjCargoStockRegister.ppgexportCargoStocklst.ToList().ForEach(m =>
                    {
                        if (m.shippingBillNo == "/")
                        {
                            m.shippingBillNo = "";
                        }

                    });

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = _ObjCargoStockRegister;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion


        #region Tax (0) Invoice Report
        public void TaxZeroInvoiceReport(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("TaxZeroInvoiceReport", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstDailyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstDailyCashBook.Add(new DailyCashBookWFLD
                    {

                        //ReceiptNo, ReceiptDate, Party, ChequeNo, CashReceiptId, GenSpace, sto, Insurance, GroundRentEmpty, GroundRentLoaded, Mf, EntCharge, 
                        //Fum, OtCharge, CGSTAmt, SGSTAmt, IGSTAmt, MISC, MiscExcess, TotalCash, TotalCheque, tdsCol, crTDS
                        /*CRNo = Result["ReceiptNo"].ToString(),
                        ReceiptDate = Convert.ToDateTime(Result["ReceiptDate"] == DBNull.Value ? "N/A" : Result["ReceiptDate"]).ToString("dd/MM/yyyy"),

                        Depositor = Result["Party"].ToString(),*/
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Result["InvoiceDate"].ToString(),
                        InvoiceType = Result["InvoiceType"].ToString(),
                        PartyName = Result["PartyName"].ToString(),
                        PayeeName = Result["PayeeName"].ToString(),
                        ModeOfPay = Result["ModeOfPay"].ToString(),

                        ChqNo = Result["ChequeNo"].ToString(),
                        GenSpace = Result["GenSpace"].ToString(),
                        StorageCharge = Result["sto"].ToString(),
                        Insurance = Result["Insurance"].ToString(),
                        GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                        GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                        MfCharge = Result["Mf"].ToString(),
                        EntryCharge = Result["EntCharge"].ToString(),
                        Fumigation = Result["Fum"].ToString(),
                        OtherCharge = Result["OtCharge"].ToString(),
                        Misc = Result["MISC"].ToString(),
                        Cgst = Result["CGSTAmt"].ToString(),
                        Sgst = Result["SGSTAmt"].ToString(),
                        Igst = Result["IGSTAmt"].ToString(),

                        MiscExcess = Result["MiscExcess"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        TotalOthers = Result["TotalOther"].ToString(),
                        Tds = Result["tdsCol"].ToString(),
                        CrTds = Result["crTDS"].ToString(),
                        TotalPDA = Result["TotalPDA"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        //TDSPlus = Result["TDSPlus"].ToString(),
                        //Exempted = Result["Exempted"].ToString(),
                        //PdaPLus = Result["PdaPLus"].ToString(),
                        //TDSMinus = Result["TDSMinus"].ToString(),
                        //PdaMinus = Result["PdaMinus"].ToString(),
                        //HtAdjust = Result["HtAdjust"].ToString(),
                        //RoundOff = Result["RoundUp"].ToString(),
                        //RowTotal = Result["Total"].ToString()


                        //Party = Result["Party"].ToString(),
                        //Deposit = Result["Deposit"].ToString(),
                        //Withdraw = Result["Withdraw"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDailyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region PDUtilizationSummary
        public void PdSummaryUtilizationReport(PdSummary ObjPdSummaryReport, int type = 1)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjPdSummaryReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            // DateTime dtTo = DateTime.ParseExact(ObjCargoInStockReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_asOndate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Type", MySqlDbType = MySqlDbType.Int32, Value = type });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("PdSummaryUtilizationReport", CommandType.StoredProcedure, DParam);
            IList<PdSummary> LstPdSummaryReport = new List<PdSummary>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstPdSummaryReport.Add(new PdSummary
                    {



                        PartyName = Result["PartyName"].ToString(),

                        Amount = Result["Amount"].ToString()

                        //ContainerNo = Result["ContainerNo"].ToString(),
                        //value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstPdSummaryReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region Export THC RR
        public void ExportTHCRRReport(WFLD_ThcRrReport vm)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetTHCRRReport", CommandType.StoredProcedure, DParam);
            List<WFLD_ThcRrReport> lstExportTHCRRdtl = new List<WFLD_ThcRrReport>();

            _DBResponse = new DatabaseResponse();
            try
            {

                while (Result.Read())
                {
                    Status = 1;

                    lstExportTHCRRdtl.Add(new WFLD_ThcRrReport
                    {

                        Date = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceNo = Convert.ToString(Result["InvoiceNo"]),
                        ShippingLineName = Convert.ToString(Result["ShippingLinaName"]),
                        PayeeCode = Convert.ToString(Result["EximTraderAlias"]),
                        DestinationPort = Convert.ToString(Result["PortName"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerSize = Convert.ToString(Result["Size"]),
                        TotalWeight = Convert.ToDecimal(Result["TotalGrossWt"]),
                        TareWeight = Convert.ToDecimal(Result["TareWeight"]),
                        RRAmount = Convert.ToDecimal(Result["RRAmount"]),
                        TotalRRGstAmount = Convert.ToDecimal(Result["RRTotalGSTAmt"]),
                        THCAmount = Convert.ToDecimal(Result["THCAmount"]),
                        TotalTHGstAmount = Convert.ToDecimal(Result["THCTotalGSTAmt"]),
                        GrandTotal = Convert.ToDecimal(Result["Total"])
                    });

                }


                lstExportTHCRRdtl.Add(new WFLD_ThcRrReport
                {

                    Date = "Total",
                    InvoiceNo = "",
                    ShippingLineName = "",
                    PayeeCode = "",
                    DestinationPort = "",
                    ContainerNo = "",
                    CFSCode = "",
                    ContainerSize = "",
                    TotalWeight = lstExportTHCRRdtl.Sum(x => x.TotalWeight),
                    TareWeight = lstExportTHCRRdtl.Sum(x => x.TareWeight),
                    RRAmount = lstExportTHCRRdtl.Sum(x => x.RRAmount),
                    TotalRRGstAmount = lstExportTHCRRdtl.Sum(x => x.TotalRRGstAmount),
                    THCAmount = lstExportTHCRRdtl.Sum(x => x.THCAmount),
                    TotalTHGstAmount = lstExportTHCRRdtl.Sum(x => x.TotalTHGstAmount),
                    GrandTotal = lstExportTHCRRdtl.Sum(x => x.GrandTotal)

                });
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstExportTHCRRdtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Import THC RR
        public void ImportTHCRRReport(WFLD_ThcRrReport vm)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetImportTHCRRReport", CommandType.StoredProcedure, DParam);
            List<WFLD_ThcRrReport> lstExportTHCRRdtl = new List<WFLD_ThcRrReport>();

            _DBResponse = new DatabaseResponse();
            try
            {

                while (Result.Read())
                {
                    Status = 1;

                    lstExportTHCRRdtl.Add(new WFLD_ThcRrReport
                    {

                        Date = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceNo = Convert.ToString(Result["InvoiceNo"]),
                        ShippingLineName = Convert.ToString(Result["ShippingLinaName"]),
                        PayeeCode = Convert.ToString(Result["EximTraderAlias"]),
                        DestinationPort = Convert.ToString(Result["PortName"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerSize = Convert.ToString(Result["Size"]),
                        TrainNo = Convert.ToString(Result["TrainNo"]),
                        TrainDate = Convert.ToString(Result["TrainDate"]),
                        TotalWeight = Convert.ToDecimal(Result["Gross_Wt"]),
                        TareWeight = Convert.ToDecimal(Result["Ct_Tare"]),
                        RRAmount = Convert.ToDecimal(Result["RRAmount"]),
                        TotalRRGstAmount = Convert.ToDecimal(Result["RRTotalGSTAmt"]),
                        THCAmount = Convert.ToDecimal(Result["THCAmount"]),
                        TotalTHGstAmount = Convert.ToDecimal(Result["THCTotalGSTAmt"]),
                        GrandTotal = Convert.ToDecimal(Result["Total"])
                    });

                }


                lstExportTHCRRdtl.Add(new WFLD_ThcRrReport
                {

                    Date = "Total",
                    InvoiceNo = "",
                    ShippingLineName = "",
                    PayeeCode = "",
                    DestinationPort = "",
                    ContainerNo = "",
                    CFSCode = "",
                    ContainerSize = "",
                    TrainNo = "",
                    TrainDate = "",
                    TareWeight = lstExportTHCRRdtl.Sum(x => x.TareWeight),
                    TotalWeight = lstExportTHCRRdtl.Sum(x => x.TotalWeight),
                    RRAmount = lstExportTHCRRdtl.Sum(x => x.RRAmount),
                    TotalRRGstAmount = lstExportTHCRRdtl.Sum(x => x.TotalRRGstAmount),
                    THCAmount = lstExportTHCRRdtl.Sum(x => x.THCAmount),
                    TotalTHGstAmount = lstExportTHCRRdtl.Sum(x => x.TotalTHGstAmount),
                    GrandTotal = lstExportTHCRRdtl.Sum(x => x.GrandTotal)

                });
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstExportTHCRRdtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Long Standing Report For Cargo Export
        public void GetLongStandingExportLoadedCargo(WFLD_LongStandingExportCargo vm)
        {


            DateTime dtTo = DateTime.ParseExact(vm.AsOnDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = vm.GodownId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_days", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = vm.days });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetLongStandingExportCargo", CommandType.StoredProcedure, DParam);
            IList<WFLD_LongStandingExportCargoDtl> lstLongStandingExportCargoDetails = new List<WFLD_LongStandingExportCargoDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    lstLongStandingExportCargoDetails.Add(new WFLD_LongStandingExportCargoDtl
                    {
                        ShippingBillNo = Result["ShippingBillNo"].ToString(),
                        ShippingBillNoDate = Result["ShippingBillDate"].ToString(),
                        ShippingLineCode = Result["ShippingCode"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        StuffingDate = Result["StuffingDate"].ToString(),
                        CCINInvoiceDate = Result["InvoiceNo"].ToString(),
                        CCINInvoiceNo = Result["InvoiceDate"].ToString(),
                        ExporterName = Result["ExporterName"].ToString(),
                        ExporterAddress = Result["ExporterAddress"].ToString(),
                        StroageCharges = Convert.ToDecimal(Result["STO"]),
                        ChaName = Result["ChaName"].ToString(),
                        InDate = Result["EntryDate"].ToString(),
                        Fob = Convert.ToDecimal(Result["Fob"]),
                        NoOfPkg = Convert.ToInt32(Result["NoofPkg"].ToString()),
                        GrWt = Convert.ToDecimal(Result["Weight"].ToString()),
                        Area = Convert.ToDecimal(Result["Area"].ToString()),
                        Commodity = Result["CommodityName"].ToString(),
                        GH = Result["SpaceType"].ToString(),
                        Notice1 = Result["Notice1"].ToString(),
                        Notice2 = Result["Notice2"].ToString(),
                        Date1 = Result["Date1"].ToString(),
                        Date2 = Result["Date2"].ToString(),
                        Nocr = Result["SeizeDate"].ToString(),
                        SeizeDate = Result["Nocr"].ToString(),
                        Remarks1 = Result["Remarks1"].ToString(),
                        Remarks2 = Result["Remarks2"].ToString(),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstLongStandingExportCargoDetails;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion




        #region Generating CashBookWithSD
        public void GetCashBookWithSD(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("DailyCashBookReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];

            List<WFLD_CashBookWithSDExcel> model = new List<WFLD_CashBookWithSDExcel>();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    model = (from DataRow dr in dt.Rows
                             select new WFLD_CashBookWithSDExcel()
                             {
                                 // SlNo = Convert.ToInt32(dr["SlNo"]),


                                 InvoiceDate = dr["InvoiceDate"].ToString(),
                                 InvoiceNo = dr["InvoiceNo"].ToString(),
                                 InvoiceType = dr["InvoiceType"].ToString(),
                                 PartyName = dr["PartyName"].ToString(),
                                 PayeeName = dr["PayeeName"].ToString(),
                                 ModeOfPay = (dr["ModeOfPay"]).ToString(),
                                 ChequeNo = dr["ChequeNo"].ToString(),
                                 GenSpace = Convert.ToDecimal(dr["GenSpace"]),
                                 sto = Convert.ToDecimal(dr["sto"]),
                                 Insurance = Convert.ToDecimal(dr["Insurance"]),
                                 GroundRentLoaded = Convert.ToDecimal(dr["GroundRentLoaded"]),
                                 GroundRentEmpty = Convert.ToDecimal(dr["GroundRentEmpty"]),
                                 Mf = Convert.ToDecimal(dr["Mf"]),
                                 EntCharge = Convert.ToDecimal(dr["EntCharge"]),
                                 Fum = Convert.ToDecimal(dr["Fum"]),

                                 OtCharge = Convert.ToDecimal(dr["OtCharge"]),
                                 MISC = Convert.ToDecimal(dr["MISC"]),

                                 CGSTAmt = Convert.ToDecimal(dr["CGSTAmt"]),
                                 SGSTAmt = Convert.ToDecimal(dr["SGSTAmt"]),
                                 IGSTAmt = Convert.ToDecimal(dr["IGSTAmt"]),
                                 MiscExcess = Convert.ToDecimal(dr["MiscExcess"]),
                                 TotalCash = Convert.ToDecimal(dr["TotalCash"]),
                                 TotalCheque = Convert.ToDecimal(dr["TotalCheque"]),
                                 TotalOther = Convert.ToDecimal(dr["TotalOther"]),
                                 TotalPDA = Convert.ToDecimal(dr["TotalPDA"]),
                                 tdsCol = Convert.ToDecimal(dr["tdsCol"]),
                                 crTDS = Convert.ToDecimal(dr["crTDS"]),

                                 Remarks = dr["Remarks"].ToString()
                             }).ToList();
                }
                decimal InvoiceAmount = 0, CRAmount = 0;
                //foreach (DataRow dr in ds.Tables[1].Rows)
                //{
                //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
                //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
                //}
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = CashBookWithSDExcelExcel(model, InvoiceAmount, CRAmount);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }




        }
        private string CashBookWithSDExcelExcel(List<WFLD_CashBookWithSDExcel> model, decimal InvoiceAmount, decimal CRAmount)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF CashBook With SD";
                exl.MargeCell("A1:M1", title, DynamicExcel.CellAlignment.Middle);

                //   exl.MargeCell("A2:A4", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("A2", "InvoiceDate", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("B2", "InvoiceNo", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("C2", "InvoiceType", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("D2", "PartyName", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("E2", "PayeeName", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("F2", "ModeOfPay", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("F2", "ChequeNo" + Environment.NewLine + "Bag/MT/Sqm", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("H2", "GenSpace", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("I2", "Sto", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("J2", "Insurance", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("K2", "GroundRentEmpty" + Environment.NewLine + "(Before Tax)", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("L2", "GroundRentLoaded", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("M2", "Mf", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N2", "EntCharge", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("O2", "Fum", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                //exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("P2", "OtCharge", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Q2", "MISC", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("R2", "CGSTAmt", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("S2", "SGSTAmt", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("T2", "IGSTAmt", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("U2", "MiscExcess", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("V2", "TotalCash", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("W2", "TotalCheque", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("X2", "TotalOther", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Y2", "TotalPDA", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Z2", "tdsCol", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("AA2", "crTDS", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("AB2", "Remarks", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                //for (var i = 65; i < 90; i++)
                //{
                //    char character = (char)i;
                //    string text = character.ToString();
                //    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                //}
                /*exl.AddTable<InvoiceData>("A", 6, model.InvoiceData, new[] { 6, 20, 20, 40, 12, 16, 10, 10, 12, 12, 8, 14, 8, 14, 8, 14, 16 });
                exl.AddTable<CashReceiptData>("R", 6, model.CashReceiptData, new[] { 12, 30, 14, 14, 14, 14, 14, 40 });/
                exl.AddTable<WFLDRegisterOfOutwardSupplyModel>("A", 6, model, new[] { 6, 20, 20, 40, 12, 16, 10, 10, 12, 12, 8, 14, 8, 14, 8, 14, 16, 12, 30, 14, 14, 14, 14, 14, 40 });*/
                exl.AddTable<WFLD_CashBookWithSDExcel>("A", 3, model, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 20, 12, 12, 8, 14, 8, 14, 8, 14, 16, 10, 30, 14, 40, 14, 40, 14, 14, 12, 20, });
                var GenSpace = model.Sum(o => o.GenSpace);

                var sto = model.Sum(o => o.sto);
                var Insurance = model.Sum(o => o.Insurance);
                var GroundRentEmpty = model.Sum(o => o.GroundRentEmpty);
                var GroundRentLoaded = model.Sum(o => o.GroundRentLoaded);
                var Mf = model.Sum(o => o.Mf);
                var EntCharge = model.Sum(o => o.EntCharge);
                var Fum = model.Sum(o => o.Fum);
                var OtCharge = model.Sum(o => o.OtCharge);
                var MISC = model.Sum(o => o.MISC);
                var CGSTAmt = model.Sum(o => o.CGSTAmt);
                var SGSTAmt = model.Sum(o => o.SGSTAmt);
                var IGSTAmt = model.Sum(o => o.IGSTAmt);
                var MiscExcess = model.Sum(o => o.MiscExcess);
                var TotalCash = model.Sum(o => o.TotalCash);
                var TotalCheque = model.Sum(o => o.TotalCheque);
                var TotalOther = model.Sum(o => o.TotalOther);

                var TotalPDA = model.Sum(o => o.TotalPDA);
                var crTDS = model.Sum(o => o.crTDS);
                //var TotalCash = model.Sum(o => o.TotalCash);

                exl.AddCell("H" + (model.Count + 6).ToString(), GenSpace.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("I" + (model.Count + 6).ToString(), sto.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("J" + (model.Count + 6).ToString(), Insurance.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("K" + (model.Count + 6).ToString(), GroundRentEmpty.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("L" + (model.Count + 6).ToString(), GroundRentLoaded.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("M" + (model.Count + 6).ToString(), Mf.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("N" + (model.Count + 6).ToString(), EntCharge.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 6).ToString(), Fum.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 6).ToString(), OtCharge.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Q" + (model.Count + 6).ToString(), MISC.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("R" + (model.Count + 6).ToString(), CGSTAmt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("S" + (model.Count + 6).ToString(), SGSTAmt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("T" + (model.Count + 6).ToString(), IGSTAmt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("U" + (model.Count + 6).ToString(), MiscExcess.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("V" + (model.Count + 6).ToString(), TotalCash.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("W" + (model.Count + 6).ToString(), TotalCheque.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("X" + (model.Count + 6).ToString(), TotalOther.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Y" + (model.Count + 6).ToString(), TotalPDA.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Z" + (model.Count + 6).ToString(), crTDS.ToString(), DynamicExcel.CellAlignment.CenterRight);
                //  exl.AddCell("Z" + (model.Count + 1).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);



                /*exl.AddCell("O" + (model.Count + 7).ToString(), "Invoice Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 7).ToString(), InvoiceAmount, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 8).ToString(), "Cash Receipt Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 8).ToString(), CRAmount, DynamicExcel.CellAlignment.CenterRight);*/

                exl.Save();
            }
            return excelFile;
        }



        #endregion


        #region AuctionCashBook
        public void GetAuctionCashBook(string FromDate, string Todate)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Todate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");

            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pTodate", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("GetAuctionCashBook", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];

            List<AuctionCashBookViewModel> lstAuctionCashBook = new List<AuctionCashBookViewModel>();
            try
            {
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        lstAuctionCashBook.Add(new AuctionCashBookViewModel
                        {
                            ReceiptNo = Convert.ToString(dr["EmdRcvdNo"]),
                            ReceiptDate = Convert.ToString(dr["EmdRcvdDate"]),
                            ChqDDUTRNo = Convert.ToString(dr["InstrumentNo"]),
                            BidderName = Convert.ToString(dr["BidderName"]),
                            BidNo = Convert.ToString(dr["BidNo"]),
                            AdvanceAmountPaid = Convert.ToDecimal(dr["AdvanceAmount"]),
                            BidAmount = Convert.ToDecimal(dr["BidAmount"]),
                            EmdAmount = Convert.ToDecimal(dr["EmdAmount"]),
                            AdvanceAmountAdjust = Convert.ToDecimal(dr["AdvanceAdjust"]),
                            TotalPaid = Convert.ToDecimal(dr["TotalPaid"]),

                        });
                    }

                }
                if (lstAuctionCashBook.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = lstAuctionCashBook;
                }
                else
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }




        }
        #endregion


        #region AuctionCashBook For Invoice 
        public void GetAuctionCashBookForInvoice(string FromDate, string Todate)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Todate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");

            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pTodate", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("GetAuctionCashBookForInvoice", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];

            List<AuctionCashBookViewModel> lstAuctionCashBook = new List<AuctionCashBookViewModel>();
            try
            {
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        lstAuctionCashBook.Add(new AuctionCashBookViewModel
                        {
                            ReceiptNo = Convert.ToString(dr["EmdRcvdNo"]),
                            ReceiptDate = Convert.ToString(dr["EmdRcvdDate"]),
                            ChqDDUTRNo = Convert.ToString(dr["InstrumentNo"]),
                            BidderName = Convert.ToString(dr["BidderName"]),
                            BidNo = Convert.ToString(dr["BidNo"]),
                            AdvanceAmountPaid = Convert.ToDecimal(dr["AdvanceAmount"]),
                            BidAmount = Convert.ToDecimal(dr["BidAmount"]),
                            EmdAmount = Convert.ToDecimal(dr["EmdAmount"]),
                            AdvanceAmountAdjust = Convert.ToDecimal(dr["AdvanceAdjust"]),
                            TotalPaid = Convert.ToDecimal(dr["TotalPaid"]),
                            EMDAmountAdjust = Convert.ToDecimal(dr["AdjustEmdAmount"]),
                            NetAmount = Convert.ToDecimal(dr["NetAmount"]),
                            TotalGST = Convert.ToDecimal(dr["TotalGST"])

                        });
                    }

                }
                if (lstAuctionCashBook.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = lstAuctionCashBook;
                }
                else
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }




        }
        #endregion

        #region AuctionCashBook For Statement 
        public void GetAuctionStatement(string FromDate, string Todate)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Todate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");

            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pTodate", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("GetAuctionStatement", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];

            List<AuctionStatementViewModel> lstAuctionCashBook = new List<AuctionStatementViewModel>();
            try
            {
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        lstAuctionCashBook.Add(new AuctionStatementViewModel
                        {
                            EntryNo = Convert.ToString(dr["GateInNo"]),
                            EntryDate = Convert.ToString(dr["EntryDate"]),
                            Obl = Convert.ToString(dr["OBL"]),
                            ShippingBill = Convert.ToString(dr["SB"]),
                            ContainerNo = Convert.ToString(dr["Container"]),
                            Size = Convert.ToString(dr["Size"]),
                            InDate = Convert.ToString(dr["InDate"]),
                            Shed = Convert.ToString(dr["GodownName"]),
                            Area = Convert.ToDecimal(dr["Area"]),
                            Pkg = Convert.ToDecimal(dr["Area"]),
                            Weight = Convert.ToDecimal(dr["Weight"]),
                            Bidamount = Convert.ToDecimal(dr["BidAmount"]),
                            valueCharge = Convert.ToDecimal(dr["ValuesCharges"]),
                            AuctionCharge = Convert.ToDecimal(dr["AuctionCharges"]),
                            MiscCharge = Convert.ToDecimal(dr["MiscCharges"]),
                            CustomDuty = Convert.ToDecimal(dr["CustomDuty"]),
                            CwcShare = Convert.ToDecimal(dr["CWCShare"]),
                            Remarks = Convert.ToString(dr["Remarks"])

                        });
                    }

                }
                if (lstAuctionCashBook.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = lstAuctionCashBook;
                }
                else
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }




        }
        #endregion

        #region PaymentVoucher Report (Imprest / Temporary Advanced)
        public void GetPaymentVoucherReport(string Fdt, string Tdt, string Purpose)
        {

            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.VarChar, Value = Convert.ToDateTime(Fdt).ToString("yyyyMMdd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.VarChar, Value = Convert.ToDateTime(Tdt).ToString("yyyyMMdd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Purpose", MySqlDbType = MySqlDbType.VarChar, Value = Purpose });

            DParam = LstParam.ToArray();
            //IDataReader Result = DataAccess.ExecuteDataReader("GetPaymentVoucherReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_PaymentVoucherReport> LstRpt = new List<WFLD_PaymentVoucherReport>();
            LstRpt = (List<WFLD_PaymentVoucherReport>)DataAccess.ExecuteDynamicSet<WFLD_PaymentVoucherReport>("GetPaymentVoucherReport", DParam);
            _DBResponse = new DatabaseResponse();
            try
            {

                if (LstRpt.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstRpt;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                /*
                Result.Close();
                Result.Dispose();
                */
            }
        }
        #endregion



        #region Import Container Income(Seci)
        public void ImportConIncomeSeciDetail(WFLD_ImportSeciIncRpt Obj)
        {

            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getImportContainerSeciIncome", CommandType.StoredProcedure, DParam);
            List<WFLD_ImportSeciIncRpt> lstContDtl = new List<WFLD_ImportSeciIncRpt>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstContDtl.Add(new WFLD_ImportSeciIncRpt()
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        ContainerType = Result["MovementType"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        ForeignLiner = Result["ForeignLiner"].ToString(),
                        VesselName = Result["VesselName"].ToString(),
                        VesselNo = Result["VesselNo"].ToString(),
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceType = Convert.ToString(Result["InvoiceType"]),
                        PayeeName = Result["PayeeName"].ToString(),
                        GCD = Convert.ToDecimal(Result["GCD"].ToString()),
                        GDV = Convert.ToDecimal(Result["GDV"].ToString()),
                        THC = Convert.ToDecimal(Result["THC"]),
                        IRR = Convert.ToDecimal(Result["IRR"]),
                        CHT = Convert.ToDecimal(Result["TPT"]),
                        CH = Convert.ToDecimal(Result["HND"]),
                        SW = Convert.ToDecimal(Result["ST"]),
                        OSI = Convert.ToDecimal(Result["OT"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstContDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region Export Container Income(Seci)
        public void ExportConIncomeSeciDetail(WFLD_ExportSeciIncRpt Obj)
        {

            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getExportContainerSeciIncome", CommandType.StoredProcedure, DParam);
            List<WFLD_ExportSeciIncRpt> lstContDtl = new List<WFLD_ExportSeciIncRpt>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstContDtl.Add(new WFLD_ExportSeciIncRpt()
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        ContainerType = Result["MovementType"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        ForeignLiner = Result["ForeignLiner"].ToString(),
                        VesselName = Result["VesselName"].ToString(),
                        VesselNo = Result["VesselNo"].ToString(),
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Convert.ToString(Result["InvoiceDate"]),
                        InvoiceType = Convert.ToString(Result["InvoiceType"]),
                        PayeeName = Result["PayeeName"].ToString(),
                        GCD = Convert.ToDecimal(Result["GCD"].ToString()),
                        GDV = Convert.ToDecimal(Result["GDV"].ToString()),
                        THC = Convert.ToDecimal(Result["THC"]),
                        IRR = Convert.ToDecimal(Result["IRR"]),
                        CHT = Convert.ToDecimal(Result["TPT"]),
                        CH = Convert.ToDecimal(Result["HND"]),
                        SW = Convert.ToDecimal(Result["ST"]),
                        OSI = Convert.ToDecimal(Result["OT"]),
                        CGST = Convert.ToDecimal(Result["CGST"]),
                        SGST = Convert.ToDecimal(Result["SGST"]),
                        IGST = Convert.ToDecimal(Result["IGST"]),
                        Total = Convert.ToDecimal(Result["Total"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstContDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        public void ContainerBalanceInCFS(WFLDContainerBalanceInCFS ObjContainerBalanceInCFS)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjContainerBalanceInCFS.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjContainerBalanceInCFS.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.VarChar, Size = 45, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.VarChar, Size = 45, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ContainerBalanceInCFSReport", CommandType.StoredProcedure, DParam);
            IList<WFLDContainerBalanceInCFS> LstContainerBalanceInCFS = new List<WFLDContainerBalanceInCFS>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstContainerBalanceInCFS.Add(new WFLDContainerBalanceInCFS
                    {



                        CFsCode = Result["CFSCode"].ToString(),

                        ContainerNo = Result["ContainerNo"].ToString(),

                        Size = Result["Size"].ToString(),
                        Type = Result["ContainerType"].ToString(),
                        DaysAtCfs = Result["Days"].ToString(),
                        EntryDate = Result["EntryDate"].ToString(),
                        ShippingLineName = Result["ShippingLineName"].ToString(),
                        Rotation = Result["Rotation"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainerBalanceInCFS;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void GenericBulkInvoiceDetailsForPrintAuction(AuctionInvoiceViewModel ObjBulkInvoiceReport)
        {
            DateTime dtfrom = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjBulkInvoiceReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            ObjBulkInvoiceReport.InvoiceModule = "Auc";
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceModule))
            {
                ObjBulkInvoiceReport.InvoiceModule = "";
            }
            if (String.IsNullOrWhiteSpace(ObjBulkInvoiceReport.InvoiceNumber))
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceNumber });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = ObjBulkInvoiceReport.PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceType", MySqlDbType = MySqlDbType.VarChar, Size = 40, Value = ObjBulkInvoiceReport.InvoiceModule });

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetAuctioninvoicedetailsforprint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();

            }
        }


        public void DeStuffingReport(DeStuffingReport ObjDeStuffingReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDeStuffingReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDeStuffingReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DeStuffingReport", CommandType.StoredProcedure, DParam);
            IList<DeStuffingReport> LstDeStuffingReport = new List<DeStuffingReport>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstDeStuffingReport.Add(new DeStuffingReport
                    {


                        Date = Result["Date"].ToString(),
                        BOEorBl = Result["BOEorBl"].ToString(),
                        Party = Result["Party"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Commodity = Result["Commodity"].ToString(),
                        NoOfPackage = Result["NoOfPackage"].ToString(),
                        WT = Result["WT"].ToString(),
                        GoDown = Result["GoDown"].ToString(),
                        Location = Result["Location"].ToString()

                        //value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDeStuffingReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void CargoInstockReport(CargoInStockReport ObjCargoInStockReport)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjCargoInStockReport.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjCargoInStockReport.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CargoInStockReport", CommandType.StoredProcedure, DParam);
            IList<CargoInStockReport> LstDeStuffingReport = new List<CargoInStockReport>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstDeStuffingReport.Add(new CargoInStockReport
                    {


                        Date = Result["Date"].ToString(),
                        BOEorBl = Result["BOEorBl"].ToString(),
                        Party = Result["Party"].ToString(),

                        Commodity = Result["Commodity"].ToString(),
                        NoOfPackage = Result["NoOfPackage"].ToString(),
                        WT = Result["WT"].ToString(),
                        GoDown = Result["GoDown"].ToString(),
                        Location = Result["Location"].ToString(),
                        CHAName = Result["CHAName"].ToString()
                        //ContainerNo = Result["ContainerNo"].ToString(),
                        //value = Result["value"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDeStuffingReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        public void ContainerMovementRegister(ContainerMovementRegister ObjContainerMovementRegister)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjContainerMovementRegister.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjContainerMovementRegister.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ContainerMovementRegister", CommandType.StoredProcedure, DParam);
            IList<ContainerMovementRegister> LstDailyPdaActivityReport = new List<ContainerMovementRegister>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstDailyPdaActivityReport.Add(new ContainerMovementRegister
                    {
                        Date = Result["Date"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        Type = Result["Type"].ToString(),
                        LoadedOrEmpty = Result["LoadedOrEmpty"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        Party = Result["Party"].ToString(),
                        LoadedOrEmpty1 = Result["LoadedOrEmpty"].ToString(),
                        InOrOut = Result["InOrOut"].ToString(),
                        ImportExport = Result["OperationType"].ToString()

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDailyPdaActivityReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }


        #region TDS Statement
        public void TdsStatement(string PeriodFrom, string PeriodTo)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(PeriodFrom).ToString("yyyy/MM/dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(PeriodTo).ToString("yyyy/MM/dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("TDSStatement", CommandType.StoredProcedure, DParam);
            IList<WFLDTDSStatement> LstTDS = new List<WFLDTDSStatement>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstTDS.Add(new WFLDTDSStatement
                    {
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyName = Result["PartyName"].ToString(),
                        ReceiptDate = Result["ReceiptDate"].ToString(),
                        ReceiptNo = Result["ReceiptNo"].ToString(),
                        TDSCol = 0,//Convert.ToDecimal(Result["TDSCol"]),
                        CWCTDS = 0,//Convert.ToDecimal(Result["CWCTDS"]),
                        HTTDS = 0,//Convert.ToDecimal(Result["HTTDS"]),
                        TDS = Convert.ToDecimal(Result["TDS"])
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstTDS;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region Register of Inward Supply
        public void GetRegisterofInwardSupply(DateTime date1, DateTime date2, string Type)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetRegisterofInwardSupply", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];

            decimal TotalOpening = 0M;
            if (Type == "Imprest")
            {
                DataTable dt1 = ds.Tables[1];
                TotalOpening = Convert.ToDecimal(dt1.Rows[0]["Opening"]);
            }
            List<WFLDRegisterOfInwardSupplyModel> model = new List<WFLDRegisterOfInwardSupplyModel>();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    model = (from DataRow dr in dt.Rows
                             select new WFLDRegisterOfInwardSupplyModel()
                             {
                                 SlNo = Convert.ToInt32(dr["SlNo"]),
                                 OpeningAmount = Convert.ToDecimal(dr["OpeningAmount"]),
                                 VoucherNo = dr["Voucher"].ToString(),
                                 DateOfPay = dr["DateOfPayment"].ToString(),
                                 GST = dr["GSTIN"].ToString(),
                                 Place = dr["POS"].ToString(),

                                 PartyName = dr["NOS"].ToString(),
                                 VoucherNumber = dr["VoucherNo"].ToString(),
                                 Date = dr["Date"].ToString(),
                                 RateOfTax = Convert.ToInt32(dr["Rate"]),
                                 TaxableVal = Convert.ToDecimal(dr["Taxable"]),
                                 IGST = Convert.ToDecimal(dr["IGST"]),
                                 CentralTax = Convert.ToDecimal(dr["CentralTax"]),
                                 StateTax = Convert.ToDecimal(dr["StateTax"]),
                                 Cess = Convert.ToDecimal(dr["Cess"]),
                                 TotalAmount = Convert.ToDecimal(dr["Total"]),
                                 // Supply = (dr["NOP"]).ToString(),
                                 // Date= dr["Date"].ToString(),







                             }).ToList();
                }

                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = RegisterofInwardSupplyExcel(model, date1, date2, TotalOpening);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }







        }

        private string RegisterofInwardSupplyExcel(List<WFLDRegisterOfInwardSupplyModel> model, DateTime Fromdate, DateTime ToDate, decimal Opening)
        {
            UtilityClasses.CurrencyToWordINR objCurr = new UtilityClasses.CurrencyToWordINR();

            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION";
                var h1 = "A GOVT. OF INDIA UNDERTAKING";
                var h2 = "CONTAINER FREIGHT STATION - WHITEFIELD";
                var h3 = "#107-109,KIADB Area,EPIP,BANGALORE - 560066.";
                var h4 = "(080-41750721/23/25; 080-41750722; cwcwfdcfs@gmail.com)";
                var h5 = "REGISTER OF INWARD SUPPLY THROUGH IMPREST FOR THE PERIOD FROM " + Fromdate.ToString("dd/M/yyyy", CultureInfo.InvariantCulture) + " TO " + ToDate.ToString("dd/M/yyyy", CultureInfo.InvariantCulture) + " ";
                exl.MargeCell("A1:P1", title, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A2:P2", h1, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A3:P3", h2, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A4:P4", h3, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A5:P5", h4, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A6:P6", h5, DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("H7:I7", "Invoice Details", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L7:O7", "Amount Of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A7:A11", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B7:B11", "Opening Balance/Amount Received from RO & Date of Encashment of Cheque", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C7:C11", "Voucher No Allotted at Warehouse", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D7:D11", "Date Of Payment", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E7:E11", "GSTIN of Supplier", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F7:F11", "Place of Supply(Name of State)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G7:G11", "Name of Supplier/Name of Employee to whom Amount Paid", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H8:H11", "Number", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I7:I11", "Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J7:J11", "Rate of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K7:K11", "Taxable Value", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L8:L11", "IGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M8:M11", "Central Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N8:N11", "State Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("O8:O11", "Cess", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("P7:P11", "Total Amount", DynamicExcel.CellAlignment.Middle);

                // exl.MargeCell("P2:P4", "SGST", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                //  exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                // exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(11+13 or 11+15+17))", DynamicExcel.CellAlignment.Middle);

                // exl.MargeCell("S2:S4", "PaymentMode", DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                for (var i = 65; i < 81; i++)
                {
                    char character = (char)i;
                    string text = character.ToString();
                    exl.AddCell(text + "12", (i - 64), DynamicExcel.CellAlignment.Middle);
                }





                if (model.Count > 0)
                    exl.AddTable<WFLDRegisterOfInwardSupplyModel>("A", 13, model, new[] { 6, 20, 20, 20, 12, 20, 20, 15, 20, 12, 12, 8, 14, 8, 14, 8, 14, 16, 10, 30 });

                //var igstamt = model.Sum(o => o.ITaxAmount);
                //var sgstamt = model.Sum(o => o.STaxAmount);
                //var cgstamt = model.Sum(o => o.CTaxAmount);

                var TotalReceiving = model.Sum(o => o.OpeningAmount);
                var Totalspent = model.Sum(o => o.TotalAmount);
                var TotalUnSpent = (Opening + TotalReceiving) - Totalspent;
                /* string ReceivedDate = "";
                 model.ForEach(x =>
                 {
                     ReceivedDate+=  x.DateOfPay+",";
                 });

                 if (ReceivedDate != "")
                 {
                     ReceivedDate = ReceivedDate.Remove(ReceivedDate.Length - 1);
                 }

                 var ROReceving = "(OB)-RS " + Opening.ToString(".00") + " + " + TotalReceiving.ToString(".00") + " RECEIVED ON  " + ReceivedDate + " TOTAL " + (Opening + TotalReceiving).ToString(".00");

                 exl.MargeCell("B13:B" + (model.Count + 12).ToString() + "", ROReceving, DynamicExcel.CellAlignment.TopLeft);*/




                exl.MargeCell("A" + (model.Count + 13).ToString() + ":O" + (model.Count + 13).ToString() + "", "TOTAL", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 13).ToString() + "", Totalspent, DynamicExcel.CellAlignment.CenterRight);
                exl.MargeCell("A" + (model.Count + 14).ToString() + ":O" + (model.Count + 14).ToString() + "", "UNSPENT AMOUNT AS ON " + ToDate.ToString("dd/M/yyyy", CultureInfo.InvariantCulture) + "", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 14).ToString() + "", TotalUnSpent, DynamicExcel.CellAlignment.CenterRight);

                exl.MargeCell("A" + (model.Count + 15).ToString() + ":C" + (model.Count + 15).ToString() + "", "Summary:", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A" + (model.Count + 16).ToString() + ":C" + (model.Count + 16).ToString() + "", "Imprest Opening Balance:", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D" + (model.Count + 16).ToString() + ":D" + (model.Count + 16).ToString() + "", Opening, DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A" + (model.Count + 17).ToString() + ":C" + (model.Count + 17).ToString() + "", "Amount recived during the week:", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D" + (model.Count + 17).ToString() + ":D" + (model.Count + 17).ToString() + "", TotalReceiving, DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);


                exl.MargeCell("A" + (model.Count + 18).ToString() + ":C" + (model.Count + 18).ToString() + "", "Amount spent during the week", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D" + (model.Count + 18).ToString() + ":D" + (model.Count + 18).ToString() + "", Totalspent, DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);


                exl.MargeCell("A" + (model.Count + 19).ToString() + ":C" + (model.Count + 19).ToString() + "", "Imprest Closing Balance:", DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D" + (model.Count + 19).ToString() + ":D" + (model.Count + 19).ToString() + "", TotalUnSpent, DynamicExcel.CellAlignment.BottomLeft, DynamicExcel.CellFontStyle.Bold);

                exl.AddCell("G" + (model.Count + 19).ToString() + "", "CERTIFICATE", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A" + (model.Count + 20).ToString() + ":N" + (model.Count + 20).ToString() + "", "Certified that the closing Imprest Cash Balance as on " + ToDate.ToString("dd/M/yyyy", CultureInfo.InvariantCulture) + " RS. " + TotalUnSpent.ToString(".00") + "/-(" + objCurr.changeCurrencyToWords(Convert.ToString(TotalUnSpent.ToString(".00"))) + ").Which is Physically verified and found correct :", DynamicExcel.CellAlignment.BottomLeft);

                exl.MargeCell("A" + (model.Count + 22).ToString() + ":C" + (model.Count + 22).ToString() + "", "Submitted to : The Regional Manager, ", DynamicExcel.CellAlignment.BottomLeft);
                exl.MargeCell("M" + (model.Count + 22).ToString() + ":P" + (model.Count + 22).ToString() + "", "(VIKASH)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A" + (model.Count + 23).ToString() + ":C" + (model.Count + 23).ToString() + "", "CWC, RO, Bangalore. ", DynamicExcel.CellAlignment.BottomLeft);
                exl.MargeCell("M" + (model.Count + 23).ToString() + ":P" + (model.Count + 23).ToString() + "", "MANAGER, CFS", DynamicExcel.CellAlignment.Middle);
                exl.Save();
            }
            return excelFile;
        }
        #endregion
        #region Track Your Container
        public void GetShippingLine()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = HttpContext.Current.Session["BranchId"] });
            IDataParameter[] DParam = { };
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetShippingLine", CommandType.StoredProcedure, DParam);
            List<VIZ_ShippingLineList> LstShippingLine = new List<VIZ_ShippingLineList>();
            // ShippingLine LstShippingLine = new ShippingLine();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstShippingLine.Add(new VIZ_ShippingLineList
                    {
                        ShippingLineId = Convert.ToInt32(Result["ShippingLineId"]),
                        ShippingLineName = Result["ShippingLine"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstShippingLine;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetContainerNoForContStatus()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            // LstParam.Add(new MySqlParameter { ParameterName = "in_ShippingLineId", MySqlDbType = MySqlDbType.Int32, Value = 0 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_ContainerNo", MySqlDbType = MySqlDbType.VarChar, Value = "0" });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ICDCode", MySqlDbType = MySqlDbType.VarChar, Value = "0" });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerForContrStatus", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<VIZ_TrackContainer> LstContainer = new List<VIZ_TrackContainer>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstContainer.Add(new VIZ_TrackContainer
                    {
                        ContainerNo = (Result["ContainerNo"] == null ? "" : Result["ContainerNo"]).ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainer;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetContainerDetForContStatus(int ShippingLineId, string ContainerNo)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_ShippingLineId", MySqlDbType = MySqlDbType.Int32, Value = ShippingLineId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ContainerNo", MySqlDbType = MySqlDbType.VarChar, Value = ContainerNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerForContrStatus_test", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<VIZ_TrackContainerStatusList> LstContainer = new List<VIZ_TrackContainerStatusList>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstContainer.Add(new VIZ_TrackContainerStatusList
                    {
                        DestuffingDate = (Result["DestuffingDate"] == null ? "" : Result["DestuffingDate"]).ToString(),
                        StuffingDate = (Result["StuffingDate"] == null ? "" : Result["StuffingDate"]).ToString(),
                        AppraisementDate = (Result["AppraisementAppDate"] == null ? "" : Result["AppraisementAppDate"]).ToString(),
                        GatePassNo = (Result["GatePassNo"] == null ? "" : Result["GatePassNo"]).ToString(),
                        GateEntryDate = (Result["GateEntryDateTime"] == null ? "" : Result["GateEntryDateTime"]).ToString(),
                        Rotation = (Result["Rotation"] == null ? "" : Result["Rotation"]).ToString(),
                        GateExitDate = (Result["GateExitDateTime"] == null ? "" : Result["GateExitDateTime"]).ToString(),
                        GatePassDate = (Result["GatePassDate"] == null ? "" : Result["GatePassDate"]).ToString(),
                        LineNo = (Result["LineNo"] == null ? "" : Result["LineNo"]).ToString(),
                        JobOrderDate = (Result["JobOrderDate"] == null ? "" : Result["JobOrderDate"]).ToString(),
                        GodownName = (Result["GodownName"] == null ? "" : Result["GodownName"]).ToString(),
                        Location = (Result["Location"] == null ? "" : Result["Location"]).ToString(),
                        LoadedRequestNo = (Result["LoadContReqNo"] == null ? "" : Result["LoadContReqNo"]).ToString(),
                       // GodownName = (Result["GodownName"] == null ? "" : Result["GodownName"]).ToString(),
                       // Location = (Result["Location"] == null ? "" : Result["Location"]).ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainer;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetContWiseLatestICD(string ContainerNo)
        {
            int Status = 0;
            List<MySqlParameter> Lstparam = new List<MySqlParameter>();
            Lstparam.Add(new MySqlParameter { ParameterName = "in_ContainerNo", MySqlDbType = MySqlDbType.VarChar, Size = 30, Value = ContainerNo });
            IDataParameter[] DParam = { };
            DParam = Lstparam.ToArray();
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DA.ExecuteDataReader("GetContWiseLatestICDForTrackCont", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            ICDList ObjIcd = new ICDList();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    ObjIcd.ICDCode = Convert.ToString(Result["CFSCode"]);


                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Data = ObjIcd;
                    _DBResponse.Message = "Success";
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Data = null;
                    _DBResponse.Message = "No Data Found";
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetContainerDetForTrackContStatus(string ICDCode)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            // LstParam.Add(new MySqlParameter { ParameterName = "in_ShippingLineId", MySqlDbType = MySqlDbType.Int32, Value = ShippingLineId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ICDCode", MySqlDbType = MySqlDbType.VarChar, Value = ICDCode });
            LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerForContrStatus", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<VIZ_TrackContainerStatusList> LstContainer = new List<VIZ_TrackContainerStatusList>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstContainer.Add(new VIZ_TrackContainerStatusList
                    {
                        DestuffingDate = (Result["DestuffingDate"] == null ? "" : Result["DestuffingDate"]).ToString(),
                        DestuffingStartDate = (Result["StartDate"] == null ? "" : Result["StartDate"]).ToString(),
                        StuffingDate = (Result["StuffingDate"] == null ? "" : Result["StuffingDate"]).ToString(),
                        AppraisementDate = (Result["AppraisementAppDate"] == null ? "" : Result["AppraisementAppDate"]).ToString(),
                        GatePassNo = (Result["GatePassNo"] == null ? "" : Result["GatePassNo"]).ToString(),
                        GateEntryDate = (Result["GateEntryDateTime"] == null ? "" : Result["GateEntryDateTime"]).ToString(),
                        Rotation = (Result["Rotation"] == null ? "" : Result["Rotation"]).ToString(),
                        GateExitDate = (Result["GateExitDateTime"] == null ? "" : Result["GateExitDateTime"]).ToString(),
                        GatePassDate = (Result["GatePassDate"] == null ? "" : Result["GatePassDate"]).ToString(),
                        LineNo = (Result["LineNo"] == null ? "" : Result["LineNo"]).ToString(),
                        JobOrderDate = (Result["JobOrderDate"] == null ? "" : Result["JobOrderDate"]).ToString(),
                        GodownName = (Result["GodownName"] == null ? "" : Result["GodownName"]).ToString(),
                        Location = (Result["Location"] == null ? "" : Result["Location"]).ToString(),
                        ShippingLineName = (Result["shippingLine"] == null ? "" : Result["shippingLine"]).ToString(),
                        Size = (Result["Size"] == null ? "" : Result["Size"]).ToString(),
                        ICDCode = (Result["ICDCode"] == null ? "" : Result["ICDCode"]).ToString(),
                        LoadedRequestNo = (Result["LoadContReqNo"] == null ? "" : Result["LoadContReqNo"]).ToString(),
                        LoadedRequestDate = (Result["LoadContReqDate"] == null ? "" : Result["LoadContReqDate"]).ToString(),
                        InvoiceNo = (Result["InvoiceNo"] == null ? "" : Result["InvoiceNo"]).ToString(),
                        Invoicedate = (Result["InvoiceDate"] == null ? "" : Result["InvoiceDate"]).ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstContainer;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion

        #region ICE Details

        public void ListOfICEGateOBLNo(string SearchBy, string OBLNo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_OBLNo", MySqlDbType = MySqlDbType.VarChar, Value = OBLNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            lstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.VarChar, Value = SearchBy });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetOBLNoForOBLSearch", CommandType.StoredProcedure, Dparam);
            IList<OBLNoForPage> LstObl = new List<OBLNoForPage>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstObl.Add(new OBLNoForPage
                    {
                        OBLNo = Result["OBLNo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstObl, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }
        public void GetICEGateDetail(string oblnum, string obldate, string SearchBy)
        {
            DateTime dtobl = DateTime.ParseExact(obldate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string obldt = dtobl.ToString("yyyy/MM/dd");
            DataSet Result = new DataSet();
            int Status = 0;
            try
            {
                //DateTime dt = DateTime.ParseExact(IGM_Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                IDataParameter[] DParam = { };
                List<MySqlParameter> LstParam = new List<MySqlParameter>();
                DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
                LstParam.Add(new MySqlParameter { ParameterName = "In_OBLNo", MySqlDbType = MySqlDbType.String, Value = oblnum });
                LstParam.Add(new MySqlParameter { ParameterName = "In_OBLDate", MySqlDbType = MySqlDbType.DateTime, Value = obldt });
                LstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.String, Value = SearchBy });
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetICEGateData", CommandType.StoredProcedure, DParam);

                _DBResponse = new DatabaseResponse();

                WFLD_OBLWiseContainerEntry objOBLEntry = new WFLD_OBLWiseContainerEntry();

                //List<OblEntryDetails> OblEntryDetailsList = new List<OblEntryDetails>();

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    if (Result.Tables[0].Rows.Count > 0)
                    {
                        objOBLEntry.OBL_No = Convert.ToString(Result.Tables[0].Rows[0]["OBL_NO"]);
                        objOBLEntry.OBL_Date = Convert.ToString(Result.Tables[0].Rows[0]["OBL_DATE"]);
                        objOBLEntry.IGM_No = Convert.ToString(Result.Tables[0].Rows[0]["IGM_NO"]);
                        objOBLEntry.IGM_Date = Convert.ToString(Result.Tables[0].Rows[0]["IGM_DATE"]);
                        objOBLEntry.TPNo = Convert.ToString(Result.Tables[0].Rows[0]["TP_NO"]);
                        objOBLEntry.TPDate = Convert.ToString(Result.Tables[0].Rows[0]["TP_DATE"]);
                        objOBLEntry.MovementType = Convert.ToString(Result.Tables[0].Rows[0]["MovementType"]);
                        objOBLEntry.PortId = Convert.ToInt32(Result.Tables[0].Rows[0]["PortId"]);
                        objOBLEntry.LineNo = Convert.ToString(Result.Tables[0].Rows[0]["LINE_NO"].ToString());
                        objOBLEntry.CargoDescription = Convert.ToString(Result.Tables[0].Rows[0]["CargoDescription"]);
                        objOBLEntry.NoOfPkg = Convert.ToString(Result.Tables[0].Rows[0]["NO_PKG"]);
                        objOBLEntry.PkgType = Convert.ToString(Result.Tables[0].Rows[0]["PKG_TYPE"]);
                        objOBLEntry.GR_WT = Convert.ToDecimal(Result.Tables[0].Rows[0]["GR_WT"]);
                        objOBLEntry.ImporterId = Convert.ToInt32(Result.Tables[0].Rows[0]["ImporterId"]);
                        objOBLEntry.ImporterName = Convert.ToString(Result.Tables[0].Rows[0]["ImporterName"]);
                        objOBLEntry.ImporterAddress = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress"]);
                        objOBLEntry.ImporterAddress1 = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress1"]);
                        objOBLEntry.CargoType = Convert.ToInt32(Result.Tables[0].Rows[0]["CargoType"]);
                        objOBLEntry.SMTPNo = Convert.ToString(Result.Tables[0].Rows[0]["SMTPNo"]);
                        objOBLEntry.TSANo = Convert.ToString(Result.Tables[0].Rows[0]["TSANo"]);
                        objOBLEntry.TSADate = Convert.ToString(Result.Tables[0].Rows[0]["TSADate"]);
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OBLWiseContainerEntryDetails objOBLEntryDetails = new OBLWiseContainerEntryDetails();
                        objOBLEntryDetails.ShippingLineName = Convert.ToString(dr["ShippingLineName"]);
                        objOBLEntry.ShippingLine = objOBLEntryDetails.ShippingLineName;
                        objOBLEntryDetails.ShippingLineId = Convert.ToInt32(dr["ShippingLineId"]);
                        objOBLEntryDetails.ContainerSize = Convert.ToString(dr["ContainerSize"]);
                        objOBLEntryDetails.ContainerNo = Convert.ToString(dr["ContainerNo"]);
                        objOBLEntryDetails.NoOfPkg = Convert.ToString(dr["NO_PKG"]);
                        objOBLEntryDetails.GR_WT = Convert.ToDecimal(dr["GR_WT"]);
                        objOBLEntry.OblEntryDetailsList.Add(objOBLEntryDetails);
                    }

                    if (Result.Tables[2].Rows.Count > 0)
                    {
                        objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        objOBLEntry.DestuffingDate = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingDate"]);
                        objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        //objOBLEntry.InvNo = Convert.ToString(Result.Tables[2].Rows[0]["Invoiceno"]);
                        //objOBLEntry.InvDate = Convert.ToString(Result.Tables[2].Rows[0]["InvoiceDate"]);
                        //objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[2].Rows[0]["GatePassNo"]);
                        //objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[2].Rows[0]["GatePassDateTime"].ToString());
                        //objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[2].Rows[0]["GateExitNo"]);
                        //objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[2].Rows[0]["GateExitDateTime"].ToString());
                    }
                    if (Result.Tables[3].Rows.Count > 0)
                    {
                        //objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        //objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        //objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        //objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        //objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        objOBLEntry.InvNo = Convert.ToString(Result.Tables[3].Rows[0]["Invoiceno"]);
                        objOBLEntry.InvDate = Convert.ToString(Result.Tables[3].Rows[0]["InvoiceDate"]);
                        objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[3].Rows[0]["GatePassNo"]);
                        objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[3].Rows[0]["GatePassDateTime"].ToString());
                        objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[3].Rows[0]["GateExitNo"]);
                        objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[3].Rows[0]["GateExitDateTime"].ToString());
                    }
                }

                if (Status == 1)
                {
                    //if (OblEntryDetailsList.Count > 0)
                    //{
                    //    objOBLEntry.StringifiedText = Newtonsoft.Json.JsonConvert.SerializeObject(OblEntryDetailsList);
                    //}

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objOBLEntry;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }

        public void DeleteOBLWiseContainer(int OblEntryId)
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_OblEntryId", MySqlDbType = MySqlDbType.Int32, Value = OblEntryId });
            lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            int Result = DA.ExecuteNonQuery("DeleteOBLWiseContainer", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (Result == 1)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else if (Result == 2)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Cannot Delete As It Exists In Seal Cutting";
                    _DBResponse.Status = 2;
                }
                else if (Result == 3)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Cannot Delete  As It Exists In Job Order By Train";
                    _DBResponse.Status = 3;
                }
                //else if (Result == -1)
                //{
                //    _DBResponse.Data = null;
                //    _DBResponse.Message = "Cannot Delete As It Exists In Another Page";
                //    _DBResponse.Status = -1;
                //}
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
        }
        #endregion
        #region SBQueryReport
        public void GetAllSB()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = 0 });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetShipBillListForSBQuery", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLD_SBQuery> LstSB = new List<WFLD_SBQuery>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstSB.Add(new WFLD_SBQuery
                    {
                        Id = Convert.ToInt32(Result["Id"]),
                        SBNODate = Result["SBNODate"].ToString()
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstSB;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }

        public void SBQueryReport(int id, string sbno, string sbdate)
        {


            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Id", MySqlDbType = MySqlDbType.Int32, Value = id });
            LstParam.Add(new MySqlParameter { ParameterName = "in_SBNO", MySqlDbType = MySqlDbType.VarChar, Value = sbno });
            LstParam.Add(new MySqlParameter { ParameterName = "in_SBDate", MySqlDbType = MySqlDbType.Date, Value = sbdate });

            int Status = 0;

            IDataParameter[] DParam = { };



            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetSBQueryDetails", CommandType.StoredProcedure, DParam);
            WFLD_SBQuery LstSBQueryReport = new WFLD_SBQuery();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstSBQueryReport.Id = Convert.ToInt32(Result["Id"]);
                    LstSBQueryReport.SBNO = Convert.ToString(Result["SBNO"]);
                    LstSBQueryReport.PortOFDischarge = Convert.ToString(Result["PortOfDischarge"]);
                    LstSBQueryReport.PortOFLoad = Convert.ToString(Result["PortName"]);
                    LstSBQueryReport.ShippingLine = Convert.ToString(Result["ShippingLine"]);
                    LstSBQueryReport.Comodity = Convert.ToString(Result["Comodity"]);
                    LstSBQueryReport.CHA = Convert.ToString(Result["CHA"]);
                    LstSBQueryReport.Date = Convert.ToString(Result["Date"]);
                    //LstSBQueryReport.PortOFDischarge = Convert.ToString(Result["Id"]);
                    LstSBQueryReport.Package = Convert.ToInt32(Result["Package"]);
                    LstSBQueryReport.Weight = Convert.ToDecimal(Result["Weight"]);
                    LstSBQueryReport.FOB = Convert.ToDecimal(Result["FOB"]);
                    LstSBQueryReport.Cargotype = Convert.ToInt32(Result["CargoType"]);
                    LstSBQueryReport.Vehicle = Convert.ToInt32(Result["NoOfVehicle"]);
                    LstSBQueryReport.Exporter = Convert.ToString(Result["Exporter"]);
                    LstSBQueryReport.Country = Convert.ToString(Result["Country"]);
                    LstSBQueryReport.GateinNo = Convert.ToString(Result["GateInNo"]);
                    LstSBQueryReport.InvoiceNo = Convert.ToString(Result["InvoiceNo"]);

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LstSBQueryReport.CartingSBQList.Add(new WFLD_CartingFORSB
                        {
                            Date = Convert.ToString(Result["Date"]),
                            CartingRegisterNo = Result["CartingRegisterNo"].ToString(),
                            Godown = Convert.ToString(Result["Godown"]),
                            Remarks = Convert.ToString(Result["Remarks"]),
                            Location = Result["Location"].ToString(),
                            NOOfPackages = Convert.ToInt32(Result["NoOFPackage"]),
                            ReserveCBM = Convert.ToDecimal(Result["ReserveCBM"]),
                            UnReserveCBM = Convert.ToDecimal(Result["UnReserveCBM"]),
                            excessbalancecargo = Convert.ToInt32(Result["excessbalancecargo"]),
                            ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                            InvoiceNo = Convert.ToString(Result["invoiceno"]),
                        });



                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LstSBQueryReport.DeliverySBQList.Add(new WFLD_DeliveryFORSBQuery
                        {
                            Date = Convert.ToString(Result["Date"]),
                            InvoiceNO = Result["InvoiceNo"].ToString(),
                            //  Exporter = Convert.ToString(Result["Exporter"]),
                            //  CHA = Result["CHA"].ToString(),
                            NOOfPackages = Convert.ToInt32(Result["NoOFPackage"]),
                            ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                            ReceiptDate = Convert.ToString(Result["ReceiptDate"]),
                            StuReqNo = Convert.ToString(Result["StuffingReqNo"]),
                            CfsCode = Convert.ToString(Result["cfscode"]),
                            Forwarder = Convert.ToString(Result["ForwarderName"]),
                            Transporter = Convert.ToString(Result["transportername"]),
                            SealNo = Convert.ToString(Result["SealNo"]),
                            SealDate = Convert.ToString(Result["SealDate"]),
                            IwbNo = Convert.ToString(Result["IWBNo"]),
                            ContainerNo = Convert.ToString(Result["containerno"]),
                            Size = Convert.ToString(Result["size"]),
                            PortOfLoading = Convert.ToString(Result["Portofloading"]),
                            VehicleNo = Convert.ToString(Result["VehicleNo"]),
                            OutDate = Convert.ToString(Result["outdate"]),







                        });


                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LstSBQueryReport.BTTSBQList.Add(new WFLD_BTTFORSBQuery
                        {
                            Date = Convert.ToString(Result["invDate"]),
                            InvoiceNO = Result["InvoiceNo"].ToString(),
                            NOOfPackages = Convert.ToInt32(Result["NoOfUnits"]),
                            ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                            ReceiptDate = Convert.ToString(Result["ReceiptDate"]),
                        });



                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LstSBQueryReport.StockSBQList.Add(new WFLD_StockSBQuery
                        {

                            NOOfPackages = Convert.ToInt32(Result["Units"]),
                            SQM = Convert.ToDecimal(Result["Area"]),
                            Weight = Convert.ToDecimal(Result["Weight"]),
                        });



                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        LstSBQueryReport.Pallatisation.Add(new WFLD_DeliveryFORSBQuery
                        {
                            Date = Convert.ToString(Result["Date"]),
                            InvoiceNO = Result["InvoiceNo"].ToString(),
                            Exporter = Convert.ToString(Result["Exporter"]),
                            CHA = Result["CHA"].ToString(),
                            NOOfPackages = Convert.ToInt32(Result["NoOFPackage"]),
                            NOOfPallet = Convert.ToInt32(Result["NoOFPallet"]),
                            ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                            ReceiptDate = Convert.ToString(Result["ReceiptDate"]),
                        });



                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstSBQueryReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region CCIN SLIP
        public void GetCcinSlipForPrint(int Id)
        {

            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Id", MySqlDbType = MySqlDbType.Int32, Value = Id });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetCargoCartedInSlip", CommandType.StoredProcedure, DParam);
            WFLD_CCINPrint ObjStuffing = new WFLD_CCINPrint();
            // WFLD_ContainerStuffingDtl lstcont = new WFLD_ContainerStuffingDtl();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    ObjStuffing.CCINNO = Result["CCINNO"].ToString();
                    ObjStuffing.CCINDate = Result["CCINDate"].ToString();
                    ObjStuffing.SBNo = Result["SBNo"].ToString();
                    ObjStuffing.SBDate = (Result["SBDate"] == null ? "" : Result["SBDate"]).ToString();
                    ObjStuffing.InvoiceNo = (Result["InvoiceNo"] == null ? "" : Result["InvoiceNo"]).ToString();
                    ObjStuffing.CHA = (Result["CHA"] == null ? "" : Result["CHA"]).ToString();
                    ObjStuffing.Exporter = (Result["Exporter"] == null ? "" : Result["Exporter"]).ToString();
                    ObjStuffing.GodownNo = (Result["GodownNo"] == null ? "" : Result["GodownNo"]).ToString();
                    ObjStuffing.CargoType = (Result["CargoType"] == null ? "" : Result["CargoType"]).ToString();
                    ObjStuffing.NoofPkg = Convert.ToDecimal(Result["NoofPkg"] == DBNull.Value ? 0 : Result["NoofPkg"]);
                    ObjStuffing.GrossWeight = Convert.ToDecimal(Result["GrossWeight"] == DBNull.Value ? 0 : Result["GrossWeight"]);
                    ObjStuffing.FOB = Convert.ToDecimal(Result["FOB"] == DBNull.Value ? 0 : Result["FOB"]);
                    ObjStuffing.CargoInvNo = Result["CargoInvNo"].ToString();
                    ObjStuffing.CargoInvDt = Result["CargoInvDt"].ToString();
                    ObjStuffing.Country = Result["CountryName"].ToString();
                    ObjStuffing.PortDestName = Result["PortDestName"].ToString();
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        ObjStuffing.Lstshed.Add(new WFLD_ShedEntries
                        {
                            CartingDate = (Result["CartingDate"] == null ? "" : Result["CartingDate"]).ToString(),
                            GodownNo = (Result["GodownNo"] == null ? "" : Result["GodownNo"]).ToString(),
                            SpaceType = Result["SpaceType"].ToString(),
                            Area = Convert.ToDecimal(Result["Area"] == DBNull.Value ? 0 : Result["Area"]),
                            NoOfPkg = Convert.ToDecimal(Result["NoOfPkg"] == DBNull.Value ? 0 : Result["NoOfPkg"]),
                            GrossWeight = Convert.ToDecimal(Result["GrossWeight"] == DBNull.Value ? 0 : Result["GrossWeight"]),
                            ShortPkg = Convert.ToDecimal(Result["ShortPkg"] == DBNull.Value ? 0 : Result["ShortPkg"]),
                            ExcessPkg = Convert.ToDecimal(Result["ExcessPkg"] == DBNull.Value ? 0 : Result["ExcessPkg"]),
                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjStuffing;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion
        #region CCIN SLIP
        public void GetCcinEntrySlipForPrint(string ccin)
        {

            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Id", MySqlDbType = MySqlDbType.VarChar, Value = ccin });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetCargoCartedInSlipPrint", CommandType.StoredProcedure, DParam);
            VIZ_CCINPrint ObjStuffing = new VIZ_CCINPrint();
            // WFLD_ContainerStuffingDtl lstcont = new WFLD_ContainerStuffingDtl();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    ObjStuffing.CCINNO = Result["CCINNO"].ToString();
                    ObjStuffing.CCINDate = Result["CCINDate"].ToString();
                    ObjStuffing.SBNo = Result["SBNo"].ToString();
                    ObjStuffing.SBDate = (Result["SBDate"] == null ? "" : Result["SBDate"]).ToString();
                    ObjStuffing.InvoiceNo = (Result["InvoiceNo"] == null ? "" : Result["InvoiceNo"]).ToString();
                    ObjStuffing.CHA = (Result["CHA"] == null ? "" : Result["CHA"]).ToString();
                    ObjStuffing.Exporter = (Result["Exporter"] == null ? "" : Result["Exporter"]).ToString();
                    ObjStuffing.GodownNo = (Result["GodownNo"] == null ? "" : Result["GodownNo"]).ToString();
                    ObjStuffing.CargoType = (Result["CargoType"] == null ? "" : Result["CargoType"]).ToString();
                    ObjStuffing.NoofPkg = Convert.ToDecimal(Result["NoofPkg"] == DBNull.Value ? 0 : Result["NoofPkg"]);
                    ObjStuffing.GrossWeight = Convert.ToDecimal(Result["GrossWeight"] == DBNull.Value ? 0 : Result["GrossWeight"]);
                    ObjStuffing.FOB = Convert.ToDecimal(Result["FOB"] == DBNull.Value ? 0 : Result["FOB"]);
                    ObjStuffing.CargoInvNo = Result["CargoInvNo"].ToString();
                    ObjStuffing.CargoInvDt = Result["CargoInvDt"].ToString();
                    ObjStuffing.Country = Result["CountryName"].ToString();
                    ObjStuffing.PortDestName = Result["PortDestName"].ToString();
                    ObjStuffing.PackageType = Result["PackageType"].ToString();
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        ObjStuffing.Lstshed.Add(new VIZ_ShedEntries
                        {
                            CartingDate = (Result["CartingDate"] == null ? "" : Result["CartingDate"]).ToString(),
                            GodownNo = (Result["GodownNo"] == null ? "" : Result["GodownNo"]).ToString(),
                            SpaceType = Result["SpaceType"].ToString(),
                            Area = Convert.ToDecimal(Result["Area"] == DBNull.Value ? 0 : Result["Area"]),
                            NoOfPkg = Convert.ToDecimal(Result["NoOfPkg"] == DBNull.Value ? 0 : Result["NoOfPkg"]),
                            GrossWeight = Convert.ToDecimal(Result["GrossWeight"] == DBNull.Value ? 0 : Result["GrossWeight"]),
                            ShortPkg = Convert.ToDecimal(Result["ShortPkg"] == DBNull.Value ? 0 : Result["ShortPkg"]),
                            ExcessPkg = Convert.ToDecimal(Result["ExcessPkg"] == DBNull.Value ? 0 : Result["ExcessPkg"]),
                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjStuffing;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion


        #region InvoiceAdjustOnAccount
        public void GetBulkInvoiceAdjustThroughOnAcc(int OnAccountId)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_OnAccounId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(OnAccountId) });

            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetOnAccountForPrint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)


                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion

        #region SD Report For On Account
        public void GetSDReportForOnAccount(WFLD_SDReportForOnAccount vm)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(vm.PartyId) });

            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetSDReportForSD", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)


                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        public void GetSDReportForOnAccountUnpaid(WFLD_SDReportForOnAccount vm)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(vm.PartyId) });

            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetSDReportForSDUnpaid", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)


                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion


        #region Report in Excel
        public void GetReportInExcel(WFLD_ReportInExcel vm)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");

            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.VarChar, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Flag", MySqlDbType = MySqlDbType.VarChar, Value = Convert.ToString(vm.Flag) });

            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetReportinExcel", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                List<dynamic> LstExcelReport = new List<dynamic>();
                int i = 1;
                if (Result != null && Result.Tables[0].Rows.Count > 0)
                {
                    if (vm.Flag == "LCL")
                    {
                        foreach (DataRow dr in Result.Tables[0].Rows)
                        {
                            LstExcelReport.Add(new
                            {
                                SLNo = i,
                                InvNo = Convert.ToString(dr["InvoiceNo"]),
                                InvDate = Convert.ToString(dr["InvoiceDate"]),
                                CBM = Convert.ToString(dr["CBM"]),
                                TSA = Convert.ToString(dr["TSANo"]),
                                ShippingLine = Convert.ToString(dr["ShippingLineName"]),
                                CHA = Convert.ToString(dr["CHAName"]),
                                Importer = Convert.ToString(dr["ImporterName"])
                            });
                            i++;
                        }
                    }
                    else if (vm.Flag == "FCL")
                    {
                        foreach (DataRow dr in Result.Tables[0].Rows)
                        {
                            LstExcelReport.Add(new
                            {
                                SLNo = i,
                                ContainerNo = Convert.ToString(dr["ContainerNo"]),
                                InvNo = Convert.ToString(dr["InvoiceNo"]),
                                InvDate = Convert.ToString(dr["InvoiceDate"]),
                                ShippingLine = Convert.ToString(dr["ShippingLineName"]),
                                CHA = Convert.ToString(dr["CHAName"]),
                                Importer = Convert.ToString(dr["ImporterName"])
                            });
                            i++;
                        }
                    }
                    else
                    {
                        foreach (DataRow dr in Result.Tables[0].Rows)
                        {

                            LstExcelReport.Add(new
                            {
                                SLNo = i,
                                IWBNo = Convert.ToString(dr["IWBNo"]),
                                ContainerNo = Convert.ToString(dr["ContainerNo"]),
                                Size = Convert.ToString(dr["Size"]),
                                InvNo = Convert.ToString(dr["InvoiceNo"]),
                                InvDate = Convert.ToString(dr["InvoiceDate"]),
                                PartyName = Convert.ToString(dr["PartyName"]),
                                PayeeName = Convert.ToString(dr["PayeeName"]),
                                ExamType = Convert.ToString(dr["ExamType"])
                            });
                            i++;
                        }
                    }
                    Status = 1;
                }
                if (Status == 1)


                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ReportInExcel(LstExcelReport, vm);
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }

        private string ReportInExcel(List<dynamic> LstexcelData, WFLD_ReportInExcel vm)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                if (vm.Flag == "LCL")
                {
                    exl.AddCell("A1", "SL No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("B1", "Inv No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("C1", "Inv Date", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("D1", "CBM", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("E1", "TSA", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("F1", "Shipping Line", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("G1", "CHA", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("H1", "Importer", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddTable<dynamic>("A", 2, LstexcelData, new[] { 6, 20, 20, 20, 12, 20, 10, 15 });
                }
                else if (vm.Flag == "FCL")
                {
                    exl.AddCell("A1", "SL No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("B1", "Container No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("C1", "Inv No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("D1", "Inv Date", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("E1", "Shipping Line", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("F1", "CHA", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("G1", "Importer", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddTable<dynamic>("A", 2, LstexcelData, new[] { 6, 20, 20, 20, 12, 20, 10 });
                }
                else if (vm.Flag == "Export")
                {
                    exl.AddCell("A1", "SL No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("B1", "IWB No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("C1", "Container No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("D1", "Size", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("E1", "Inv No", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("F1", "Inv Date", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("G1", "Party", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("H1", "Payer", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddCell("I1", "Factory Stuffed/CWC Stuffed/On Wheel", DynamicExcel.CellAlignment.TopLeft);
                    exl.AddTable<dynamic>("A", 2, LstexcelData, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 10 });
                }



                exl.Save();
            }
            return excelFile;
        }
        #endregion


        #region Party Ledger Statement
        public void GetAllPartyForLedgerDet(string PartyCode, int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyCode", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = PartyCode });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAllPartyForLedgerStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLDPartyForOADet> LstParty = new List<WFLDPartyForOADet>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstParty.Add(new WFLDPartyForOADet
                    {
                        Party = Result["Party"].ToString(),
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyCode = Result["PartyCode"].ToString()

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstParty, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetPartyLedgerStatement(int PartyId, string Fdt, string Tdt)
        {
            int Status = 0;
            DataSet Result = new DataSet();
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_OAPartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Fdt", MySqlDbType = MySqlDbType.VarString, Value = Fdt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Tdt", MySqlDbType = MySqlDbType.VarString, Value = Tdt });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            Result = DataAccess.ExecuteDataSet("RptPartyLedgerStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            WFLDPartyLedger OAResult = new WFLDPartyLedger();
            try
            {

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    foreach (DataRow dr in Result.Tables[0].Rows)
                    {
                        OAResult.PartyName = Convert.ToString(dr["PartyName"]);
                        OAResult.PartyCode = Convert.ToString(dr["PartyCode"]);
                        OAResult.PartyGst = Convert.ToString(dr["PartyGst"]);
                        //OAResult.CompanyGst = "";//Result["CompanyGst"].ToString();
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OAResult.LstOnAccountDtl.Add(new WFLDLedgerStatementList
                        {
                            ReceiptNo = Convert.ToString(dr["ReceiptNo"]),
                            ReceivedDate = Convert.ToString(dr["ReceiptDate"]),
                            ChargeCode = Convert.ToString(dr["ChargeCode"]),
                            DepositAmt = Convert.ToDecimal(dr["CreditAmt"]),
                            Cheque_No = Convert.ToString(dr["Cheque_No"]),
                            InvAmt = Convert.ToDecimal(dr["DebitAmt"]),
                            //  Narration = Convert.ToString(dr["Narration"]),
                            ContainerNo = Convert.ToString(dr["Container_Shipping"])
                        });
                    }

                    foreach (DataRow dr in Result.Tables[2].Rows)
                    {
                        OAResult.Deposit = dr["Deposit"] == System.DBNull.Value ? 0 : Convert.ToDecimal(dr["Deposit"]);
                        OAResult.Invoice = dr["Invoice"] == System.DBNull.Value ? 0 : Convert.ToDecimal(dr["Invoice"]);
                        OAResult.Balance = dr["Balance"] == System.DBNull.Value ? 0 : Convert.ToDecimal(dr["Balance"]);
                        //OAResult.CompanyGst = "";//Result["CompanyGst"].ToString();
                    }

                    foreach (DataRow dr in Result.Tables[3].Rows)
                    {
                        OAResult.Opening = dr["Opening"] == System.DBNull.Value ? 0 : Convert.ToDecimal(dr["Opening"]);
                        //OAResult.CompanyGst = "";//Result["CompanyGst"].ToString();
                    }

                    foreach (DataRow dr in Result.Tables[4].Rows)
                    {
                        OAResult.SDBalance = dr["SDBalance"] == System.DBNull.Value ? 0 : Convert.ToDecimal(dr["SDBalance"]);
                        //OAResult.CompanyGst = "";//Result["CompanyGst"].ToString();
                    }



                    foreach (DataRow dr in Result.Tables[5].Rows)
                    {
                        OAResult.LstOnSum.Add(new WFLDSummary
                        {
                            ReceiptNo = Convert.ToString(dr["ReceiptNo"]),
                            Total = Convert.ToDecimal(dr["Total"])
                            //  Narration = Convert.ToString(dr["Narration"]),

                        });
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = OAResult;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data Found";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }





        #endregion

        #region Import Assessment Billing  Report
        public void AssessmentSheetDetail(Wfld_AssessmentSheet Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(Obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_AssType", MySqlDbType = MySqlDbType.VarChar, Size = 10, Value = Obj.AssessmentType });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("getAssessmentSheetDetails", CommandType.StoredProcedure, DParam);
            List<Wfld_AssessmentSheetDtl> lstImportConIncomeDtl = new List<Wfld_AssessmentSheetDtl>();

            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstImportConIncomeDtl.Add(new Wfld_AssessmentSheetDtl
                    {

                        AsmNo = Result["AsmNo"].ToString(),
                        AsmDate = Convert.ToString(Result["AsmDate"]),
                        ReceiptNo = Result["ReceiptNo"].ToString(),
                        ReceiptDate = Result["ReceiptDate"].ToString(),
                        OBL = Result["OBL"].ToString(),
                        TSA = Result["TSA"].ToString(),
                        AsmType = Convert.ToString(Result["AsmType"]),
                        BOE = Convert.ToString(Result["BOE"]),
                        CIF = Convert.ToDecimal(Result["CIF"]),
                        Duty = Convert.ToInt32(Result["Duty"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstImportConIncomeDtl;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region LCL Delivery Report
        public void LCLDeliveryReport(WFLD_LCLDelivery Obj)
        {
            int Status = 0;
            DateTime dtfrom = DateTime.ParseExact(Obj.AsOnDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String AsonDate = dtfrom.ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOnDate", MySqlDbType = MySqlDbType.DateTime, Value = AsonDate });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetLCLDeliveryReport", CommandType.StoredProcedure, DParam);
            List<WFLD_LCLDelivery> lstLclDelivery = new List<WFLD_LCLDelivery>();

            _DBResponse = new DatabaseResponse();
            try
            {
                int i = 1;
                while (Result.Read())
                {
                    Status = 1;

                    lstLclDelivery.Add(new WFLD_LCLDelivery
                    {
                        SlNo = Convert.ToString(i),
                        OBLNo = Convert.ToString(Result["OBLNO"]),
                        IGMNo = Convert.ToString(Result["IGM_No"]),
                        Importer = Convert.ToString(Result["ImporterName"]),
                        EntryNo = Convert.ToString(Result["CFSCode"]),
                        DSTFNO = Convert.ToString(Result["DSTFDate"]),
                        ItemNo = Convert.ToString(Result["LineNo"]),
                        Pkg = Convert.ToDecimal(Result["Pkg"]),
                        GrWt = Convert.ToDecimal(Result["WT"]),
                        Area = Convert.ToDecimal(Result["SQM"]),
                        SlotNo = Convert.ToString(Result["SlotNo"]),
                        GatePassNo = Convert.ToString(Result["GatePassNo"]),
                        GatePassDate = Convert.ToString(Result["GatePassDate"]),
                        VehicleNo = Convert.ToString(Result["VehicleNo"]),
                        ShippingLine = Convert.ToString(Result["ShippingLine"])

                    });
                    i++;

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstLclDelivery;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region
        public void MonthlyCashBookCash(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("MonthlyCashBookReportCash", CommandType.StoredProcedure, DParam);
            IList<DailyCashBookWFLD> LstDailyCashBook = new List<DailyCashBookWFLD>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstDailyCashBook.Add(new DailyCashBookWFLD
                    {

                        //    CRNo = Result["Receiptno"].ToString(),
                        ReceiptDate = Result["ReceiptDate"].ToString(),
                        //    PartyName = Result["PartyName"].ToString(),
                        //    PayeeName = Result["PayeeName"].ToString(),
                        //   ModeOfPay = Result["ModeOfPay"].ToString(),
                        //   ChqNo = Result["ChequeNo"].ToString(),
                        //   ChqDate = Result["ChequeDate"].ToString(),
                        //   ChequeBank = Result["ChequeBank"].ToString(),
                        TotalOnAccount = Result["OnAccount"].ToString(),
                        TotalPDA = Result["TotalPDA"].ToString(),
                        TotalCash = Result["TotalCash"].ToString(),
                        TotalCheque = Result["TotalCheque"].ToString(),
                        TotalOthers = Result["TotalOther"].ToString(),
                        //  Remarks = Result["Remarks"].ToString(),
                        // CRNotes = Result["CRNotes"].ToString(),

                        /* InvoiceNo = Result["InvoiceNo"].ToString(),
                         InvoiceDate = Result["InvoiceDate"].ToString(),
                         InvoiceType = Result["InvoiceType"].ToString(),
                         PartyName = Result["PartyName"].ToString(),
                         PayeeName = Result["PayeeName"].ToString(),
                         ModeOfPay = Result["ModeOfPay"].ToString(),
                         ChqNo = Result["ChequeNo"].ToString(),
                         GenSpace = Result["GenSpace"].ToString(),
                         StorageCharge = Result["sto"].ToString(),
                         Insurance = Result["Insurance"].ToString(),
                         GroundRentEmpty = Result["GroundRentEmpty"].ToString(),
                         GroundRentLoaded = Result["GroundRentLoaded"].ToString(),
                         MfCharge = Result["Mf"].ToString(),
                         EntryCharge = Result["EntCharge"].ToString(),
                         Fumigation = Result["Fum"].ToString(),
                         OtherCharge = Result["OtCharge"].ToString(),
                         Misc = Result["MISC"].ToString(),
                         Cgst = Result["CGSTAmt"].ToString(),
                         Sgst = Result["SGSTAmt"].ToString(),
                         Igst = Result["IGSTAmt"].ToString(),

                         MiscExcess = Result["MiscExcess"].ToString(),
                         TotalCash = Result["TotalCash"].ToString(),
                         TotalCheque = Result["TotalCheque"].ToString(),
                         TotalOthers = Result["TotalOther"].ToString(),
                         Tds = Result["tdsCol"].ToString(),
                         CrTds = Result["crTDS"].ToString(),
                         TotalPDA = Result["TotalPDA"].ToString(),
                         Remarks = Result["Remarks"].ToString(),*/


                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDailyCashBook;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Import loaded container out register
        public void ImportLoadedContainerOutRegister(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getImpLoadContOutRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion


        #region CartingCargoReport
        public void GetCartingCargoReport(WFLD_CartingCargoReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetCartingCargoReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_CartingCargoReport> lstCartingCargoReport = new List<WFLD_CartingCargoReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    lstCartingCargoReport.Add(new WFLD_CartingCargoReport
                    {
                        EntryNo = Convert.ToString(Result["EntryNo"]),
                        ExpCod = Convert.ToString(Result["ExpCD"]),
                        FOB = Convert.ToDecimal(Result["FOB"]),
                        GrWT = Convert.ToDecimal(Result["Weigth"]),
                        Truck = Convert.ToString(Result["TruckNo"]),
                        InDate = Convert.ToString(Result["EntryDate"]),
                        NoOfPkg = Convert.ToDecimal(Result["NoofPkg"]),
                        SBDate = Convert.ToString(Result["SBDate"]),
                        SBNo = Convert.ToString(Result["SBNo"])


                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstCartingCargoReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region ExportLoadedContainerOutRegisterReport
        public void ExportLoadedContainerOutRegisterReport(WFLD_ExportLoadedContainerOutReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ExportLoadedContainerOutRegisterReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_ExportLoadedContainerOutReport> LstLoadContainerOutReport = new List<WFLD_ExportLoadedContainerOutReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstLoadContainerOutReport.Add(new WFLD_ExportLoadedContainerOutReport
                    {
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        Forwarder = Convert.ToString(Result["ShippingLine"]),
                        GatePassNo = Convert.ToString(Result["GatePassNo"]),
                        MoveNo = Convert.ToString(Result["MoveNo"]),
                        InDate = Convert.ToString(Result["InDate"]),
                        OutDate = Convert.ToString(Result["OutDate"]),
                        PartyName = Convert.ToString(Result["PartyName"]),
                        POD = Convert.ToString(Result["POD"]),
                        VehicleNo = Convert.ToString(Result["VehicleNo"]),
                        ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                        Size = Convert.ToString(Result["Size"])
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstLoadContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region OnWheelLoadedContainerOutRegisterReport
        public void OnWheelLoadedContainerOutRegisterReport(WFLD_ExportLoadedContainerOutReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("OnWeelLoadedContainerOutRegisterReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_ExportLoadedContainerOutReport> LstLoadContainerOutReport = new List<WFLD_ExportLoadedContainerOutReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstLoadContainerOutReport.Add(new WFLD_ExportLoadedContainerOutReport
                    {
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        Forwarder = Convert.ToString(Result["ShippingLine"]),
                        GatePassNo = Convert.ToString(Result["GatePassNo"]),
                        MoveNo = Convert.ToString(Result["MoveNo"]),
                        InDate = Convert.ToString(Result["InDate"]),
                        OutDate = Convert.ToString(Result["OutDate"]),
                        PartyName = Convert.ToString(Result["PartyName"]),
                        POD = Convert.ToString(Result["POD"]),
                        VehicleNo = Convert.ToString(Result["VehicleNo"]),
                        ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                        Size = Convert.ToString(Result["Size"]),
                        Movement = Convert.ToString(Result["Movement"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstLoadContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region FACTORY STUFFED LOADED CONTAINER OUT REGISTER
        public void FactoryLoadedContainerOutRegisterReport(WFLD_ExportLoadedContainerOutReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("FactoryLoadedContainerOutRegisterReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_ExportLoadedContainerOutReport> LstLoadContainerOutReport = new List<WFLD_ExportLoadedContainerOutReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstLoadContainerOutReport.Add(new WFLD_ExportLoadedContainerOutReport
                    {
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        Forwarder = Convert.ToString(Result["ShippingLine"]),
                        GatePassNo = Convert.ToString(Result["GatePassNo"]),
                        MoveNo = Convert.ToString(Result["MoveNo"]),
                        InDate = Convert.ToString(Result["InDate"]),
                        OutDate = Convert.ToString(Result["OutDate"]),
                        PartyName = Convert.ToString(Result["PartyName"]),
                        POD = Convert.ToString(Result["POD"]),
                        VehicleNo = Convert.ToString(Result["VehicleNo"]),
                        ReceiptNo = Convert.ToString(Result["ReceiptNo"]),
                        Size = Convert.ToString(Result["Size"]),
                        Movement = Convert.ToString(Result["Movement"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstLoadContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Bond cargo report
        public void BondCargoReport(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getBondCargoRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region Load container in yard
        public void LoadContainerInYard(string AsOnDate, string Module)
        {
            AsOnDate = DateTime.ParseExact(AsOnDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Dt", MySqlDbType = MySqlDbType.DateTime, Value = AsOnDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ImpExp", MySqlDbType = MySqlDbType.String, Value = Module.ToUpper() });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getLoadContainerInYardRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion
        #region Empty Container In Register
        public void EmptyContainerInRegister(WFLD_EmpContReg ObjEmp)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjEmp.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjEmp.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("EmptyContainerInRegister", CommandType.StoredProcedure, DParam);
            //WFLD_EmpContReg ObjEmp = new WFLD_EmpContReg();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();

            //ObjStatusDtl = new ConsumerList();
            //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
            //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
            //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
            //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


            //                 InvoiceDate DATE,
            //         InvoiceNumber       VARCHAR(30),
            //ReceiptAmount DECIMAL(18, 3),
            //InvoiceAmount DECIMAL(18, 3),
            //Value DECIMAL(18, 3),
            //OpeningBalance DECIMAL(18, 3),
            //ClosingBalance DECIMAL(18, 3)
            try
            {
                while (Result.Read())
                {

                    ObjEmp.mstcompany = Result["CompanyAddress"].ToString();

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;
                        ObjEmp.LstEmpty.Add(new WFLD_EmpContReg.WFLD_EmpCont
                        {
                            // SlNo = Convert.ToInt32(Result["Sno"]),
                            ContainerNo = Result["ContainerNo"].ToString(),
                            Size = Result["Size"].ToString(),
                            ShippingLine = Result["ShippingLine"].ToString(),
                            DateOfArrival = Result["InDate"].ToString(),
                            CFSCode = Result["CFSCode"].ToString(),
                            //ImportExport = Result["OperationType"].ToString(),
                            Status = Result["Status"].ToString(),
                            VehicleNo = Result["VehicleNo"].ToString(),
                            Remarks = Result["Remarks"].ToString(),
                            TransPort = Result["TransPortMode"].ToString(),
                            ContainerClass = Result["ContClass"].ToString(),


                            //    });
                        });
                    }
                }
                //        LstStatementOfEmptyContainer.Add(new Dnd_EmpContReg
                //    {
                //        SlNo =Convert.ToInt32( Result["Sno"]),
                //        ContainerNo = Result["ContainerNo"].ToString(),
                //        Size = Result["Size"].ToString(),
                //        ShippingLine = Result["ShippingLine"].ToString(),
                //        DateOfArrival = Result["InDate"].ToString(),
                //        CFSCode= Result["CFSCode"].ToString(),
                //        //ImportExport = Result["OperationType"].ToString(),
                //        Status= Result["Status"].ToString(),
                //        VehicleNo = Result["VehicleNo"].ToString(),
                //        Remarks = Result["Remarks"].ToString(),
                //        TransPort = Result["TransPortMode"].ToString(),
                //        ContainerClass= Result["ContClass"].ToString(),

                //        //  dateofdetuffing = Result["DateOFDestuffing"] == DBNull.Value ? "" : Result["DateOFDestuffing"].ToString()

                //        // Withdraw = Result["Withdraw"].ToString()//OperationType

                //    });
                //}

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjEmp;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region FACTORY STUFFED LOADED CONTAINER IN REGISTER
        public void FactoryContainerInRegisterReport(WFLD_FacConReg vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("FactoryContainerInRegister", CommandType.StoredProcedure, DParam);
            IList<WFLD_FacConReg> LstLoadContainerOutReport = new List<WFLD_FacConReg>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstLoadContainerOutReport.Add(new WFLD_FacConReg
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        DateOfArrival = Result["InDate"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        Status = Result["Status"].ToString(),
                        VehicleNo = Result["VehicleNo"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        //TransPort = Result["TransPortMode"].ToString(),
                        ContainerClass = Result["ContClass"].ToString(),

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstLoadContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region EMPTY CONTAINER OUT REGISTER
        public void EmptyContainerOutRegister(WFLD_EmptyContainerOutRegister vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "pFromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "pToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetEmptyContainerOutRegisterReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_EmptyContainerOutRegister> lstEmptyContainerOutRegister = new List<WFLD_EmptyContainerOutRegister>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    lstEmptyContainerOutRegister.Add(new WFLD_EmptyContainerOutRegister
                    {
                        CFSCode = Convert.ToString(Result["CFSCode"]),
                        ContainerNo = Convert.ToString(Result["ContainerNo"]),
                        Despatchedtogate = Convert.ToString(Result["Despatchedgate"]),
                        DODate = Convert.ToString(Result["DODate"]),
                        OutDate = Convert.ToString(Result["OutDate"]),
                        InDate = Convert.ToString(Result["InDate"]),
                        RoadRail = Convert.ToString(Result["RoadRail"]),
                        Size = Convert.ToString(Result["Size"]),
                        SlaCd = Convert.ToString(Result["SLACode"]),
                        Road = Convert.ToString(Result["Road"])


                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstEmptyContainerOutRegister;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region ODC CONTAINER IN REGISTER
        public void OdcContainerInRegister(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getODCContInRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region ONWHEEL CONTAINER IN REGISTER
        public void OnWheelContainerInRegister(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getOnWheelContInRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region IMPORT LOADED CONTAINER IN REGISTER
        public void ImportLoadedContainerInRegister(WFLD_ImportLoadedContainerRegister vm)
        {
            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("getImpLoadContInRpt", CommandType.StoredProcedure, DParam);
            List<WFLD_ImportLoadedContainerRegister> lstStockRegisterReport = new List<WFLD_ImportLoadedContainerRegister>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_ImportLoadedContainerRegister
                    {
                        CFSCode = Convert.ToString(dr["CFSCode"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        EntryDateTime = Convert.ToString(dr["EntryDateTime"]),
                        Size = Convert.ToString(dr["Size"]),
                        Sline = Convert.ToString(dr["Sline"]),
                        Forwarder = Convert.ToString(dr["Forwarder"]),
                        Origin = Convert.ToString(dr["Origin"]),
                        VehicleNo = Convert.ToString(dr["VehicleNo"]),
                        Remarks = Convert.ToString(dr["Remarks"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }


        }
        #endregion
        #region EMPTY CONTAINER IN YARD
        public void EmptyContainerInYard(WFLD_EmpConYard vm)
        {
            string dtASON = Convert.ToDateTime(vm.PeriodFrom).ToString("yyyy-MM-dd HH:mm:ss");
            //DateTime dtfrom = DateTime.ParseExact(vm.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            //DateTime dtTo = DateTime.ParseExact(vm.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = dtASON });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("EmptyContainerInYard", CommandType.StoredProcedure, DParam);
            IList<WFLD_EmpConYard> LstLoadContainerOutReport = new List<WFLD_EmpConYard>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstLoadContainerOutReport.Add(new WFLD_EmpConYard
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        SlaCd = Result["SlaCd"].ToString(),
                        InDate = Result["InDate"].ToString(),
                        CFSCode = Result["EntryNo"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        InDateEcy = Result["DateOFDestuffing"].ToString(),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstLoadContainerOutReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Total Bond In final
        public void TotalBondInFinal(WFLD_TotalBond vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("TotalBondinFinal", CommandType.StoredProcedure, DParam);
            IList<WFLD_TotalBond> LstTotalBond = new List<WFLD_TotalBond>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;


                    LstTotalBond.Add(new WFLD_TotalBond
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        TransportMode = Result["TransportMode"].ToString(),
                        EntryDateTime = Result["EntryDateTime"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        ContClass = Result["ContClass"].ToString(),
                        Remarks = Result["Remarks"].ToString(),
                        VehicleNo = Result["VehicleNo"].ToString(),
                        ShippingLine = Result["ShippingLine"].ToString(),
                        ContainerType = Result["ContainerType"].ToString()
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstTotalBond;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region EMPTY CONTAINER SLA WISE REPORT
        public void EmptyContainerSLAWiseReport(string FromDate, string Module)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Dt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ImpExp", MySqlDbType = MySqlDbType.VarChar, Value = Module });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getEmptyContSLAWiseRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region BACK TO TOWN REPORT
        public void BackToTownReport(string FromDate, string ToDate)
        {
            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getBTTRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region Monthly Cash Book Summary
        public void MonthlyCashBookSummary(DailyCashBookWFLD ObjDailyCashBook)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjDailyCashBook.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjDailyCashBook.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("MonthlyCashBookReportSummary", CommandType.StoredProcedure, DParam);
            // IList<DailyCashBookWFLD> LstDailyCashBook = new List<DailyCashBookWFLD>();

            WFLDCashSummaryMonthly CashObj = new WFLDCashSummaryMonthly();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    CashObj.OpeningCash = Convert.ToDecimal(Result["OpeningCash"].ToString());
                    CashObj.OpeningChq = Convert.ToDecimal(Result["OpeningChq"].ToString());
                }

                if (Result.NextResult())
                {

                    while (Result.Read())
                    {
                        CashObj.MonthDetails.Add(new CashMonthlySum
                        {

                            ReceiptDate = Result["ReceiptDate"].ToString(),
                            TotalCash = Convert.ToDecimal(Result["TotalCash"].ToString()),
                            TotalCheque = Convert.ToDecimal(Result["TotalCheque"].ToString()),
                            Bank = Convert.ToDecimal(Result["Bank"].ToString()),
                            CashDeposit = Convert.ToDecimal(Result["CashDeposit"].ToString()),
                            ChqDeposit = Convert.ToDecimal(Result["ChqDeposit"].ToString()),
                            BankDeposit = Convert.ToDecimal(Result["BankDeposit"].ToString()),



                        });
                    }



                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = CashObj;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion
        #region Daily Cheque/DD Report
        public void GetDailyChqDDReport(WFLDChequeDD objPV)
        {

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_ReceiptDate", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(objPV.ReceiptDate).ToString("yyyy-MM-dd") });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DailyChequeDDReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            IList<ChqDDDtl> ChqDetails = new List<ChqDDDtl>();
            try
            {
                while (Result.Read())
                {
                    objPV.AccountNumber = Result["AccountNo"].ToString();
                    objPV.CompanyAddress = Result["Company"].ToString();
                    objPV.EmailAddress = Result["Email"].ToString();

                }

                if (Result.NextResult())
                {

                    while (Result.Read())
                    {
                        Status = 1;
                        objPV.ChqDetails.Add(new ChqDDDtl
                        {
                            PartyName = Result["PartyName"].ToString(),
                            ChqNo = Result["ChequeNo"].ToString(),
                            BankName = Result["BankName"].ToString(),
                            Amount = Convert.ToDecimal(Result["Amount"])
                        });
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        //public void GetCertificateForPreview(String InvoiceNo)
        //{
        //    List<MySqlParameter> LstParam = new List<MySqlParameter>();
        //    LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Value = InvoiceNo });
        //    IDataParameter[] DParam = LstParam.ToArray();
        //    DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
        //    IDataReader Result = DA.ExecuteDataReader("GetFumigationCertificate", CommandType.StoredProcedure, DParam);
        //    DSRPestCertificate ObjIssueSlip = new DSRPestCertificate();
        //    _DBResponse = new DatabaseResponse();
        //    int Status = 0;
        //    try
        //    {
        //        while (Result.Read())
        //        {
        //            Status = 1;
        //            ObjIssueSlip.CertificateNo = Result["CertificateNo"].ToString();
        //            ObjIssueSlip.IssueDate = Result["IssueDate"].ToString();
        //            ObjIssueSlip.GoodsDesc = Result["GoodsDesc"].ToString();
        //            ObjIssueSlip.Quantity = Result["Quantity"].ToString();
        //            ObjIssueSlip.DistingMarks = Result["DistingMarks"].ToString();
        //            ObjIssueSlip.ContainerNo = Result["ContainerNo"].ToString();
        //            ObjIssueSlip.PortLoading = Result["PortLoading"].ToString();
        //            ObjIssueSlip.NameOfVessel = Result["NameOfVessel"].ToString();
        //            ObjIssueSlip.Destination = Result["Destination"].ToString();
        //            ObjIssueSlip.Exporter = Result["Exporter"].ToString();
        //            ObjIssueSlip.Consignee = Result["Consignee"].ToString();
        //            ObjIssueSlip.NameOfFumigant = Result["NameOfFumigant"].ToString();
        //            ObjIssueSlip.DateOfFumi = Result["DateOfFumi"].ToString();
        //            ObjIssueSlip.Place = Result["Place"].ToString();
        //            ObjIssueSlip.Dosage = Result["Dosage"].ToString();
        //            ObjIssueSlip.Duration = Result["Duration"].ToString();
        //            ObjIssueSlip.Temp = Result["Temp"].ToString();
        //            ObjIssueSlip.GasTight = Result["GasTight"].ToString();
        //        }

        //        if (Status == 1)
        //        {
        //            _DBResponse.Data = ObjIssueSlip;
        //            _DBResponse.Status = 1;
        //            _DBResponse.Message = "Success";
        //        }
        //        else
        //        {
        //            _DBResponse.Data = null;
        //            _DBResponse.Status = 0;
        //            _DBResponse.Message = "No Data";
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _DBResponse.Data = null;
        //        _DBResponse.Status = -1;
        //        _DBResponse.Message = "Error";
        //    }
        //    finally
        //    {
        //        Result.Dispose();
        //        Result.Close();
        //    }
        //}



        public void GetAllDepositDate()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //    LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            IDataParameter[] DParam = { };
            //  DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetDepositDateforDailyDDReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<DepositDtl> LstDeposit = new List<DepositDtl>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstDeposit.Add(new DepositDtl

                    {
                        Id = Convert.ToInt32(Result["Id"]),
                        DepositDateValue = Result["DepositDate"].ToString()

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDeposit;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetAllReceiptDate()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //    LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            IDataParameter[] DParam = { };
            //  DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetReceiptDateforDailyDDReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<ReceiptDtl> LstReceipt = new List<ReceiptDtl>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstReceipt.Add(new ReceiptDtl
                    {
                        ReceiptDateValue = Result["ReceivedDate"].ToString(),
                        DepositDate = Result["DepositDate"].ToString()

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstReceipt;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion
        #region TSA QUERY
        public void ListOfICEGateTSANo(string SearchBy, string TSANo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_TSANo", MySqlDbType = MySqlDbType.VarChar, Value = TSANo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            lstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.VarChar, Value = SearchBy });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetTSANoForOBLSearch", CommandType.StoredProcedure, Dparam);
            IList<OBLNoForPage> LstObl = new List<OBLNoForPage>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstObl.Add(new OBLNoForPage
                    {
                        OBLNo = Result["OBLNo"].ToString(),
                        TSANo = Result["TSANo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstObl, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }
        public void GetICEGateTSADetail(string TSANo, string OBLNo, string SearchBy)
        {
            //DateTime dtobl = DateTime.ParseExact(obldate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string obldt = dtobl.ToString("yyyy/MM/dd");
            DataSet Result = new DataSet();
            int Status = 0;
            try
            {
                //DateTime dt = DateTime.ParseExact(IGM_Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                IDataParameter[] DParam = { };
                List<MySqlParameter> LstParam = new List<MySqlParameter>();
                DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
                LstParam.Add(new MySqlParameter { ParameterName = "In_TSANo", MySqlDbType = MySqlDbType.String, Value = TSANo });
                LstParam.Add(new MySqlParameter { ParameterName = "In_OBLNo", MySqlDbType = MySqlDbType.String, Value = OBLNo });
                // LstParam.Add(new MySqlParameter { ParameterName = "In_OBLDate", MySqlDbType = MySqlDbType.DateTime, Value = obldt });
                LstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.String, Value = SearchBy });
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("TSAQuery", CommandType.StoredProcedure, DParam);

                _DBResponse = new DatabaseResponse();

                WFLD_TSAQuery objOBLEntry = new WFLD_TSAQuery();

                //List<OblEntryDetails> OblEntryDetailsList = new List<OblEntryDetails>();

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    if (Result.Tables[0].Rows.Count > 0)
                    {
                        objOBLEntry.OBL_No = Convert.ToString(Result.Tables[0].Rows[0]["OBL_NO"]);
                        objOBLEntry.OBL_Date = Convert.ToString(Result.Tables[0].Rows[0]["OBL_DATE"]);
                        objOBLEntry.IGM_No = Convert.ToString(Result.Tables[0].Rows[0]["IGM_NO"]);
                        objOBLEntry.IGM_Date = Convert.ToString(Result.Tables[0].Rows[0]["IGM_DATE"]);
                        objOBLEntry.TPNo = Convert.ToString(Result.Tables[0].Rows[0]["TP_NO"]);
                        objOBLEntry.TPDate = Convert.ToString(Result.Tables[0].Rows[0]["TP_DATE"]);
                        objOBLEntry.MovementType = Convert.ToString(Result.Tables[0].Rows[0]["MovementType"]);
                        objOBLEntry.PortId = Convert.ToInt32(Result.Tables[0].Rows[0]["PortId"]);
                        objOBLEntry.LineNo = Convert.ToString(Result.Tables[0].Rows[0]["LINE_NO"].ToString());
                        objOBLEntry.CargoDescription = Convert.ToString(Result.Tables[0].Rows[0]["CargoDescription"]);
                        objOBLEntry.NoOfPkg = Convert.ToString(Result.Tables[0].Rows[0]["NO_PKG"]);
                        objOBLEntry.PkgType = Convert.ToString(Result.Tables[0].Rows[0]["PKG_TYPE"]);
                        objOBLEntry.GR_WT = Convert.ToDecimal(Result.Tables[0].Rows[0]["GR_WT"]);
                        objOBLEntry.ImporterId = Convert.ToInt32(Result.Tables[0].Rows[0]["ImporterId"]);
                        objOBLEntry.ImporterName = Convert.ToString(Result.Tables[0].Rows[0]["ImporterName"]);
                        objOBLEntry.ImporterAddress = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress"]);
                        objOBLEntry.ImporterAddress1 = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress1"]);
                        objOBLEntry.CargoType = Convert.ToInt32(Result.Tables[0].Rows[0]["CargoType"]);
                        objOBLEntry.SMTPNo = Convert.ToString(Result.Tables[0].Rows[0]["SMTPNo"]);
                        objOBLEntry.TSANo = Convert.ToString(Result.Tables[0].Rows[0]["TSANo"]);
                        objOBLEntry.TSADate = Convert.ToString(Result.Tables[0].Rows[0]["TSADate"]);
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OBLWiseContainerEntryDetails objOBLEntryDetails = new OBLWiseContainerEntryDetails();
                        objOBLEntryDetails.ShippingLineName = Convert.ToString(dr["ShippingLineName"]);
                        objOBLEntry.ShippingLine = objOBLEntryDetails.ShippingLineName;
                        objOBLEntryDetails.ShippingLineId = Convert.ToInt32(dr["ShippingLineId"]);
                        objOBLEntryDetails.ContainerSize = Convert.ToString(dr["ContainerSize"]);
                        objOBLEntryDetails.ContainerNo = Convert.ToString(dr["ContainerNo"]);
                        objOBLEntryDetails.NoOfPkg = Convert.ToString(dr["NO_PKG"]);
                        objOBLEntryDetails.GR_WT = Convert.ToDecimal(dr["GR_WT"]);
                        objOBLEntry.OblEntryDetailsList.Add(objOBLEntryDetails);
                    }

                    if (Result.Tables[2].Rows.Count > 0)
                    {
                        objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        objOBLEntry.DestuffingDate = Convert.ToString(Result.Tables[2].Rows[0]["DestuffDate"]);
                        objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        // objOBLEntry.DestuffingDate = Convert.ToString(Result.Tables[2].Rows[0]["DestuffDate"]);
                        //objOBLEntry.InvNo = Convert.ToString(Result.Tables[2].Rows[0]["Invoiceno"]);
                        //objOBLEntry.InvDate = Convert.ToString(Result.Tables[2].Rows[0]["InvoiceDate"]);
                        //objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[2].Rows[0]["GatePassNo"]);
                        //objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[2].Rows[0]["GatePassDateTime"].ToString());
                        //objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[2].Rows[0]["GateExitNo"]);
                        //objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[2].Rows[0]["GateExitDateTime"].ToString());
                    }
                    if (Result.Tables[3].Rows.Count > 0)
                    {
                        //objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        //objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        //objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        //objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        //objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        objOBLEntry.InvNo = Convert.ToString(Result.Tables[3].Rows[0]["Invoiceno"]);
                        objOBLEntry.InvDate = Convert.ToString(Result.Tables[3].Rows[0]["InvoiceDate"]);
                        objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[3].Rows[0]["GatePassNo"]);
                        objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[3].Rows[0]["GatePassDateTime"].ToString());
                        objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[3].Rows[0]["GateExitNo"]);
                        objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[3].Rows[0]["GateExitDateTime"].ToString());
                    }
                }

                if (Status == 1)
                {
                    //if (OblEntryDetailsList.Count > 0)
                    //{
                    //    objOBLEntry.StringifiedText = Newtonsoft.Json.JsonConvert.SerializeObject(OblEntryDetailsList);
                    //}

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objOBLEntry;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion
        #region LINE/ITEM No  QUERY
        public void ListOfICEGateLineNo(string SearchBy, string LINENo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_LineNo", MySqlDbType = MySqlDbType.VarChar, Value = LINENo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            lstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.VarChar, Value = SearchBy });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetLineNoForOBLSearch", CommandType.StoredProcedure, Dparam);
            IList<OBLNoForPage> LstObl = new List<OBLNoForPage>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstObl.Add(new OBLNoForPage
                    {
                        OBLNo = Result["OBLNo"].ToString(),
                        LINENo = Result["LINENo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstObl, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }
        public void GetICEGateLineDetail(string LINENo, string OBLNo, string SearchBy)
        {
            //DateTime dtobl = DateTime.ParseExact(obldate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string obldt = dtobl.ToString("yyyy/MM/dd");
            DataSet Result = new DataSet();
            int Status = 0;
            try
            {
                //DateTime dt = DateTime.ParseExact(IGM_Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                IDataParameter[] DParam = { };
                List<MySqlParameter> LstParam = new List<MySqlParameter>();
                DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
                LstParam.Add(new MySqlParameter { ParameterName = "In_LINENo", MySqlDbType = MySqlDbType.String, Value = LINENo });
                LstParam.Add(new MySqlParameter { ParameterName = "In_OBLNo", MySqlDbType = MySqlDbType.String, Value = OBLNo });
                // LstParam.Add(new MySqlParameter { ParameterName = "In_OBLDate", MySqlDbType = MySqlDbType.DateTime, Value = obldt });
                LstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.String, Value = SearchBy });
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("LINEQuery", CommandType.StoredProcedure, DParam);

                _DBResponse = new DatabaseResponse();

                WFLD_LINEQuery objOBLEntry = new WFLD_LINEQuery();

                //List<OblEntryDetails> OblEntryDetailsList = new List<OblEntryDetails>();

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    if (Result.Tables[0].Rows.Count > 0)
                    {
                        objOBLEntry.OBL_No = Convert.ToString(Result.Tables[0].Rows[0]["OBL_NO"]);
                        objOBLEntry.OBL_Date = Convert.ToString(Result.Tables[0].Rows[0]["OBL_DATE"]);
                        objOBLEntry.IGM_No = Convert.ToString(Result.Tables[0].Rows[0]["IGM_NO"]);
                        objOBLEntry.IGM_Date = Convert.ToString(Result.Tables[0].Rows[0]["IGM_DATE"]);
                        objOBLEntry.TPNo = Convert.ToString(Result.Tables[0].Rows[0]["TP_NO"]);
                        objOBLEntry.TPDate = Convert.ToString(Result.Tables[0].Rows[0]["TP_DATE"]);
                        objOBLEntry.MovementType = Convert.ToString(Result.Tables[0].Rows[0]["MovementType"]);
                        objOBLEntry.PortId = Convert.ToInt32(Result.Tables[0].Rows[0]["PortId"]);
                        objOBLEntry.LineNo = Convert.ToString(Result.Tables[0].Rows[0]["LINE_NO"].ToString());
                        objOBLEntry.CargoDescription = Convert.ToString(Result.Tables[0].Rows[0]["CargoDescription"]);
                        objOBLEntry.NoOfPkg = Convert.ToString(Result.Tables[0].Rows[0]["NO_PKG"]);
                        objOBLEntry.PkgType = Convert.ToString(Result.Tables[0].Rows[0]["PKG_TYPE"]);
                        objOBLEntry.GR_WT = Convert.ToDecimal(Result.Tables[0].Rows[0]["GR_WT"]);
                        objOBLEntry.ImporterId = Convert.ToInt32(Result.Tables[0].Rows[0]["ImporterId"]);
                        objOBLEntry.ImporterName = Convert.ToString(Result.Tables[0].Rows[0]["ImporterName"]);
                        objOBLEntry.ImporterAddress = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress"]);
                        objOBLEntry.ImporterAddress1 = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress1"]);
                        objOBLEntry.CargoType = Convert.ToInt32(Result.Tables[0].Rows[0]["CargoType"]);
                        objOBLEntry.SMTPNo = Convert.ToString(Result.Tables[0].Rows[0]["SMTPNo"]);
                        objOBLEntry.TSANo = Convert.ToString(Result.Tables[0].Rows[0]["TSANo"]);
                        objOBLEntry.TSADate = Convert.ToString(Result.Tables[0].Rows[0]["TSADate"]);
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OBLWiseContainerEntryDetails objOBLEntryDetails = new OBLWiseContainerEntryDetails();
                        objOBLEntryDetails.ShippingLineName = Convert.ToString(dr["ShippingLineName"]);
                        objOBLEntry.ShippingLine = objOBLEntryDetails.ShippingLineName;
                        objOBLEntryDetails.ShippingLineId = Convert.ToInt32(dr["ShippingLineId"]);
                        objOBLEntryDetails.ContainerSize = Convert.ToString(dr["ContainerSize"]);
                        objOBLEntryDetails.ContainerNo = Convert.ToString(dr["ContainerNo"]);
                        objOBLEntryDetails.NoOfPkg = Convert.ToString(dr["NO_PKG"]);
                        objOBLEntryDetails.GR_WT = Convert.ToDecimal(dr["GR_WT"]);
                        objOBLEntry.OblEntryDetailsList.Add(objOBLEntryDetails);
                    }


                    if (Result.Tables[2].Rows.Count > 0)
                    {
                        objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        //objOBLEntry.InvNo = Convert.ToString(Result.Tables[2].Rows[0]["Invoiceno"]);
                        //objOBLEntry.InvDate = Convert.ToString(Result.Tables[2].Rows[0]["InvoiceDate"]);
                        //objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[2].Rows[0]["GatePassNo"]);
                        //objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[2].Rows[0]["GatePassDateTime"].ToString());
                        //objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[2].Rows[0]["GateExitNo"]);
                        //objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[2].Rows[0]["GateExitDateTime"].ToString());
                    }
                    if (Result.Tables[3].Rows.Count > 0)
                    {
                        //objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        //objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        //objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        //objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        //objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        objOBLEntry.InvNo = Convert.ToString(Result.Tables[3].Rows[0]["Invoiceno"]);
                        objOBLEntry.InvDate = Convert.ToString(Result.Tables[3].Rows[0]["InvoiceDate"]);
                        objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[3].Rows[0]["GatePassNo"]);
                        objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[3].Rows[0]["GatePassDateTime"].ToString());
                        objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[3].Rows[0]["GateExitNo"]);
                        objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[3].Rows[0]["GateExitDateTime"].ToString());
                    }
                }

                if (Status == 1)
                {
                    //if (OblEntryDetailsList.Count > 0)
                    //{
                    //    objOBLEntry.StringifiedText = Newtonsoft.Json.JsonConvert.SerializeObject(OblEntryDetailsList);
                    //}

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objOBLEntry;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion
        #region BOE No  QUERY
        public void ListOfICEGateBOENo(string SearchBy, string OBLNo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_BOENo", MySqlDbType = MySqlDbType.VarChar, Value = OBLNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            lstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.VarChar, Value = SearchBy });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetBOENoForOBLSearch", CommandType.StoredProcedure, Dparam);
            IList<OBLNoForPage> LstObl = new List<OBLNoForPage>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstObl.Add(new OBLNoForPage
                    {
                        OBLNo = Result["OBLNo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstObl, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }
        public void GetICEGateBOEDetail(string OBLNo, string SearchBy)
        {
            //DateTime dtobl = DateTime.ParseExact(obldate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string obldt = dtobl.ToString("yyyy/MM/dd");
            DataSet Result = new DataSet();
            int Status = 0;
            try
            {
                //DateTime dt = DateTime.ParseExact(IGM_Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                IDataParameter[] DParam = { };
                List<MySqlParameter> LstParam = new List<MySqlParameter>();
                DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
                LstParam.Add(new MySqlParameter { ParameterName = "In_OBLNo", MySqlDbType = MySqlDbType.String, Value = OBLNo });
                // LstParam.Add(new MySqlParameter { ParameterName = "In_OBLDate", MySqlDbType = MySqlDbType.DateTime, Value = obldt });
                LstParam.Add(new MySqlParameter { ParameterName = "In_SearchBy", MySqlDbType = MySqlDbType.String, Value = SearchBy });
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("BOEQuery", CommandType.StoredProcedure, DParam);

                _DBResponse = new DatabaseResponse();

                WFLD_BOEQuery objOBLEntry = new WFLD_BOEQuery();

                //List<OblEntryDetails> OblEntryDetailsList = new List<OblEntryDetails>();

                if (Result != null && Result.Tables.Count > 0)
                {
                    Status = 1;
                    if (Result.Tables[0].Rows.Count > 0)
                    {
                        objOBLEntry.OBL_No = Convert.ToString(Result.Tables[0].Rows[0]["OBL_NO"]);
                        objOBLEntry.OBL_Date = Convert.ToString(Result.Tables[0].Rows[0]["OBL_DATE"]);
                        objOBLEntry.IGM_No = Convert.ToString(Result.Tables[0].Rows[0]["IGM_NO"]);
                        objOBLEntry.IGM_Date = Convert.ToString(Result.Tables[0].Rows[0]["IGM_DATE"]);
                        objOBLEntry.TPNo = Convert.ToString(Result.Tables[0].Rows[0]["TP_NO"]);
                        objOBLEntry.TPDate = Convert.ToString(Result.Tables[0].Rows[0]["TP_DATE"]);
                        objOBLEntry.MovementType = Convert.ToString(Result.Tables[0].Rows[0]["MovementType"]);
                        objOBLEntry.PortId = Convert.ToInt32(Result.Tables[0].Rows[0]["PortId"]);
                        objOBLEntry.LineNo = Convert.ToString(Result.Tables[0].Rows[0]["LINE_NO"].ToString());
                        objOBLEntry.CargoDescription = Convert.ToString(Result.Tables[0].Rows[0]["CargoDescription"]);
                        objOBLEntry.NoOfPkg = Convert.ToString(Result.Tables[0].Rows[0]["NO_PKG"]);
                        objOBLEntry.PkgType = Convert.ToString(Result.Tables[0].Rows[0]["PKG_TYPE"]);
                        objOBLEntry.GR_WT = Convert.ToDecimal(Result.Tables[0].Rows[0]["GR_WT"]);
                        objOBLEntry.ImporterId = Convert.ToInt32(Result.Tables[0].Rows[0]["ImporterId"]);
                        objOBLEntry.ImporterName = Convert.ToString(Result.Tables[0].Rows[0]["ImporterName"]);
                        objOBLEntry.ImporterAddress = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress"]);
                        objOBLEntry.ImporterAddress1 = Convert.ToString(Result.Tables[0].Rows[0]["ImporterAddress1"]);
                        objOBLEntry.CargoType = Convert.ToInt32(Result.Tables[0].Rows[0]["CargoType"]);
                        objOBLEntry.SMTPNo = Convert.ToString(Result.Tables[0].Rows[0]["SMTPNo"]);
                        objOBLEntry.TSANo = Convert.ToString(Result.Tables[0].Rows[0]["TSANo"]);
                        objOBLEntry.TSADate = Convert.ToString(Result.Tables[0].Rows[0]["TSADate"]);
                        objOBLEntry.BOEDate = Convert.ToString(Result.Tables[0].Rows[0]["BOEDate"]);
                    }

                    foreach (DataRow dr in Result.Tables[1].Rows)
                    {
                        OBLWiseContainerEntryDetails objOBLEntryDetails = new OBLWiseContainerEntryDetails();
                        objOBLEntryDetails.ShippingLineName = Convert.ToString(dr["ShippingLineName"]);
                        objOBLEntry.ShippingLine = objOBLEntryDetails.ShippingLineName;
                        objOBLEntryDetails.ShippingLineId = Convert.ToInt32(dr["ShippingLineId"]);
                        objOBLEntryDetails.ContainerSize = Convert.ToString(dr["ContainerSize"]);
                        objOBLEntryDetails.ContainerNo = Convert.ToString(dr["ContainerNo"]);
                        objOBLEntryDetails.NoOfPkg = Convert.ToString(dr["NO_PKG"]);
                        objOBLEntryDetails.GR_WT = Convert.ToDecimal(dr["GR_WT"]);
                        objOBLEntry.OblEntryDetailsList.Add(objOBLEntryDetails);
                    }


                    if (Result.Tables[2].Rows.Count > 0)
                    {
                        objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        //objOBLEntry.InvNo = Convert.ToString(Result.Tables[2].Rows[0]["Invoiceno"]);
                        //objOBLEntry.InvDate = Convert.ToString(Result.Tables[2].Rows[0]["InvoiceDate"]);
                        //objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[2].Rows[0]["GatePassNo"]);
                        //objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[2].Rows[0]["GatePassDateTime"].ToString());
                        //objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[2].Rows[0]["GateExitNo"]);
                        //objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[2].Rows[0]["GateExitDateTime"].ToString());
                    }
                    if (Result.Tables[3].Rows.Count > 0)
                    {
                        //objOBLEntry.DestuffingNo = Convert.ToString(Result.Tables[2].Rows[0]["DestuffingNo"]);
                        //objOBLEntry.SQM = Convert.ToDecimal(Result.Tables[2].Rows[0]["SQM"]);
                        //objOBLEntry.CBM = Convert.ToDecimal(Result.Tables[2].Rows[0]["CBM"]);
                        //objOBLEntry.GodownNo = Convert.ToString(Result.Tables[2].Rows[0]["GodownName"]);
                        //objOBLEntry.Location = Convert.ToString(Result.Tables[2].Rows[0]["Location"]);
                        objOBLEntry.InvNo = Convert.ToString(Result.Tables[3].Rows[0]["Invoiceno"]);
                        objOBLEntry.InvDate = Convert.ToString(Result.Tables[3].Rows[0]["InvoiceDate"]);
                        objOBLEntry.GatePassNo = Convert.ToString(Result.Tables[3].Rows[0]["GatePassNo"]);
                        objOBLEntry.GatePassDate = Convert.ToString(Result.Tables[3].Rows[0]["GatePassDateTime"].ToString());
                        objOBLEntry.GateExitNo = Convert.ToString(Result.Tables[3].Rows[0]["GateExitNo"]);
                        objOBLEntry.GateExitDate = Convert.ToString(Result.Tables[3].Rows[0]["GateExitDateTime"].ToString());
                    }
                }

                if (Status == 1)
                {
                    //if (OblEntryDetailsList.Count > 0)
                    //{
                    //    objOBLEntry.StringifiedText = Newtonsoft.Json.JsonConvert.SerializeObject(OblEntryDetailsList);
                    //}

                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = objOBLEntry;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }
        #endregion

        #region ASSESSMENT SHEET LCL
        public void ASSESSMENTSHEETLCL(WFLD_AssessmentLCL vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("AssessmentReportLCL", CommandType.StoredProcedure, DParam);
            IList<WFLD_AssessmentLCL> lstData = new List<WFLD_AssessmentLCL>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_AssessmentLCL
                    {
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        ASMDate = Result["ASMDate"].ToString(),
                        OBLNo = Result["OBLNo"].ToString(),
                        OBLDate = Result["OBLDate"].ToString(),
                        TSANo = Result["TSANo"].ToString(),
                        TSADate = Result["TSADate"].ToString(),
                        ASMType = Result["ASMType"].ToString(),
                        BOENo = Result["BOENo"].ToString(),
                        BOEDate = Result["BOEDate"].ToString(),
                        PKGS = Convert.ToDecimal(Result["PKGS"]),
                        GrossWt = Convert.ToDecimal(Result["GrossWt"]),
                        Area = Convert.ToDecimal(Result["Area"]),
                        CBM = Convert.ToDecimal(Result["CBM"]),
                        Value = Convert.ToDecimal(Result["Value"]),
                        Duty = Convert.ToDecimal(Result["Duty"]),
                        SLA = Result["SLA"].ToString(),
                        IMP = Result["IMP"].ToString(),
                        CHA = Result["CHA"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region DAY TO DAY LCL DESTUFFING Report
        public void DestuffingDailyReport(WFLD_DestuffingReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("DestuffingDailyReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_DestuffingReport> lstData = new List<WFLD_DestuffingReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_DestuffingReport
                    {
                        CFSCode = Result["CFSCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        OBLNo = Result["OBLNo"].ToString(),
                        OBLDate = Result["OBLDate"].ToString(),
                        TSANo = Result["TSANo"].ToString(),
                        TSADate = Result["TSADate"].ToString(),
                        DestuffingDate = Result["DestuffingDate"].ToString(),
                        LineNo = Result["LineNo"].ToString(),
                        PKG = Convert.ToDecimal(Result["PKG"]),
                        WT = Convert.ToDecimal(Result["WT"]),
                        SLOT = Result["Slot"].ToString(),
                        Area = Convert.ToDecimal(Result["Area"]),
                        CBM = Convert.ToDecimal(Result["Cbm"]),
                        Description = Result["Description"].ToString(),
                        Importer = Result["Importer"].ToString(),
                        PortName = Result["Port"].ToString(),
                        CIFValue = Convert.ToDecimal(Result["CIFValue"]),
                        SLA = Result["ShippingLine"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region DESTUFFING Daily Report
        public void DestuffingDetailReport(WFLD_DestuffingDailyReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetDeStuffingReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_DestuffingDailyReport> lstData = new List<WFLD_DestuffingDailyReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_DestuffingDailyReport
                    {
                        CFSCode = Result["CFSCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        DestuffingDate = Result["DestuffingDate"].ToString(),
                        PortName = Result["PortName"].ToString(),
                        DestuffingEntryNo = Result["DestuffingEntryNo"].ToString(),
                        Weight = Result["Weight"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region LCL Delivery Report
        public void LCLDeliveryReport(WFLD_LCLDeliveryRpt vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("LCLDeliveryReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_LCLDeliveryRpt> lstData = new List<WFLD_LCLDeliveryRpt>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_LCLDeliveryRpt
                    {

                        OBLNo = Result["BOLNo"].ToString(),
                        OBLDate = Result["BOLDate"].ToString(),
                        TSANo = Result["TSANo"].ToString(),
                        TSADate = Result["TSA_Date"].ToString(),
                        DestuffingDate = Result["DestuffingDate"].ToString(),
                        Importer = Result["Importer"].ToString(),
                        LineNo = Result["LineNo"].ToString(),
                        PKG = Convert.ToDecimal(Result["PKG"]),
                        WT = Convert.ToDecimal(Result["WT"]),
                        SLOT = Result["GodownName"].ToString(),
                        Area = Convert.ToDecimal(Result["SQM"]),
                        CBM = Convert.ToDecimal(Result["CBM"]),
                        Description = Result["CargoDescription"].ToString(),
                        GatePassNo = Result["GatePassNo"].ToString(),
                        VehicleNo = Result["VehicleNo"].ToString(),
                        SLA = Result["SLA"].ToString(),
                        CHA = Result["ChaName"].ToString(),
                        DAYS = Convert.ToInt32(Result["Days"]),
                        AmountReceived = Convert.ToDecimal(Result["StorageCharge"]),
                        CIFValue = Convert.ToDecimal(Result["CIF"]),
                        DUTY = Convert.ToDecimal(Result["DUTY"])
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region   DAY TO DAY FCL Report
        public void FCLDailyReport(WFLD_FCLDailyReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("FCLDailyReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_FCLDailyReport> lstData = new List<WFLD_FCLDailyReport>();
            _DBResponse = new DatabaseResponse();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_FCLDailyReport
                    {

                        OBLNo = Result["OBLNo"].ToString(),
                        OBLDate = Result["OBLDate"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        IGMNo = Result["IGMNo"].ToString(),
                        IGMDate = Result["IGMDate"].ToString(),
                        ITEMNo = Result["LINENo"].ToString(),
                        Package = Convert.ToDecimal(Result["NoOfPackages"]),
                        CHA = Result["CHAName"].ToString(),
                        SLA = Result["ShippingLine"].ToString(),
                        BOENo = Result["BOENo"].ToString(),
                        BOEDate = Result["BOEDate"].ToString(),
                        Description = Result["CargoDescription"].ToString(),
                        GatePassNo = Result["GatePassNo"].ToString()
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region SLA WISE DESTUFFING Report
        public void GetAllShippingLine()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            //    LstParam.Add(new MySqlParameter { ParameterName = "in_CountryId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = 0 });
            IDataParameter[] DParam = { };
            //  DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetShippingLineForDestuffingEntry", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLD_SLAWiseDestuffing> LstDeposit = new List<WFLD_SLAWiseDestuffing>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstDeposit.Add(new WFLD_SLAWiseDestuffing

                    {
                        ShippingLineId = Convert.ToInt32(Result["ShippingLineId"]),
                        ShippingLine = Result["ShippingLine"].ToString()

                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstDeposit;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void SlaWiseDestuffingEntryReport(WFLD_SLAWiseDestuffing vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ShippingLineId", MySqlDbType = MySqlDbType.Int32, Value = vm.ShippingLineId });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("SLAWiseDestuffingReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_SLAWiseDestuffing> lstData = new List<WFLD_SLAWiseDestuffing>();
            _DBResponse = new DatabaseResponse();
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_SLAWiseDestuffing
                    {

                        OBLNo = Result["BOLNo"].ToString(),
                        OBLDate = Result["BOLDate"].ToString(),
                        Size = Result["Size"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        DestuffingDate = Result["DestuffingEntryDate"].ToString(),
                        DestuffingSheetNo = Result["DestuffingEntryNo"].ToString(),
                        TSANo = Result["TSANo"].ToString(),
                        TSADate = Result["TSADate"].ToString(),
                        LineNo = Result["LINENo"].ToString(),
                        NoOFPKG = Convert.ToDecimal(Result["NOOFPKG"]),
                        Importer = Result["Importer"].ToString(),
                        RECEIVEDPKG = Convert.ToDecimal(Result["ReceivedPKG"]),
                        Area = Convert.ToDecimal(Result["Area"]),
                        CBM = Convert.ToDecimal(Result["CBM"]),
                        SLOT = Result["GodownName"].ToString(),
                        CFS = Result["PortName"].ToString(),
                        REMARKS = Result["REMARKS"].ToString(),
                        Weight = Convert.ToDecimal(Result["Weight"]),
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region Temporary Advance Report
        public void GetTemporaryAdvanceReport(WFLD_TemporaryAdvanceReport vm)
        {
            String PeriodFrom = null;
            String PeriodTo = null;
            if (vm.FromDate != null && vm.ToDate != null)
            {
                DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
                DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                PeriodTo = dtTo.ToString("yyyy/MM/dd");
            }

            int ReceiptId = 0;
            ReceiptId = Convert.ToInt32(vm.ReceiptId);

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ReceiptId", MySqlDbType = MySqlDbType.Int32, Value = ReceiptId });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetTemporaryAdvanceReport", CommandType.StoredProcedure, DParam);

            _DBResponse = new DatabaseResponse();
            try
            {
                if (Result.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        public void GetReceiptVoucherNo()
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_HeadId", MySqlDbType = MySqlDbType.Int32, Value = 0 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetReceiptVoucherNo", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLDVoucherHead> lstReceiptVoucher = new List<WFLDVoucherHead>();
            while (Result.Read())
            {

                Status = 1;
                lstReceiptVoucher.Add(new WFLDVoucherHead
                {
                    ReceiptId = Convert.ToInt32(Result["ReceiptId"]),
                    //ExpenseId = Convert.ToInt32(Result["ExpenseId"]),
                    VoucherNo = Convert.ToString(Result["VoucherNo"]),
                    //BalanceAmount = Convert.ToDecimal(Result["BalanceAmount"])
                });

            }

            if (Status == 1)
            {
                _DBResponse.Status = 1;
                _DBResponse.Message = "Success";
                _DBResponse.Data = lstReceiptVoucher;
            }
            else
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;

            }
        }
        #endregion


        #region STOCK REGISER 
        public void StockRegisterReport(WFLD_StockRegisterReport vm)
        {

            //DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            //LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ShippingLineId", MySqlDbType = MySqlDbType.Int32, Value = vm.ShippingLineId });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("StockRegisterReport", CommandType.StoredProcedure, DParam);
            List<WFLD_StockRegisterReport> lstStockRegisterReport = new List<WFLD_StockRegisterReport>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_StockRegisterReport
                    {
                        Area = Convert.ToDecimal(dr["Area"]),
                        CBM = Convert.ToDecimal(dr["CBM"]),
                        CFSCode = Convert.ToString(dr["CFSCode"]),
                        CIF = Convert.ToDecimal(dr["CIFValue"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        DestuffDate = Convert.ToString(dr["DestuffingEntryDate"]),
                        HAZNoHAZ = Convert.ToString(dr["CargoType"]),
                        Importer = Convert.ToString(dr["ImporterName"]),
                        OBLDate = Convert.ToString(dr["BOLDate"]),
                        OBLNo = Convert.ToString(dr["BOLNo"]),
                        Pkg = Convert.ToDecimal(dr["NoOfUnits"]),
                        SLA = Convert.ToString(dr["SLA"]),
                        Slot = Convert.ToString(dr["LocationName"]),
                        StoreCharge = Convert.ToDecimal(dr["StoreCharge"]),
                        TSADate = Convert.ToString(dr["TSADate"]),
                        TSANo = Convert.ToString(dr["TSANo"]),
                        WT = Convert.ToDecimal(dr["Weight"]),
                        Days = Convert.ToInt32(dr["Days"]),
                        DESC = Convert.ToString(dr["CommodityAlias"])

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion



        #region STOCK REGISER (Including Storage Amount)
        public void StockRegisterReportIncludeStorage(String FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            DParam = LstParam.ToArray();
            int Status = 0;

            DataSet Result = DataAccess.ExecuteDataSet("GetStockRegisterReportIncludeStorage", CommandType.StoredProcedure, DParam);
            List<WFLD_StockRegisterModel> lstStockRegisterReport = new List<WFLD_StockRegisterModel>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_StockRegisterModel
                    {
                        StorageCharge = Convert.ToDecimal(dr["StorageCharge"]),
                        EntryNo = Convert.ToString(dr["EntryNo"]),
                        ShippingBillNo = Convert.ToString(dr["ShippingBillNo"]),
                        ShippingDate = Convert.ToString(dr["ShippingDate"]),
                        Exporter = Convert.ToString(dr["Exporter"]),
                        CartingDate = Convert.ToString(dr["CartingDate"]),
                        NoPkg = Convert.ToDecimal(dr["NoPkg"]),
                        Fob = Convert.ToDecimal(dr["Fob"]),
                        GrossWgt = Convert.ToDecimal(dr["GrossWgt"]),
                        CBM = Convert.ToDecimal(dr["CBM"]),
                        SlotNo = Convert.ToString(dr["SlotNo"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion

        #region CCIN Report
        public void CCINDetailReport(WFLD_CCINReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CCINReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_CCINReport> lstData = new List<WFLD_CCINReport>();
            _DBResponse = new DatabaseResponse();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_CCINReport
                    {
                        SBNo = Result["SBNo"].ToString(),
                        SBDate = Result["SBDate"].ToString(),
                        CCINNo = Result["CCINNo"].ToString(),
                        CCINDate = Result["CCINDate"].ToString(),
                        PKG = Convert.ToDecimal(Result["Package"]),
                        GrWt = Convert.ToDecimal(Result["Weight"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        Cargo = Result["CommodityName"].ToString(),
                        Exporter = Result["ExporterName"].ToString(),
                        CHA = Result["CHAName"].ToString(),
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region SlabWiseDelivery Report
        public void SlabWiseDeliveryReport(WFLD_SlabWiseDeliveryReport vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("SLABWISEDELIVERYReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_SlabWiseDeliveryReport> lstData = new List<WFLD_SlabWiseDeliveryReport>();
            _DBResponse = new DatabaseResponse();
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_SlabWiseDeliveryReport
                    {
                        FirstSlab = Result["FirstSlab"].ToString(),
                        SecondSlab = Result["SecondSlab"].ToString(),
                        ThirdSlab = Result["ThirdSlab"].ToString(),
                        FourthSlab = Result["FourthSlab"].ToString()

                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region Cargo Carting Total Report
        public void CargoCartingTotalReport(WFLD_CargoCartingTotal vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CartingCargoTotal", CommandType.StoredProcedure, DParam);
            IList<WFLD_CargoCartingTotal> lstData = new List<WFLD_CargoCartingTotal>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_CargoCartingTotal
                    {
                        EntryNo = Result["EntryNo"].ToString(),
                        CartingDate = Result["CartingDate"].ToString(),
                        SBNo = Result["SBNo"].ToString(),
                        SBDate = Result["SBDate"].ToString(),
                        Exporter = Result["Exporter"].ToString(),
                        CHA = Result["CHA"].ToString(),
                        Cargo = Result["Cargo"].ToString(),
                        NoOfPKG = Convert.ToDecimal(Result["NoPKG"]),
                        GrossWeight = Convert.ToDecimal(Result["Weight"]),
                        FOB = Convert.ToDecimal(Result["FOB"]),
                        Slot = Result["Slot"].ToString(),
                        Space = Result["Space"].ToString(),
                        Area = Convert.ToDecimal(Result["Area"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        Location = Result["Location"].ToString()
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region  CURRENT STATUS OF LCL CARGO SLA WISE
        public void CurrentStatusOfLclCargoSla(string FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("StatusLCLCargoSlaRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region  CURRENT STATUS OF LCL CARGO BALANCE TOTAL
        public void CurrentStatusOfLclCargoBalance(string FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("StatusLCLCargoRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion


        #region Stuffing Request 
        public void GetStuffingRequestData(WFLD_StuffingRequestModel vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetStuffingRequestReport", CommandType.StoredProcedure, DParam);
            List<WFLD_StuffingRequestModel> lstStockRegisterReport = new List<WFLD_StuffingRequestModel>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_StuffingRequestModel
                    {
                        StuffingReqNo = Convert.ToString(dr["StuffingReqNo"]),
                        RequestDate = Convert.ToString(dr["RequestDate"]),
                        CFSCode = Convert.ToString(dr["CFSCode"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        Size = Convert.ToString(dr["Size"]),
                        ShippingLine = Convert.ToString(dr["ShippingLine"]),
                        NoOfSBS = Convert.ToDecimal(dr["NoOfSBS"]),
                        NoOfUnits = Convert.ToDecimal(dr["NoOfUnits"]),
                        CBM = Convert.ToDecimal(dr["CBM"]),
                        InDate = Convert.ToString(dr["InDate"]),
                        POL = Convert.ToString(dr["POL"]),
                        ContainerClass = Convert.ToString(dr["ContainerClass"]),
                        StuffWeight = Convert.ToDecimal(dr["StuffWeight"]),
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion
        #region Cargo Carting Shed wise
        public void CargoCartingShedReport(WFLD_CargoCartingShedWise vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Godown", MySqlDbType = MySqlDbType.Int32, Value = vm.GodownId });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CargoCartingShedwise", CommandType.StoredProcedure, DParam);
            IList<WFLD_CargoCartingShedWise> lstData = new List<WFLD_CargoCartingShedWise>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_CargoCartingShedWise
                    {
                        EntryNo = Result["EntryNo"].ToString(),
                        CartingDate = Result["CartingDate"].ToString(),
                        SBNo = Result["SBNo"].ToString(),
                        SBDate = Result["SBDate"].ToString(),
                        Exporter = Result["Exporter"].ToString(),
                        CHA = Result["CHA"].ToString(),
                        Cargo = Result["Cargo"].ToString(),
                        NoOfPKG = Convert.ToDecimal(Result["NoPKG"]),
                        GrWt = Convert.ToDecimal(Result["Weight"]),
                        FOB = Convert.ToDecimal(Result["FOB"]),
                        Slot = Result["Slot"].ToString(),
                        Space = Result["Space"].ToString(),
                        CBM = Convert.ToDecimal(Result["CBM"]),
                        //ImportExport = Result["OperationType"].ToString(),
                        //TotalAmount = Convert.ToDecimal(Result["TotalAmount"]),
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region Factory Stuffing 
        public void GetFactoryStuffingData(WFLD_FactoryStuffingModel vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetFactoryStuffingReport", CommandType.StoredProcedure, DParam);
            List<WFLD_FactoryStuffingModel> lstStockRegisterReport = new List<WFLD_FactoryStuffingModel>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_FactoryStuffingModel
                    {
                        EntryNo = Convert.ToString(dr["EntryNo"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        Size = Convert.ToString(dr["Size"]),
                        SLACD = Convert.ToString(dr["SLACD"]),
                        POL = Convert.ToString(dr["POL"]),
                        POD = Convert.ToString(dr["POD"]),
                        TransporterName = Convert.ToString(dr["TransporterName"]),
                        CHACD = Convert.ToString(dr["CHACD"]),
                        Units = Convert.ToDecimal(dr["Units"]),
                        PartyName = Convert.ToString(dr["PartyName"]),
                        ReceiptNo = Convert.ToString(dr["ReceiptNo"]),
                        GatePassNo = Convert.ToString(dr["GatePassNo"]),
                        GatePassDate = Convert.ToString(dr["GatePassDate"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion

        #region On Wheel Stuffing 
        public void GetOnWheelStuffingData(WFLD_WheelStuffingModel vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetWheelStuffingReport", CommandType.StoredProcedure, DParam);
            List<WFLD_WheelStuffingModel> lstStockRegisterReport = new List<WFLD_WheelStuffingModel>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_WheelStuffingModel
                    {
                        EntryNo = Convert.ToString(dr["EntryNo"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        Size = Convert.ToString(dr["Size"]),
                        SLACD = Convert.ToString(dr["SLACD"]),
                        POL = Convert.ToString(dr["POL"]),
                        POD = Convert.ToString(dr["POD"]),
                        TransporterName = Convert.ToString(dr["TransporterName"]),
                        CHACD = Convert.ToString(dr["CHACD"]),
                        Units = Convert.ToDecimal(dr["Units"]),
                        PartyName = Convert.ToString(dr["PartyName"]),
                        ReceiptNo = Convert.ToString(dr["ReceiptNo"]),
                        GatePassNo = Convert.ToString(dr["GatePassNo"]),
                        GatePassDate = Convert.ToString(dr["GatePassDate"]),
                        MainLine = Convert.ToString(dr["MainLine"]),
                        VehicleNo = Convert.ToString(dr["VehicleNo"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion
        #region   Shipping Bill Amendment  Report
        public void ShippingBillAmendmentReport(WFLD_ShipBillAmndRpt vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ShippingBillAmendmentReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_ShipBillAmndRpt> lstData = new List<WFLD_ShipBillAmndRpt>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                //  Sr | SB No | SB Date | Entry No | Exporter | Carting Date | No of PKg | GR Wt | FOB | Slot No | CBM | Storage Charges
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_ShipBillAmndRpt
                    {
                        SBNo = Result["SBNo"].ToString(),
                        SBDate = Result["SBDate"].ToString(),
                        EntryNo = Result["EntryNo"].ToString(),
                        Exporter = Result["Exporter"].ToString(),
                        CartingDate = Result["CartingDate"].ToString(),
                        NoOfPKG = Convert.ToDecimal(Result["NoPKG"]),
                        GRWt = Convert.ToDecimal(Result["Weight"]),
                        FOB = Convert.ToDecimal(Result["FOB"]),
                        SlotNo = Result["Slot"].ToString(),
                        CBM = Convert.ToDecimal(Result["CBM"]),
                        StorageCharge = Convert.ToDecimal(Result["StorageCharge"]),
                        OldSBNo = Result["OldSBNo"].ToString(),
                        OldSBDate = Result["OldSBDate"].ToString(),
                        OldPkg = Convert.ToDecimal(Result["OldPkg"]),
                        OldGrossWeight = Convert.ToDecimal(Result["OldGrossWeight"]),
                        AmndmntInvoiceNo = Result["AmndmntInvoiceNo"].ToString(),
                        AmndmntInvoiceDate = Result["AmndmntInvoiceDate"].ToString(),

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region   CUSTOMS DUTY COLLECTION Report
        public void CustomDutyCollectionReport(WFLD_CustomDutyCollection vm)
        {

            //DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            //DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Year", MySqlDbType = MySqlDbType.Int32, Value = vm.Year });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Month", MySqlDbType = MySqlDbType.Int32, Value = vm.Month });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("CUSTOMSDUTYCOLLECTIONReport", CommandType.StoredProcedure, DParam);
            IList<WFLD_CustomDutyCollection> lstData = new List<WFLD_CustomDutyCollection>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                //  Sr | SB No | SB Date | Entry No | Exporter | Carting Date | No of PKg | GR Wt | FOB | Slot No | CBM | Storage Charges
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_CustomDutyCollection
                    {
                        Duty = Convert.ToDecimal(Result["Duty"])

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion
        #region   Excess/Balance Cargo Received Report
        public void ExcessBalanceCargoReceivedReport(WFLD_ExcessBalCarRcd vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ExcessBalanceCargoReceived", CommandType.StoredProcedure, DParam);
            IList<WFLD_ExcessBalCarRcd> lstData = new List<WFLD_ExcessBalCarRcd>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                //  Sr | SB No | SB Date | Entry No | Exporter | Carting Date | No of PKg | GR Wt | FOB | Slot No | CBM | Storage Charges
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_ExcessBalCarRcd
                    {
                        SBNo = Result["SBNo"].ToString(),
                        Exporter = Result["Exporter"].ToString(),
                        CHA = Result["CHA"].ToString(),
                        PKG = Convert.ToDecimal(Result["PKG"]),
                        Excess = Convert.ToDecimal(Result["excessbalancecargo"]),
                        Shed = Result["Shed"].ToString(),
                        Slot = Result["Slot"].ToString(),

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region  Stock Register Shed wise/Total Shed
        public void StockRegisterShedwise(string FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("StockRegisterShedwise", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region  Long Standing Cargo Register ( More Than 30 days)
        public void LongStandingCargoRegisterExp(string FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("LongStandingExpCargoRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion



        #region Stuffing Request with Area
        public void GetStuffingRequestwithAreaData(WFLD_StuffingReportwithArea vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetStuffingReportwithArea", CommandType.StoredProcedure, DParam);
            List<WFLD_StuffingReportwithArea> lstStockRegisterReport = new List<WFLD_StuffingReportwithArea>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_StuffingReportwithArea
                    {
                        EntryNo = Convert.ToString(dr["EntryNo"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        Size = Convert.ToString(dr["Size"]),
                        Forwarder = Convert.ToString(dr["Forwarder"]),
                        SLA = Convert.ToString(dr["SLA"]),
                        CustomSeal = Convert.ToString(dr["CustomSeal"]),
                        Area = Convert.ToDecimal(dr["Area"]),
                        POL = Convert.ToString(dr["POL"]),
                        POD = Convert.ToString(dr["POD"]),
                        Transporter = Convert.ToString(dr["Transporter"]),
                        GatePassNo = Convert.ToString(dr["GatePassNo"]),
                        GatePassDate = Convert.ToString(dr["GatePassDate"]),
                        VehicleNo = Convert.ToString(dr["VehicleNo"]),
                        InvoiceNo = Convert.ToString(dr["InvoiceNo"]),
                        Weight = Convert.ToDecimal(dr["Weight"]),
                        StuffingNo = Convert.ToString(dr["StuffingSheetNo"]),
                        TotalSB = Convert.ToInt32(dr["TotalSB"]),
                        TotalArea = Convert.ToDecimal(dr["TotalArea"]),
                        TotalWeight = Convert.ToDecimal(dr["TotalWeight"]),
                        TotalShipBillCount = Convert.ToInt32(dr["TotalShipBillCount"])
                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion


        #region Assessment Report
        public void GetAssessmentReportData(WFLD_AssessmentReportModel vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet Result = DataAccess.ExecuteDataSet("GetAssessmentReportDetails", CommandType.StoredProcedure, DParam);
            List<WFLD_AssessmentReportModel> lstStockRegisterReport = new List<WFLD_AssessmentReportModel>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstStockRegisterReport.Add(new WFLD_AssessmentReportModel
                    {
                        InvoiceNo = Convert.ToString(dr["InvoiceNo"]),
                        ASMDate = Convert.ToString(dr["ASMDate"]),
                        OBLNo = Convert.ToString(dr["OBLNo"]),
                        OBLDate = Convert.ToString(dr["OBLDate"]),
                        TSANo = Convert.ToString(dr["TSANo"]),
                        TSADate = Convert.ToString(dr["TSADate"]),
                        ASMType = Convert.ToString(dr["ASMType"]),
                        BOENo = Convert.ToString(dr["BOENo"]),
                        BOEDate = Convert.ToString(dr["BOEDate"]),
                        PKGS = Convert.ToDecimal(dr["PKGS"]),
                        Area = Convert.ToDecimal(dr["Area"]),
                        CBM = Convert.ToDecimal(dr["CBM"]),
                        Value = Convert.ToDecimal(dr["Value"]),
                        Duty = Convert.ToDecimal(dr["Duty"]),
                        SLA = Convert.ToString(dr["SLA"]),
                        IMP = Convert.ToString(dr["IMP"]),
                        CHA = Convert.ToString(dr["CHA"]),
                        TotalAmount = Convert.ToDecimal(dr["TotalAmount"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstStockRegisterReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }

        #endregion

        #region  EGM LCL REPORT
        public void EgmLclReport(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("EgmLclRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            DataTable dt = ds.Tables[0];






            //     List<WFLD_PartyLedCons> model = new List<WFLD_PartyLedCons>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = EgmLclReportExcel(dt, FromDate, ToDate);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }


        }
        #endregion
        #region   CHA/EXP COUNT SB WISE  Report
        public void CHAEXPSBWISEReport(WFLD_ChaExpSBWise vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("SlaExpShipBillWise", CommandType.StoredProcedure, DParam);
            IList<WFLD_ChaExpSBWise> lstData = new List<WFLD_ChaExpSBWise>();
            _DBResponse = new DatabaseResponse();
            try
            {
                //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                //  Sr | SB No | SB Date | Entry No | Exporter | Carting Date | No of PKg | GR Wt | FOB | Slot No | CBM | Storage Charges
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_ChaExpSBWise
                    {
                        ExporterName = Result["Exporter"].ToString(),
                        CHAName = Result["CHA"].ToString(),
                        NoOfSB = Convert.ToInt32(Result["NoOfSB"]),


                    });
                }

                //try
                //{
                //    //  Sr No | Entry No | Carting Date | Sb No | Sb Date | Exp | CHA | Cargo | No Pkg | Gr Wt | Fob | Slot | G /R | Area
                //    //  Sr | SB No | SB Date | Entry No | Exporter | Carting Date | No of PKg | GR Wt | FOB | Slot No | CBM | Storage Charges
                //    while (Result.Read())
                //    {
                //        Status = 1;
                //      
                //    }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion


        #region CWC IWB STUFFING REPORT
        public void CwcIwbStuffingReport(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("IWBStuffingRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion


        #region  EGM FCL REPORT
        public void EgmFclReport(string FromDate, string ToDate)
        {

            string FromDt = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            string ToDt = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.Date, Value = FromDt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.Date, Value = ToDt });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("EgmFclRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            DataTable dt = ds.Tables[0];






            //     List<WFLD_PartyLedCons> model = new List<WFLD_PartyLedCons>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = EgmFclReportExcel(dt, FromDate, ToDate);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }


        }
        #endregion
        #region  EGM FCL Loaded Container REPORT
        public void EgmFclLoadedReport(string FromDate, string ToDate)
        {

            string FromDt = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            string ToDt = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.Date, Value = FromDt });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.Date, Value = ToDt });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("EGMFCLLoadedReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            DataTable dt = ds.Tables[0];






            //     List<WFLD_PartyLedCons> model = new List<WFLD_PartyLedCons>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = EgmFclLoadedReportExcel(dt, FromDate, ToDate);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }


        }
        private string EgmFclLoadedReportExcel(DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "EGM FCL Loaded Container REPORT From Date " + datevalue + " To " + datevalueto + "";
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }
        #endregion
        #region Bond Container in Report
        public void BondContainerInReport(String FromDate, String ToDate)
        {
            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });

            DParam = LstParam.ToArray();
            int Status = 0;

            DataSet Result = DataAccess.ExecuteDataSet("GetBondInContainer", CommandType.StoredProcedure, DParam);
            List<WFLD_BondInContainer> lstBondInContainerReport = new List<WFLD_BondInContainer>();
            _DBResponse = new DatabaseResponse();
            try
            {
                foreach (DataRow dr in Result.Tables[0].Rows)
                {
                    Status = 1;
                    lstBondInContainerReport.Add(new WFLD_BondInContainer
                    {
                        CFSCode = Convert.ToString(dr["CFSCode"]),
                        ContainerNo = Convert.ToString(dr["ContainerNo"]),
                        InDate = Convert.ToString(dr["InDate"]),
                        Size = Convert.ToString(dr["Size"]),
                        ShippingLine = Convert.ToString(dr["ShippingLine"]),
                        origin = Convert.ToString(dr["origin"]),
                        Status = Convert.ToString(dr["Status"]),
                        ContClass = Convert.ToString(dr["ContClass"]),
                        VehicleNo = Convert.ToString(dr["VehicleNo"]),
                        Remarks = Convert.ToString(dr["Remarks"]),
                        CHAName = Convert.ToString(dr["CHAName"]),
                        Importer = Convert.ToString(dr["Importer"]),

                    });

                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstBondInContainerReport;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }

        }
        #endregion

        #region BOND ASM DETAILS
        public void GetBondAsmDetails(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("GetBondAsmDetailsReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<WFLD_BondAsmDetails> lstBondAsmDetails = new List<WFLD_BondAsmDetails>();
            try
            {
                int Status = 0;

                if (ds.Tables[0].Rows.Count > 0)
                {
                    Status = 1;
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        lstBondAsmDetails.Add(new WFLD_BondAsmDetails
                        {
                            AsmDate = Convert.ToString(dr["ASMDate"]),
                            AsmType = Convert.ToString(dr["ASMType"]),
                            PartyCode = Convert.ToString(dr["PartyCd"]),
                            ReceiptDate = Convert.ToString(dr["ReceiptDate"]),
                            AsmNo = Convert.ToString(dr["ASMNO"]),
                            ReceiptNo = Convert.ToString(dr["ReceiptNo"]),
                            SacDate = Convert.ToString(dr["SacDate"]),
                            SacNo = Convert.ToString(dr["SacNo"]),
                            BondNo = Convert.ToString(dr["BondNo"]),
                            BondDate = Convert.ToString(dr["BondDate"]),
                        });
                    }

                }



                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstBondAsmDetails;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion



        #region Time barred bond
        public void TimeBarredBond(string FromDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_AsOn", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("RptBondTimeBarred", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion


        #region  BOND GATE PASS REPORT
        public void GetBondGatePassForReport(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("GetBondGatePassRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region Ex bond dtd
        public void ExBondDTD(string FromDate, string ToDate, int GodownId = 0)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("RptExbondDTD", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region In bond dtd
        public void InBondDTD(string FromDate, string ToDate, int GodownId = 0)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = GodownId });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("RptInbondDTD", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region Import Delivery

        public void GetImportDeliveryReport(WFLD_ImportDelivery vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("GetImportDeliveryReport", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }




        #endregion

        #region Import Destuffing CBT

        public void GetImportDestuffingCBTReport(WFLD_ImportDestuffingCBT vm)
        {
            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetImportDestuffingCBT", CommandType.StoredProcedure, DParam);
            IList<WFLD_ImportDestuffingCBT> lstData = new List<WFLD_ImportDestuffingCBT>();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lstData.Add(new WFLD_ImportDestuffingCBT
                    {
                        Date = Result["Date"].ToString(),
                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["CBTSize"].ToString(),
                        Amount = Convert.ToDecimal(Result["Amount"]),
                        Weight = Convert.ToDecimal(Result["Weight"]),

                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstData;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region Work Slip Carting

        public void WorkSlipCartingReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipCartingRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Import Transportation Report
        public void GetImportTransportationReport(WFLD_ImportDelivery vm)
        {

            DateTime dtfrom = DateTime.ParseExact(vm.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(vm.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("GetImportTransportation", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region  Export Container WorkSlip for CWC Stuffing Report ( CWC Movement)

        public void WorkSlipContCWCMvmtReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipContCWCMvmtRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Export Container WorkSlip for CWC Stuffing Report ( PVT Movement)

        public void WorkSlipContPVTMvmtReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipContPVTMvmtRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Export CBT WorkSlip for CWC Stuffing Report ( CWC Movement)

        public void WorkSlipCBTCWCMvmtReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipCBTCWCMvmtRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Export CBT WorkSlip for CWC Stuffing Report ( PVT Movement)

        public void WorkSlipCBTPVTMvmtReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipCBTPVTMvmtRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Work Slip In Bond

        public void WorkSlipInBondReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipInBondRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Work Slip Ex Bond

        public void WorkSlipExBondReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipExBondRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region Stuffing Request Register
        public void StuffingRegister(StuffingRegister ObjStuffingRegister)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjStuffingRegister.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ObjStuffingRegister.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("StuffingRegisterReport", CommandType.StoredProcedure, DParam);
            IList<StuffingRegister> LstStuffingRegister = new List<StuffingRegister>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    //ObjStatusDtl = new ConsumerList();
                    //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
                    //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
                    //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
                    //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


                    //                 InvoiceDate DATE,
                    //         InvoiceNumber       VARCHAR(30),
                    //ReceiptAmount DECIMAL(18, 3),
                    //InvoiceAmount DECIMAL(18, 3),
                    //Value DECIMAL(18, 3),
                    //OpeningBalance DECIMAL(18, 3),
                    //ClosingBalance DECIMAL(18, 3)

                    LstStuffingRegister.Add(new StuffingRegister
                    {



                        Date = Result["RequestDate"].ToString(),

                        CfsCode = Result["CFSCode"].ToString(),

                        ContainerNo = Result["ContainerNo"].ToString(),
                        Size = Result["Size"].ToString(),

                        //ExporterName = Result["ExporterName"].ToString(),
                        Forwarder = Result["Forwarder"].ToString(),
                        ShippingLineName = Result["ShippingLine"].ToString(),
                        CHAName = Result["CHAName"].ToString(),
                        Cargo = Result["Cargo"].ToString(),
                        NoOfUnits = Result["NoOfUnits"].ToString(),
                        shippingBillNo = Result["ShippingBillNo"].ToString(),
                        shippingBillDate = Result["ShippingDate"].ToString(),

                        shippingBillAndDate = Result["ShippingBillNo"].ToString() + " " + Result["ShippingDate"].ToString(),
                        //pod = Result["POD"].ToString(),
                        Fob = Result["Fob"].ToString(),
                        Weight = Result["GrossWeight"].ToString(),
                        StfRegisterNo = Result["StuffingReqNo"].ToString() + " " + Result["StuffingRequestDate"].ToString(),
                        POL = Result["POL"].ToString(),
                        TotalSB = Result["TotalSB"].ToString(),
                        CBM = Result["CBM"].ToString()
                        // StfRegisterDate = Result["POD"].ToString()


                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstStuffingRegister;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }

        #endregion

        #region Monthly SD Report
        public void GetMonthlySDReport(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("GetMonthlySDReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];


            List<WFLD_MonthlySDReport> model = new List<WFLD_MonthlySDReport>();
            try
            {

                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = MonthlySDReportExcel(model, dt, date1, date2);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }


        }
        private string MonthlySDReportExcel(List<WFLD_MonthlySDReport> model, DataTable dt, DateTime Date1, DateTime Date2)
        {

            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;

                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }


                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> MONTHLY SD REPORT  </b> ";
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                cell2.Text = "<b> PERIOD FROM " + Date1.ToShortDateString() + " TO " + Date2.ToShortDateString() + "</b>";
                System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                tr2.Cells.Add(cell2);
                tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);

                tb.Rows.Add(tr1);
                tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }

            return excelFile;
        }


        #endregion



        #region container In Out
        public void ContainerInOutRegister(WFLD_ContainerInOut ObjEmp)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjEmp.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy-MM-dd");
            DateTime dtTo = DateTime.ParseExact(ObjEmp.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy-MM-dd");
            //ConsumerList ObjStatusDtl = null;in_Status

            int Status = 0;
            //string Flag = "";
            //if (ObjExemptedService.Registered == 0)
            //{
            //    Flag = "All";
            //}
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_partyNameId", MySqlDbType = MySqlDbType.Int32, Size = 11, Value = ObjDebtorReport.partyNameId });

            //LstParam.Add(new MySqlParameter { ParameterName = "in_SAC", MySqlDbType = MySqlDbType.VarChar, Value = ObjServiceCodeWiseInvDtls.SAC });

            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ContainerInOutReport", CommandType.StoredProcedure, DParam);
            //WFLD_EmpContReg ObjEmp = new WFLD_EmpContReg();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();

            //ObjStatusDtl = new ConsumerList();
            //ObjStatusDtl.RegistrationNo = Convert.ToString(Result["RegistrationNo"]);
            //ObjStatusDtl.Name = Convert.ToString(Result["CompanyName"]);
            //ObjStatusDtl.Address = Convert.ToString(Result["CompanyAddress"]);
            //ObjStatusDtl.IssueDate = Convert.ToString(Result["IssuedOn"]);


            //                 InvoiceDate DATE,
            //         InvoiceNumber       VARCHAR(30),
            //ReceiptAmount DECIMAL(18, 3),
            //InvoiceAmount DECIMAL(18, 3),
            //Value DECIMAL(18, 3),
            //OpeningBalance DECIMAL(18, 3),
            //ClosingBalance DECIMAL(18, 3)
            WFLD_ContainerInOut ObjInout = new WFLD_ContainerInOut();
            try
            {
                while (Result.Read())
                {

                    //ObjEmp.mstcompany = Result["CompanyAddress"].ToString();

                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.ImportCbtIn20Teus = Convert.ToInt32(Result["ImportCbtIn20Teus"]);
                        ObjInout.ImportCbtIn40Teus = Convert.ToInt32(Result["ImportCbtIn40Teus"]);


                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.ImportContIn20Teus = Convert.ToInt32(Result["ImportContIn20Teus"]);
                        ObjInout.ImportContIn40Teus = Convert.ToInt32(Result["ImportContIn40Teus"]);


                    }
                }


                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.ExportCBTout20Teus = Convert.ToInt32(Result["ExportCBTout20Teus"]);
                        ObjInout.ExportCBTout40Teus = Convert.ToInt32(Result["ExportCBTout40Teus"]);


                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.ExportContout20Teus = Convert.ToInt32(Result["ExportContout20Teus"]);
                        ObjInout.ExportContout40Teus = Convert.ToInt32(Result["ExportContout40Teus"]);


                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.EmptyIn20Teus = Convert.ToInt32(Result["EmptyIn20Teus"]);
                        ObjInout.EmptyIn40Teus = Convert.ToInt32(Result["EmptyIn40Teus"]);


                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.EmptyOut20Teus = Convert.ToInt32(Result["EmptyOut20Teus"]);
                        ObjInout.EmptyOut40Teus = Convert.ToInt32(Result["EmptyOut40Teus"]);


                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        Status = 1;

                        // SlNo = Convert.ToInt32(Result["Sno"]),
                        ObjInout.BondContIn20Teus = Convert.ToInt32(Result["BondContIn20Teus"]);
                        ObjInout.BondContIn40Teus = Convert.ToInt32(Result["BondContIn40Teus"]);


                    }
                }

                ObjInout.TotalTues = ObjInout.ImportCbtIn20Teus + ObjInout.ImportCbtIn40Teus + ObjInout.ImportContIn20Teus +
                    ObjInout.ImportContIn40Teus + ObjInout.ExportCBTout20Teus + ObjInout.ExportCBTout40Teus +
                    ObjInout.ExportContout20Teus + ObjInout.ExportContout40Teus +
                    ObjInout.EmptyIn20Teus + ObjInout.EmptyIn40Teus + ObjInout.EmptyOut20Teus + ObjInout.EmptyOut40Teus + ObjInout.BondContIn20Teus + ObjInout.BondContIn40Teus;
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ObjInout;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }
        #endregion

        #region BOND BOE Query
        public void GetBondBoeQuery(string SacNo, string BondNo, string BOENo)
        {

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_SacNo", MySqlDbType = MySqlDbType.VarChar, Value = SacNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_BondNo", MySqlDbType = MySqlDbType.VarChar, Value = BondNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_BOENo", MySqlDbType = MySqlDbType.VarChar, Value = BOENo });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("BondBoeQuery", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #region Bond Boe Query
        public void ListOfSACForPage(string SacNo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_SacNo", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = SacNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ListOfSacForPage", CommandType.StoredProcedure, Dparam);
            IList<WFLD_BondBoeQuery> lstSac = new List<WFLD_BondBoeQuery>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool SacState = false;
                while (Result.Read())
                {
                    Status = 1;
                    lstSac.Add(new WFLD_BondBoeQuery
                    {
                        SacNO = Result["SacNo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SacState = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { lstSac, SacState };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }

        public void ListOfBondForPage(string BondNo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_BondNo", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = BondNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ListOfBondForPage", CommandType.StoredProcedure, Dparam);
            IList<WFLD_BondBoeQuery> lstBond = new List<WFLD_BondBoeQuery>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool BondState = false;
                while (Result.Read())
                {
                    Status = 1;
                    lstBond.Add(new WFLD_BondBoeQuery
                    {
                        inBondNo = Result["BondNo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        BondState = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { lstBond, BondState };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }

        public void ListOfBoeForPage(string BoeNo, int Page = 0)
        {
            int Status = 0;
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_BOENo", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = BoeNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] Dparam = lstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ListOfBoeForPage", CommandType.StoredProcedure, Dparam);
            IList<WFLD_BondBoeQuery> lstBoe = new List<WFLD_BondBoeQuery>();
            _DBResponse = new DatabaseResponse();
            try
            {
                bool BoeState = false;
                while (Result.Read())
                {
                    Status = 1;
                    lstBoe.Add(new WFLD_BondBoeQuery
                    {
                        InBondBOENo = Result["BondBOENo"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        BoeState = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { lstBoe, BoeState };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }

        }

        #endregion

        #endregion



        #region Consolidated Export Container Report
        public void GetConsolidatedExportContainer(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("ConsolidateExportContainer", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDConsolidatedExportContainerModel> model = new List<WFLDConsolidatedExportContainerModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = ConsolidateExportContainerExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string ConsolidateExportContainerExcel(List<WFLDConsolidatedExportContainerModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Consolidated Export Container Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion


        #region Reefer Container Report
        public void GetReeferContainer(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetReeferContainerReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDReeferContainerModel> model = new List<WFLDReeferContainerModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetReeferContainerExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetReeferContainerExcel(List<WFLDReeferContainerModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Reefer Container Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion


        #region Import Assessment LCL Report CHA & Shipping Line Wise
        public void GetImportAssessmentLCL(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetImportAssessmentLCL", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDImportAssessmentLCLModel> model = new List<WFLDImportAssessmentLCLModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetImportAssessmentLCLExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetImportAssessmentLCLExcel(List<WFLDImportAssessmentLCLModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Import Assessment LCL(CHA & Shipping Line wise) Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion



        #region Import Assessment FCL Report 
        public void GetImportAssessmentFCL(DateTime date1, DateTime date2, int slaid)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_SLAId", MySqlDbType = MySqlDbType.Int32, Value = slaid });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetImportAssessmentFCL", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDImportAssessmentFCLModel> model = new List<WFLDImportAssessmentFCLModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetImportAssessmentFCLExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetImportAssessmentFCLExcel(List<WFLDImportAssessmentFCLModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Import Assessment FCL Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion
        #region Reservation Charges Report
        public void GetReservationCharges(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetReservationChargesReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLDReservationChargesModel> model = new List<WFLDReservationChargesModel>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetReservationChargesExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        //foreach (DataRow dr in ds.Tables[1].Rows)
        //{
        //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
        //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
        //}




        private string GetReservationChargesExcel(List<WFLDReservationChargesModel> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Reservation Charges Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion

        #region Transportation Charges Report
        public void GetTransportationCharges(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetTransportationReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLD_TranspotationCharges> model = new List<WFLD_TranspotationCharges>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetTransportationChargesExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }


        private string GetTransportationChargesExcel(List<WFLD_TranspotationCharges> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Transportation As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Transportation Charges Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //   tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion

        #region Bond Form-A Report
        public void GetBondFormAReport(DateTime date1, DateTime date2)
        {
            String PeriodFrom = date1.ToString("yyyy/MM/dd");
            String PeriodTo = date2.ToString("yyyy/MM/dd");

            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.Date, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.Date, Value = PeriodTo });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetBondFormARpt", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            DataTable dt1 = ds.Tables[1];
            DataTable dt2 = ds.Tables[2];


            List<WFLDBondFormA> modelA = new List<WFLDBondFormA>();
            List<WFLDBondFormA> modelB = new List<WFLDBondFormA>();
            List<WFLDBondFormA> modelC = new List<WFLDBondFormA>();
            try
            {
                modelA = (from DataRow dr in dt.Rows
                          select new WFLDBondFormA()
                          {
                              A = dr["A"].ToString(),
                              B = dr["B"].ToString(),
                              C = dr["C"].ToString(),
                              D = dr["D"].ToString(),
                              E = dr["E"].ToString(),
                              F = dr["F"].ToString(),

                              G = dr["G"].ToString(),
                              H = dr["H"].ToString(),
                              I = dr["I"].ToString(),
                              J = dr["J"].ToString(),
                              K = dr["K"].ToString(),
                              L = dr["L"].ToString(),

                              M = dr["M"].ToString(),
                              N = dr["N"].ToString(),
                              O = dr["O"].ToString(),
                              P = dr["P"].ToString(),
                              Q = dr["Q"].ToString(),
                              R = dr["R"].ToString(),

                              S = dr["S"].ToString(),
                              T = dr["T"].ToString(),
                              U = dr["U"].ToString(),
                              V = dr["V"].ToString(),
                              W = dr["W"].ToString(),
                              X = dr["X"].ToString(),

                              Y = dr["Y"].ToString(),
                              Z = dr["Z"].ToString(),
                              AA = dr["AA"].ToString(),
                              AB = dr["AB"].ToString(),
                              AC = dr["AC"].ToString(),
                              AD = dr["AD"].ToString(),

                              AE = dr["AE"].ToString(),
                              AF = dr["AF"].ToString()

                          }).ToList();

                modelB = (from DataRow dr in dt1.Rows
                          select new WFLDBondFormA()
                          {
                              A = dr["A"].ToString(),
                              B = dr["B"].ToString(),
                              C = dr["C"].ToString(),
                              D = dr["D"].ToString(),
                              E = dr["E"].ToString(),
                              F = dr["F"].ToString(),

                              G = dr["G"].ToString(),
                              H = dr["H"].ToString(),
                              I = dr["I"].ToString(),
                              J = dr["J"].ToString(),
                              K = dr["K"].ToString(),
                              L = dr["L"].ToString(),

                              M = dr["M"].ToString(),
                              N = dr["N"].ToString(),
                              O = dr["O"].ToString(),
                              P = dr["P"].ToString(),
                              Q = dr["Q"].ToString(),
                              R = dr["R"].ToString(),

                              S = dr["S"].ToString(),
                              T = dr["T"].ToString(),
                              U = dr["U"].ToString(),
                              V = dr["V"].ToString(),
                              W = dr["W"].ToString(),
                              X = dr["X"].ToString(),

                              Y = dr["Y"].ToString(),
                              Z = dr["Z"].ToString(),
                              AA = dr["AA"].ToString(),
                              AB = dr["AB"].ToString(),
                              AC = dr["AC"].ToString(),
                              AD = dr["AD"].ToString(),

                              AE = dr["AE"].ToString(),
                              AF = dr["AF"].ToString()

                          }).ToList();

                modelC = (from DataRow dr in dt2.Rows
                          select new WFLDBondFormA()
                          {
                              A = dr["A"].ToString(),
                              B = dr["B"].ToString(),
                              C = dr["C"].ToString(),
                              D = dr["D"].ToString(),
                              E = dr["E"].ToString(),
                              F = dr["F"].ToString(),

                              G = dr["G"].ToString(),
                              H = dr["H"].ToString(),
                              I = dr["I"].ToString(),
                              J = dr["J"].ToString(),
                              K = dr["K"].ToString(),
                              L = dr["L"].ToString(),

                              M = dr["M"].ToString(),
                              N = dr["N"].ToString(),
                              O = dr["O"].ToString(),
                              P = dr["P"].ToString(),
                              Q = dr["Q"].ToString(),
                              R = dr["R"].ToString(),

                              S = dr["S"].ToString(),
                              T = dr["T"].ToString(),
                              U = dr["U"].ToString(),
                              V = dr["V"].ToString(),
                              W = dr["W"].ToString(),
                              X = dr["X"].ToString(),

                              Y = dr["Y"].ToString(),
                              Z = dr["Z"].ToString(),
                              AA = dr["AA"].ToString(),
                              AB = dr["AB"].ToString(),
                              AC = dr["AC"].ToString(),
                              AD = dr["AD"].ToString(),

                              AE = dr["AE"].ToString(),
                              AF = dr["AF"].ToString()

                          }).ToList();

                _DBResponse.Data = GetBondFormAExcel(modelA, modelB, modelC, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));

            }

            //foreach (DataRow dr in ds.Tables[1].Rows)
            //{
            //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
            //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
            //}

            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }

        }

        private string GetBondFormAExcel(List<WFLDBondFormA> modelA, List<WFLDBondFormA> modelB, List<WFLDBondFormA> modelC, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            string month = "";
            string MonthPrint = "";
            string YearPrint = "";
            month = datevalueto.Split('/')[1].ToString();
            YearPrint = datevalueto.Split('/')[2].ToString();
            switch (month)
            {
                case "01":
                    MonthPrint = "JANUARY";
                    break;
                case "02":
                    MonthPrint = "FEBRUARY";
                    break;
                case "03":
                    MonthPrint = "MARCH";
                    break;
                case "04":
                    MonthPrint = "APRIL";
                    break;
                case "05":
                    MonthPrint = "MAY";
                    break;
                case "06":
                    MonthPrint = "JUNE";
                    break;
                case "07":
                    MonthPrint = "JULY";
                    break;
                case "08":
                    MonthPrint = "AUGUST";
                    break;
                case "09":
                    MonthPrint = "SEPTEMBER";
                    break;
                case "10":
                    MonthPrint = "OCTOBER";
                    break;
                case "11":
                    MonthPrint = "NOVEMBER";
                    break;
                case "12":
                    MonthPrint = "DECEMBER";
                    break;
            }


            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"Form - A";

                exl.MargeCell("A1:AF1", "Form - A", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A2:AF2", "Form to be maintained by the warehouse licensee of the receipt, handling, storing and removal of the warehoused goods. 01.02.2020 (OB)", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("A3:AF3", "(in terms of Circular No.25/2016 - Customs dated 08.06.2016)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A4:AF4", "Warehouse code and address: WFD6U004 CWC, CFS, Whitefield, Bangalore 560066.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A5:R5", "Receipts", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("S5:X5", "Handling and storage", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("Y5:AF5", "Removal", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A6:A9", "Sl No.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("B6:B9", "Bill of Entry No. and date", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("C6:C9", "Customs Station of import", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("D6:D9", "Bond No.and date", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("E6:E9", "Description of goods", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("F6:F9", "Description and No.of packages", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("G6:G9", "Marks and numbers on packages", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("H6:H9", "Units Weight and quantity", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("I6:I9", "Value", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("J6:J9", "Duty assessed", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("K6:K9", "Date if order under Section 60(1)", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("L6:L9", "Warehouse code and address (in case of bond to bond transfer)", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("M6:M9", "Registration No.of means of tranport", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("N6:N9", "OTL No.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("O6:O9", "Quantity adviced", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("P6:P9", "Quantity received", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("Q6:Q9", "Breakage/damage", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("R6:R9", "shortage", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("S6:S9", "Sample drawn by government agencies", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("T6:T9", "Activities undertaken under section 64", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("U6:U9", "Date if expiry of initial Bonding period", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("V6:V9", "Period extended upto", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("W6:W9", "Details of Bank Guarantee", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("X6:X9", "Relinquishment", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("Y6:Y9", "Date and time of removal", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("Z6:Z9", "Purpose of removal (home consumption/deoisut in another warehouse/expoet/sold under Sec.72 (2)/ destruction etc). Give details.", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AA6:AA9", "Quantity cleared", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AB6:AB9", "Value", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AC6:AC9", "Duty", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AD6:AD9", "Interest", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AE6:AE9", "Balance quantity", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);
                exl.MargeCell("AF6:AF9", "Remarks", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                int FirstLoop = Convert.ToInt32(modelA.Count.ToString());
                int SecLoop = Convert.ToInt32(modelB.Count.ToString());

                FirstLoop = (FirstLoop + 10);
                SecLoop = (FirstLoop + SecLoop + 1);

                string fstInsert = "A" + FirstLoop.ToString();
                string lstInsert = "AF" + FirstLoop.ToString();

                string fstFinal = fstInsert + ":" + lstInsert;

                string scndInsertbegn = "A" + SecLoop.ToString();
                string scndlineInsertLast = "AF" + SecLoop.ToString();
                string scndFinal = scndInsertbegn + ":" + scndlineInsertLast;

                exl.AddTable("A", 10, modelA, new[] { 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });

                //exl.Add(fstInsert:lstInsert, "Form - A", DynamicExcel.CellAlignment.Middle);

                exl.AddCell("A" + FirstLoop.ToString(), "", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell(fstFinal, "Time Barred Bonds Transferred From CW, APMC Yard, Yeshwantpura and KR.Puram and lying in storage as on 01.02.2020 (OB)", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.AddTable("A", (FirstLoop + 1), modelB, new[] { 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });

                exl.AddCell("A" + SecLoop.ToString(), "", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell(scndFinal, "DELIVERY STATUS FOR THE MONTH '" + MonthPrint + "' '" + YearPrint + "", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.AddTable("A", (SecLoop + 1), modelC, new[] { 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });


                exl.Save();
            }
            return excelFile;
        }

        #endregion


        #region Bond Form - B Report

        public void BondFormBReport(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("BondFormBRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }

        #endregion

        #region TDS receipt 
        public void GetTDSreceipt(string ReceiptNo)
        {
            int Status = 0;
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataSet Result = new DataSet();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            //LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(FromDate == null ? "" : FromDate).ToString("yyyy-MM-dd") });
            //LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.DateTime, Value = Convert.ToDateTime(ToDate == null ? "" : ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_CashReceiptId", MySqlDbType = MySqlDbType.VarChar, Size = 30, Value = ReceiptNo });
            try
            {
                DParam = LstParam.ToArray();
                Result = DataAccess.ExecuteDataSet("GetTDSRecptForPrint", CommandType.StoredProcedure, DParam);
                _DBResponse = new DatabaseResponse();
                if (Result != null && Result.Tables[1].Rows.Count > 0)
                {
                    Status = 1;
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Result;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
            }
        }

        #endregion

        #region Bond Stock Value Report
        public void GetBondStockValueReport(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("BondStockValueReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];




            List<WFLD_BondStockValue> model = new List<WFLD_BondStockValue>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetBondStockValueExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }


        private string GetBondStockValueExcel(List<WFLD_BondStockValue> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Bond Stock As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Stock Value Report From " + datevalue + " TO " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //   tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion

        #region Work Slip BTT Cargo

        public void WorkSlipBTT(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("WorkSlipBTTRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        public void WorkSlipBTTxls(WorkSlipCartingReport objWork)
        {

            DateTime dtfrom = DateTime.ParseExact(objWork.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(objWork.PeriodTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });

            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("BttWorkSlipRPT", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            List<WFLD_BttWorkSlip> BttWorkSlipList = new List<WFLD_BttWorkSlip>();

            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    BttWorkSlipList = (from DataRow dr in dt.Rows
                                       select new WFLD_BttWorkSlip()
                                       {
                                           SLNO = Convert.ToInt32(dr["SLNO"]),
                                           Date = (dr["BTTDate"]).ToString(),
                                           ShippingBillNo = dr["ShippingBillNo"].ToString(),
                                           BttDate = dr["BttDate"].ToString(),
                                           Weight = Convert.ToDecimal(dr["GrossWeight"]),
                                           Amount = Convert.ToDecimal(dr["Amount"])

                                       }).ToList();
                    DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";

                    _DBResponse.Data = BTTXLXreport(BttWorkSlipList, dtfrom.ToString("dd/MM/yyyy"), dtTo.ToString("dd/MM/yyyy"));

                }

                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        private string BTTXLXreport(List<WFLD_BttWorkSlip> WFLDBttWorkSlipDetail, string date1, string date2)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                //var title = @"CENTRAL WAREHOUSING CORPORATION"
                //        + Environment.NewLine + "(A Govt. of India Undertaking)"
                //        + Environment.NewLine + "ICD Patparganj-Delhi"
                //        + Environment.NewLine + Environment.NewLine
                //        + "ExportContainer Income Detail";
                string typeOfValue = "";

                typeOfValue = " DURING PERIOD OF " + date1 + " TO " + date2;



                exl.MargeCell("A1:H1", "CENTRAL WAREHOUSING CORPORATION", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A2:H2", "(A Govt. of India Undertaking)", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A3:H3", "107-109 , EPIP Zone , KIADB Industrial Area Whitefield , Bengaluru, Pin. - 560066", DynamicExcel.CellAlignment.Middle, DynamicExcel.CellFontStyle.Bold);

                exl.MargeCell("A4:H4", "BTT WORK SLIP   " + typeOfValue, DynamicExcel.CellAlignment.Middle);
                /// exl.MargeCell("A5:H5", typeOfValue, DynamicExcel.CellAlignment.Middle);
                // exl.MargeCell("A4:F4", "DETAILS OF ORIGINAL INOICE", DynamicExcel.CellAlignment.Middle);
                //exl.MargeCell("G4:O4", "DETAILS OF CREDIT NOTE ISSUED", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A5:A6", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B5:B6", "Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C5:C6", "ShippingBillNo", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D5:D6", "BTT Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E5:E6", "Weight.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F5:F6", "Amount", DynamicExcel.CellAlignment.Middle);


                //for (var i = 65; i < 86; i++)
                //{
                //    char character = (char)i;
                //    string text = character.ToString();
                //    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                //}
                var Weight = WFLDBttWorkSlipDetail.Sum(o => o.Weight);
                var Amount = WFLDBttWorkSlipDetail.Sum(o => o.Amount);
                exl.AddTable("A", 7, WFLDBttWorkSlipDetail, new[] { 6, 20, 20, 30, 12, 20 });
                exl.AddCell("D" + (WFLDBttWorkSlipDetail.Count + 7).ToString(), "Total", DynamicExcel.CellAlignment.TopLeft, DynamicExcel.CellFontStyle.Bold);

                exl.AddCell("E" + (WFLDBttWorkSlipDetail.Count + 7).ToString(), Weight.ToString(), DynamicExcel.CellAlignment.TopLeft, DynamicExcel.CellFontStyle.Bold);
                exl.AddCell("F" + (WFLDBttWorkSlipDetail.Count + 7).ToString(), Amount.ToString(), DynamicExcel.CellAlignment.TopLeft, DynamicExcel.CellFontStyle.Bold);

                exl.Save();
            }
            return excelFile;
        }





        #endregion


        #region Import Stock Value Report
        public void GetImportStockValueReport(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("ImportStockValueReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];


            List<WFLD_ImportStockValue> model = new List<WFLD_ImportStockValue>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetImportStockValueExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }


        private string GetImportStockValueExcel(List<WFLD_ImportStockValue> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");

                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }


                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Import Stock Value Report From " + datevalue + " to " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //   tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion

        #region Export Stock Value Report
        public void GetExportStockValueReport(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("ExportStockValueReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];


            List<WFLD_ExportStockValue> model = new List<WFLD_ExportStockValue>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetExportStockValueExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }


        private string GetExportStockValueExcel(List<WFLD_ExportStockValue> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");

                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }


                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Export Stock Value Report From " + datevalue + " to " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //   tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion
        #region BulkDebit/CreaditNote


        #endregion
        #region Register of E-Invoice 
        public void GetRegisterofEInvoice(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });

            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetRegisterofEInvoice", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];


            List<WFLDRegisterOfEInvoiceModel> model = new List<WFLDRegisterOfEInvoiceModel>();
            try
            {

                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = RegisterofEInvoiceExcel(model, dt);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }

        }


        private string RegisterofEInvoiceExcel(List<WFLDRegisterOfEInvoiceModel> model, DataTable dt)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    //if (i % 2 != 0)
                    //{
                    //    Grid.Rows[i].Attributes.Add("class", "textmode");
                    //}
                    //else
                    //{
                    //    Grid.Rows[i].Attributes.Add("class", "textmode2");
                    //}

                }
                //var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                //          + "Principal Place of Business</br>"
                //          + "CENTRAL WAREHOUSE</br>"
                //          + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)</br>";

                //System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                //cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                //System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                //tr1.Cells.Add(cell1);
                //tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell2 = new System.Web.UI.WebControls.TableCell();
                //cell2.Text = "Principal Place of Business";
                //System.Web.UI.WebControls.TableRow tr2 = new System.Web.UI.WebControls.TableRow();
                //tr2.Cells.Add(cell2);
                //tr2.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                //System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                //cell3.Text = "CENTRAL WAREHOUSE";
                //System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                //tr3.Cells.Add(cell3);
                //tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                //System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                //cell4.Text = "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                //System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                //tr4.Cells.Add(cell4);
                //tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                //tb.Rows.Add(tr1);
                //tb.Rows.Add(tr2);
                //tb.Rows.Add(tr3);
                //tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }


        #endregion

        #region Bulk EInvoice Generation

        public void GetBulkIrnDetails()
        {
            int Status = 0;

            IDataParameter[] DParam = { };

            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            WFLD_BulkIRN objInvoice = new WFLD_BulkIRN();
            IDataReader Result = DataAccess.ExecuteDataReader("IRNNotgeneratedInvoiceList", CommandType.StoredProcedure);
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    objInvoice.lstPostPaymentChrg.Add(new WFLD_BulkIRNDetails
                    {
                        InvoiceId = Convert.ToInt32(Result["InvoiceId"]),
                        InvoiceNo = Result["InvoiceNo"].ToString(),
                        InvoiceDate = Result["InvoiceDate"].ToString(),
                        PartyName = Result["PartyName"].ToString(),
                        GstNo = Result["GstNo"].ToString(),
                        SupplyType = Result["SupplyType"].ToString(),
                        InvoiceType = Result["InvoiceType"].ToString(),
                        OperationType = Result["InvType"].ToString()
                    });
                }

                _DBResponse.Status = 1;
                _DBResponse.Message = "Success";
                _DBResponse.Data = objInvoice;
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }

        public void AddEditIRNErrorResponse(string InvoiceNo, string ErrorMessage, int ErrorCode)
        {
            string GeneratedClientId = "";
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceNo", MySqlDbType = MySqlDbType.VarChar, Value = InvoiceNo });
            lstParam.Add(new MySqlParameter { ParameterName = "in_ErrorMessage", MySqlDbType = MySqlDbType.String, Value = ErrorMessage });
            lstParam.Add(new MySqlParameter { ParameterName = "in_ErrorCode", MySqlDbType = MySqlDbType.Int32, Value = ErrorCode });


            lstParam.Add(new MySqlParameter { ParameterName = "RetValue", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            lstParam.Add(new MySqlParameter { ParameterName = "GeneratedClientId", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });
            lstParam.Add(new MySqlParameter { ParameterName = "ReturnObj", MySqlDbType = MySqlDbType.Int32, Value = 0, Direction = ParameterDirection.Output });

            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            int Result = DA.ExecuteNonQuery("AddeditirnErrorResponce", CommandType.StoredProcedure, DParam, out GeneratedClientId);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (Result == 1 || Result == 2)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = (Result == 1) ? "IRN Generate Successfully" : "IRN Generate Successfully";
                    _DBResponse.Status = Result;
                }
                else if (Result == 3)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "This Container information is already exists!";
                    _DBResponse.Status = Result;
                }
                else if (Result == 4)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Can not update as seal cutting done!";
                    _DBResponse.Status = Result;
                }
                else if (Result == 5)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Can not update as job order by road done!";
                    _DBResponse.Status = Result;
                }
                else if (Result == 6)
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Duplicate OBL No.!";
                    _DBResponse.Status = Result;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
        }
        #endregion

        #region Container IN and OUT Report
        public void GetContainerInandOutReport(DateTime date1, DateTime date2)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            DataSet ds = DataAccess.ExecuteDataSet("ContainerInandOutReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];


            List<WFLD_ContainerInandOut> model = new List<WFLD_ContainerInandOut>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetContainerInandOutReportExcel(model, dt, date1.ToString("dd/MM/yyyy"), date2.ToString("dd/MM/yyyy"));
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }


        private string GetContainerInandOutReportExcel(List<WFLD_ContainerInandOut> model, DataTable dt, string datevalue, string datevalueto)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");

                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }


                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Container IN and OUT Report From " + datevalue + " to " + datevalueto;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //   tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }

        #endregion
        #region Insurance Register
        public void GetGodownForInsuranceRegister()
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            // LstParam.Add(new MySqlParameter { ParameterName = "in_Uid", MySqlDbType = MySqlDbType.Int32, Value = Uid });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("GetGodownListInsuranceRegister", CommandType.StoredProcedure, DParam);
            IList<CwcExim.Areas.Import.Models.GodownList> lst = new List<CwcExim.Areas.Import.Models.GodownList>();
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    lst.Add(new CwcExim.Areas.Import.Models.GodownList
                    {
                        GodownName = Result["GodownName"].ToString(),
                        GodownId = Convert.ToInt32(Result["GodownId"])
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lst;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        public void InsuranceRegisterPrint(WFLD_InsuranceRegister obj, string FromDate, string ToDate)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_GodownId", MySqlDbType = MySqlDbType.Int32, Value = obj.GodownId });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("InsuranceRegister", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            WFLD_InsuranceRegister lstPV = new WFLD_InsuranceRegister();
            //try
            //{
            //    while (Result.Read())
            //    {
            //        Status = 1;
            //        lstPV.Add(new Dnd_TotalContainerReport
            //        {
            //            CFSCode = Result["CFSCode"].ToString(),
            //            ContainerNo = Result["ContainerNo"].ToString(),
            //            Size = Result["Size"].ToString(),
            //            ShippingLine = Result["ShippingLine"].ToString(),
            //            GatePassNo = Result["GatePassNo"].ToString(),
            //            GatePassDate = Result["GatePassDate"].ToString(),
            //            VehicleNo = Result["VehicleNo"].ToString(),
            //            OutDate = Result["OutDate"].ToString(),
            //        });
            //    }
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    lstPV.LstIns.Add(new WFLD_InsuranceRegister
                    {
                        SVDate = Convert.ToString(Result["Date"]),
                        CIFValue = Convert.ToDecimal(Result["FOBValue"]),
                        Duty = Convert.ToDecimal(Result["Duty"]),
                        GodownId = Convert.ToInt32(Result["GodownId"]),
                        GodownName = Convert.ToString(Result["GodownName"]),
                        //    });
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion

        #region E04 Report

        public void ListofE04Report(int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("ListofE04Report", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Wfld_E04Report> LstE04 = new List<Wfld_E04Report>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstE04.Add(new Wfld_E04Report
                    {
                        ID = Convert.ToInt32(Result["ID"]),
                        CUSTOM_CD = Result["CUSTOM_CD"].ToString(),
                        SB_NO = Result["SB_NO"].ToString(),
                        SB_DATE = Result["SB_DATE"].ToString(),
                        IEC_CD = Result["IEC_CD"].ToString(),
                        BI_NO = Result["BI_NO"].ToString(),
                        EXP_NAME = Result["EXP_NAME"].ToString(),
                        Address = Result["Address"].ToString(),
                        CHA_CODE = Result["CHA_CODE"].ToString(),
                        FOB = Result["FOB"].ToString(),
                        POD = Result["POD"].ToString(),
                        LEO_NO = Result["LEO_NO"].ToString(),
                        LEO_DATE = Result["LEO_DATE"].ToString(),
                        ENTRY_NO = Result["ENTRY_NO"].ToString(),
                        G_DATE = Result["G_DATE"].ToString(),
                        TRANSHIPPER_CODE = Result["TRANSHIPPER_CODE"].ToString(),
                        GATEWAY_PORT = Result["GATEWAY_PORT"].ToString(),
                        PCIN = Result["PCIN"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstE04;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetE04DetailById(int ID)
        {
            List<MySqlParameter> lstParam = new List<MySqlParameter>();
            lstParam.Add(new MySqlParameter { ParameterName = "in_ID", MySqlDbType = MySqlDbType.Int32, Value = ID });
            DataAccessLayerBaseClass DA = DataAccessLayerFactory.GetDataAccessLayer();
            IDataParameter[] DParam = lstParam.ToArray();
            IDataReader Result = DA.ExecuteDataReader("ViewE04Details", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            Wfld_E04Report objE04Report = new Wfld_E04Report();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    objE04Report.ID = Convert.ToInt32(Result["ID"]);
                    objE04Report.CUSTOM_CD = Result["CUSTOM_CD"].ToString();
                    objE04Report.SB_NO = Result["SB_NO"].ToString();
                    objE04Report.SB_DATE = Result["SB_DATE"].ToString();
                    objE04Report.IEC_CD = Result["IEC_CD"].ToString();
                    objE04Report.BI_NO = Result["BI_NO"].ToString();
                    objE04Report.EXP_NAME = Result["EXP_NAME"].ToString();
                    objE04Report.EXP_ADD1 = Result["EXP_ADD1"].ToString();
                    objE04Report.EXP_ADD2 = Result["EXP_ADD2"].ToString();
                    objE04Report.PIN = Result["PIN"].ToString();
                    objE04Report.CITY = Result["CITY"].ToString();
                    objE04Report.CHA_CODE = Result["CHA_CODE"].ToString();
                    objE04Report.FOB = Result["FOB"].ToString();
                    objE04Report.POD = Result["POD"].ToString();
                    objE04Report.LEO_NO = Result["LEO_NO"].ToString();
                    objE04Report.LEO_DATE = Result["LEO_DATE"].ToString();
                    objE04Report.ENTRY_NO = Result["ENTRY_NO"].ToString();
                    objE04Report.G_DATE = Result["G_DATE"].ToString();
                    objE04Report.TRANSHIPPER_CODE = Result["TRANSHIPPER_CODE"].ToString();
                    objE04Report.GATEWAY_PORT = Result["GATEWAY_PORT"].ToString();
                    objE04Report.PCIN = Result["PCIN"].ToString();
                }

                if (Status == 1)
                {
                    _DBResponse.Data = objE04Report;
                    _DBResponse.Message = "Success";
                    _DBResponse.Status = 1;
                }
                else
                {
                    _DBResponse.Data = null;
                    _DBResponse.Message = "Error";
                    _DBResponse.Status = 0;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Data = null;
                _DBResponse.Message = "Error";
                _DBResponse.Status = 0;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }

        public void GetE04DetailSearch(string SB_No, string SB_Date, string Exp_Name)
        {
            //string SBDate ="";
            //if (SB_Date != null && SB_Date != "" )
            //{
            //    DateTime SBDt = DateTime.ParseExact(SB_Date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //    SBDate = SBDt.ToString("yyyy-MM-dd");
            //}            

            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_SBNo", MySqlDbType = MySqlDbType.VarChar, Value = SB_No });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Exporter", MySqlDbType = MySqlDbType.VarChar, Value = Exp_Name });
            LstParam.Add(new MySqlParameter { ParameterName = "in_SBDate", MySqlDbType = MySqlDbType.VarChar, Value = SB_Date });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("ListofE04Search", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Wfld_E04Report> LstE04Report = new List<Wfld_E04Report>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    LstE04Report.Add(new Wfld_E04Report
                    {
                        ID = Convert.ToInt32(Result["ID"]),
                        CUSTOM_CD = Result["CUSTOM_CD"].ToString(),
                        SB_NO = Result["SB_NO"].ToString(),
                        SB_DATE = Result["SB_DATE"].ToString(),
                        IEC_CD = Result["IEC_CD"].ToString(),
                        BI_NO = Result["BI_NO"].ToString(),
                        EXP_NAME = Result["EXP_NAME"].ToString(),
                        Address = Result["Address"].ToString(),
                        CHA_CODE = Result["CHA_CODE"].ToString(),
                        FOB = Result["FOB"].ToString(),
                        POD = Result["POD"].ToString(),
                        LEO_NO = Result["LEO_NO"].ToString(),
                        LEO_DATE = Result["LEO_DATE"].ToString(),
                        ENTRY_NO = Result["ENTRY_NO"].ToString(),
                        G_DATE = Result["G_DATE"].ToString(),
                        TRANSHIPPER_CODE = Result["TRANSHIPPER_CODE"].ToString(),
                        GATEWAY_PORT = Result["GATEWAY_PORT"].ToString(),
                        PCIN = Result["PCIN"].ToString()
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = LstE04Report;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }


        #endregion
        #region Insurance Yard Register

        public void InsuranceYardRegisterPrint(WFLD_InsuranceYardRegister obj, string FromDate, string ToDate)
        {
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.Date, Value = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd") });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Module", MySqlDbType = MySqlDbType.VarChar, Value = obj.Module });
            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("InsuranceRegisterYard", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            int Status = 0;
            List<WFLD_InsuranceYardRegister> lstPV = new List<WFLD_InsuranceYardRegister>();
            //try
            //{
            //    while (Result.Read())
            //    {
            //        Status = 1;
            //        lstPV.Add(new Dnd_TotalContainerReport
            //        {
            //            CFSCode = Result["CFSCode"].ToString(),
            //            ContainerNo = Result["ContainerNo"].ToString(),
            //            Size = Result["Size"].ToString(),
            //            ShippingLine = Result["ShippingLine"].ToString(),
            //            GatePassNo = Result["GatePassNo"].ToString(),
            //            GatePassDate = Result["GatePassDate"].ToString(),
            //            VehicleNo = Result["VehicleNo"].ToString(),
            //            OutDate = Result["OutDate"].ToString(),
            //        });
            //    }
            try
            {


                while (Result.Read())
                {
                    Status = 1;
                    lstPV.Add(new WFLD_InsuranceYardRegister
                    {
                        Date = Convert.ToString(Result["destuffingdate"]),
                        // SVDate = Convert.ToString(Result["Date"]),
                        CIFValue = Convert.ToDecimal(Result["RemValue"]),
                        Duty = Convert.ToDecimal(Result["RemDuty"]),
                        size = Convert.ToString(Result["size"]),
                        Module = Convert.ToString(Result["Module"]),
                        //    });
                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = lstPV;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();
            }
        }
        #endregion

        #region Payer Ledger
        public void GetAllPartyForPartyLedger(string PartyCode, int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();           
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyCode", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = PartyCode });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetAllPartyForPayerLedger", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<VIZ_PartyForCashDet> LstParty = new List<VIZ_PartyForCashDet>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstParty.Add(new VIZ_PartyForCashDet
                    {
                        Party = Result["Party"].ToString(),
                        PartyId = Convert.ToInt32(Result["PartyId"]),
                        PartyCode = Result["PartyCode"].ToString()

                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstParty, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }


        public void GetPayerLedgerStatement(int PartyId, string FromDate, string ToDate)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PartyId", MySqlDbType = MySqlDbType.Int32, Value = PartyId });
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDate", MySqlDbType = MySqlDbType.Date, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDate", MySqlDbType = MySqlDbType.Date, Value = ToDate });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetPayerLedgerStatement", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            VIZ_CashDetailsStatement SDResult = new VIZ_CashDetailsStatement();
            int isSDParty = 0;
            try
            {

                while (Result.Read())
                {
                    Status = 1;
                    SDResult.PartyName = Result["PartyName"].ToString();
                    SDResult.PartyCode = Result["PartyCode"].ToString();
                    SDResult.PartyGst = Result["PartyGst"].ToString();
                    SDResult.CompanyGst = Result["CompanyGst"].ToString();
                    SDResult.Opening = Convert.ToDecimal(Result["Opening"]);
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.lstInvc.Add(
                            new VIZ_CashInvoiceDet
                            {                               
                                SL = Convert.ToInt32(Result["Sl"]),
                                InvoiceNo = Result["InvoiceNo"].ToString(),
                                InvoiceDate = Result["InvoiceDate"].ToString(),
                                ReceiptNo = Result["ReceiptNo"].ToString(),
                                ReceiptDate = Result["ReceiptDate"].ToString(),
                                ReceiptAmt = Convert.ToDecimal(Result["ReceiptAmt"]),
                                TranType = Result["TranType"].ToString(),
                                TranAmt = Convert.ToDecimal(Result["TranAmt"]),
                                CrAdjust = Convert.ToInt32(Result["CrAdjust"]),


                            });
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.UtilizationAmount = Convert.ToDecimal(Result["UtilizationAmount"]);
                    }
                }

                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.SDBalance = Convert.ToDecimal(Result["SDBalance"]);
                    }
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        SDResult.IsPda = Convert.ToInt32(Result["isFlag"]);
                    }
                }


                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = SDResult;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }



        #endregion

        #region Register of Outward 
        public void GetRegisterofOutward(DateTime date1, DateTime date2)
        {

            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            
            DataSet ds = DataAccess.ExecuteDataSet("GetRegisterofOutward", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            List<VIZ_RegisterOfOutwardSupply> model = new List<VIZ_RegisterOfOutwardSupply>();
            try
            {
                if (ds.Tables.Count > 0)
                {
                    model = (from DataRow dr in dt.Rows
                             select new VIZ_RegisterOfOutwardSupply()
                             {
                                 SlNo = Convert.ToInt32(dr["SlNo"]),
                                 GST = dr["GST"].ToString(),
                                 Place = dr["Place"].ToString(),
                                 Name = dr["Name"].ToString(),
                                 Period = dr["Period"].ToString(),

                                 Nature = dr["Nature"].ToString(),
                                 Rate = Convert.ToDecimal(dr["Rate"]),
                                 InvoiceNo = dr["InvoiceNo"].ToString(),
                                 InvoiceDate = dr["InvoiceDate"].ToString(),
                                 ServiceValue = Convert.ToDecimal(dr["ServiceValue"]),

                                 ITaxPercent = dr["ITaxPercent"].ToString(),
                                 ITaxAmount = Convert.ToDecimal(dr["ITaxAmount"]),
                                 CTaxPercent = dr["CTaxPercent"].ToString(),
                                 CTaxAmount = Convert.ToDecimal(dr["CTaxAmount"]),
                                 STaxPercent = dr["STaxPercent"].ToString(),
                                 STaxAmount = Convert.ToDecimal(dr["STaxAmount"]),
                                 RoundUp = Convert.ToDecimal(dr["RoundUp"]),
                                 Total = Convert.ToDecimal(dr["Total"]),
                                 WH = dr["WH"].ToString(),
                                 CRNoDate = dr["CRNoDate"].ToString(),
                                 Amount = Convert.ToDecimal(dr["Amount"]),

                                 Received = Convert.ToDecimal(dr["Received"]),
                                 Adjustment = Convert.ToDecimal(dr["Adjustment"]),
                                 ChequeNoDate = dr["CHDD"].ToString()
                             }).ToList();
                }
                decimal InvoiceAmount = 0, CRAmount = 0;
                foreach (DataRow dr in ds.Tables[1].Rows)
                {
                    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
                    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
                }
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = RegisterofOutwardExcel(model, InvoiceAmount, CRAmount);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        private string RegisterofOutwardExcel(List<VIZ_RegisterOfOutwardSupply> model, decimal InvoiceAmount, decimal CRAmount)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                exl.MargeCell("A1:M1", title, DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N1", "BILL REGISTER", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "Place of Supply" + Environment.NewLine + "(Name of State)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "Name of Customer to whom Service rendered", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Period of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "Nature of Invoice" + Environment.NewLine + "(Resv./Initial Fumigatiom/General Basic/Over & Above)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "Rate per" + Environment.NewLine + "Bag/MT/Sqm", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H2:J2", "Invoice Details", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H3:H4", "Invoice No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I3:I4", "Date of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J3:J4", "Value of Service" + Environment.NewLine + "(Before Tax)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K2:P2", "Rate of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K3:L3", "IGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M3:N3", "CGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("O3:P3", "SGST", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("K4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("L4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("M4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("O4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("P4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Q4", "RoundUp", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(10+12+17 or 10+14+16+17))", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("S2:S2", "Perticulars of Payment Received", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("S3:S4", "Received" + Environment.NewLine + "At WH/RO", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("T3:T4", "C.R No. & Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("U3:U4", "Cheque/DD No. & Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("V3:V4", "Amount of DD/Cheque (Rs.)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("W2:W4", "Amount Received Against Bill (Rs.)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("X2:X4", "Adjustment/Deduction", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("Y2:Y4", "Balance", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("Z2:Z4", "Remarks", DynamicExcel.CellAlignment.Middle);
                for (var i = 65; i < 90; i++)
                {
                    char character = (char)i;
                    string text = character.ToString();
                    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                }
                
                exl.AddTable<VIZ_RegisterOfOutwardSupply>("A", 6, model, new[] { 6, 20, 20, 40, 12, 16, 10, 10, 12, 12, 8, 14, 8, 14, 8, 14, 16, 12, 30, 14, 14, 14, 14, 14, 40, 40 });
                var igstamt = model.Sum(o => o.ITaxAmount);
                var sgstamt = model.Sum(o => o.STaxAmount);
                var cgstamt = model.Sum(o => o.CTaxAmount);
                var roundup = model.Sum(o => o.RoundUp);
                var totalamt = model.Sum(o => o.Total);
                var val = model.Sum(o => o.ServiceValue);
                //exl.AddCell("J" + (model.Count + 6).ToString(), igstamt, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("J" + (model.Count + 6).ToString(), val, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("L" + (model.Count + 6).ToString(), igstamt, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("N" + (model.Count + 6).ToString(), cgstamt, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 6).ToString(), sgstamt, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Q" + (model.Count + 6).ToString(), roundup, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("R" + (model.Count + 6).ToString(), totalamt, DynamicExcel.CellAlignment.CenterRight);
                /*exl.AddCell("O" + (model.Count + 7).ToString(), "Invoice Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 7).ToString(), InvoiceAmount, DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 8).ToString(), "Cash Receipt Amount", DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("P" + (model.Count + 8).ToString(), CRAmount, DynamicExcel.CellAlignment.CenterRight);*/
                exl.Save();
            }
            return excelFile;
        }

        #endregion

        #region Register of Outward Supply   
        public void GetRegisterofOutwardSupply(DateTime date1, DateTime date2, string Type)
        {
            var LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_From", MySqlDbType = MySqlDbType.DateTime, Value = date1 });
            LstParam.Add(new MySqlParameter { ParameterName = "in_To", MySqlDbType = MySqlDbType.DateTime, Value = date2 });
            LstParam.Add(new MySqlParameter { ParameterName = "In_Type", MySqlDbType = MySqlDbType.VarChar, Value = Type });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            _DBResponse = new DatabaseResponse();
            //var objRegOutwardSupply = (List<RegisterOfOutwardSupplyModel>)DataAccess.ExecuteDynamicSet<List<RegisterOfOutwardSupplyModel>>("GetRegisterofOutwardSupply", DParam);
            DataSet ds = DataAccess.ExecuteDataSet("GetRegisterofOutwardSupply", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            if (Type == "Inv" || Type == "Unpaid" || Type == "CancelInv")
            {
                List<VIZ_RegisterOfOutwardSupplyModel> model = new List<VIZ_RegisterOfOutwardSupplyModel>();
                try
                {
                    if (ds.Tables.Count > 0)
                    {
                        model = (from DataRow dr in dt.Rows
                                 select new VIZ_RegisterOfOutwardSupplyModel()
                                 {
                                     SlNo = Convert.ToInt32(dr["SlNo"]),
                                     GST = dr["GST"].ToString(),
                                     Place = dr["Place"].ToString(),
                                     Name = dr["Name"].ToString(),
                                     Period = dr["Period"].ToString(),

                                     Nature = dr["Nature"].ToString(),
                                     Rate = Convert.ToDecimal(dr["Rate"]),
                                     InvoiceNo = dr["InvoiceNo"].ToString(),
                                     InvoiceDate = dr["InvoiceDate"].ToString(),
                                     ServiceValue = Convert.ToDecimal(dr["ServiceValue"]),

                                     ITaxPercent = dr["ITaxPercent"].ToString(),
                                     ITaxAmount = Convert.ToDecimal(dr["ITaxAmount"]),
                                     CTaxPercent = dr["CTaxPercent"].ToString(),
                                     CTaxAmount = Convert.ToDecimal(dr["CTaxAmount"]),
                                     STaxPercent = dr["STaxPercent"].ToString(),
                                     STaxAmount = Convert.ToDecimal(dr["STaxAmount"]),

                                     Total = Convert.ToDecimal(dr["Total"]),
                                     //WH = dr["WH"].ToString(),
                                     //CRNoDate = dr["CRNoDate"].ToString(),
                                     //SD = Convert.ToDecimal(dr["SD"]),
                                     //Amount = Convert.ToDecimal(dr["Amount"]),
                                     //TDS = Convert.ToDecimal(dr["TDS"]),
                                     //ChequeNoDate = dr["CHDD"].ToString(),
                                     PaymentMode = dr["PaymentMode"].ToString(),
                                     Remarks = dr["Remarks"].ToString()
                                     ,
                                     HSNCode = dr["HSNCode"].ToString()
                                 }).ToList();
                    }
                    decimal InvoiceAmount = 0, CRAmount = 0;
                    //foreach (DataRow dr in ds.Tables[1].Rows)
                    //{
                    //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
                    //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
                    //}
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = RegisterofOutwardSupplyExcel(model, InvoiceAmount, CRAmount);
                }
                catch (Exception ex)
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
                finally
                {
                    ds.Dispose();
                }
            }
            else
            {
                List<VIZ_RegisterOfOutwardSupplyModelCreditDebit> modelCreditDebit = new List<VIZ_RegisterOfOutwardSupplyModelCreditDebit>();
                try
                {
                    if (ds.Tables.Count > 0)
                    {
                        modelCreditDebit = (from DataRow dr in dt.Rows
                                            select new VIZ_RegisterOfOutwardSupplyModelCreditDebit()
                                            {
                                                SlNo = Convert.ToInt32(dr["SlNo"]),
                                                GST = dr["GST"].ToString(),
                                                Place = dr["Place"].ToString(),
                                                Name = dr["Name"].ToString(),
                                                Period = dr["Period"].ToString(),

                                                Nature = dr["Nature"].ToString(),
                                                HSNCode = dr["HSNCode"].ToString(),
                                                Rate = Convert.ToDecimal(dr["Rate"]),
                                                CreditNoteNo = dr["CreditNoteNo"].ToString(),
                                                CRNoteDate = dr["CRNoteDate"].ToString(),
                                                InvoiceNo = dr["InvoiceNo"].ToString(),
                                                InvoiceDate = dr["InvoiceDate"].ToString(),
                                                ServiceValue = Convert.ToDecimal(dr["ServiceValue"]),

                                                ITaxPercent = dr["ITaxPercent"].ToString(),
                                                ITaxAmount = Convert.ToDecimal(dr["ITaxAmount"]),
                                                CTaxPercent = dr["CTaxPercent"].ToString(),
                                                CTaxAmount = Convert.ToDecimal(dr["CTaxAmount"]),
                                                STaxPercent = dr["STaxPercent"].ToString(),
                                                STaxAmount = Convert.ToDecimal(dr["STaxAmount"]),

                                                Total = Convert.ToDecimal(dr["Total"]),
                                                Remarks = dr["Remarks"].ToString()

                                            }).ToList();
                    }
                    decimal InvoiceAmount = 0, CRAmount = 0;
                    //foreach (DataRow dr in ds.Tables[1].Rows)
                    //{
                    //    InvoiceAmount = Convert.ToDecimal(dr["InvoiceAmount"]);
                    //    CRAmount = Convert.ToDecimal(dr["CRAmount"]);
                    //}
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = RegisterofOutwardSupplyExcelCreditDebit(modelCreditDebit, InvoiceAmount, CRAmount);
                }
                catch (Exception ex)
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
                finally
                {
                    ds.Dispose();
                }
            }


        }
        private string RegisterofOutwardSupplyExcel(List<VIZ_RegisterOfOutwardSupplyModel> model, decimal InvoiceAmount, decimal CRAmount)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                exl.MargeCell("A1:M1", title, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N1:O1", "BILL REGISTER", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "Place" + Environment.NewLine + "(Name of State)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "Name of Customer to whom Service rendered", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Period of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "Nature of Invoice" + Environment.NewLine + "(Resv./Initial Fumigatiom/General Basic/Over & Above)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "HSN Code", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("H2:H4", "Rate per" + Environment.NewLine + "Bag/MT/Sqm", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I2:K2", "Invoice Details", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I3:I4", "Invoice No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J3:J4", "Date of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K3:K4", "Value of Service" + Environment.NewLine + "(Before Tax)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L2:Q2", "Rate of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L3:M3", "IGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N3:O3", "CGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("P3:Q3", "SGST", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("L4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("M4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("R2:R4", "Total Invoice Value" + Environment.NewLine + "(18=(11+13 or 11+15+17))", DynamicExcel.CellAlignment.Middle);
               
                exl.MargeCell("S2:S4", "PaymentMode", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("T2:T4", "Remarks", DynamicExcel.CellAlignment.Middle);


                for (var i = 65; i < 85; i++)
                {
                    char character = (char)i;
                    string text = character.ToString();
                    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                }
               
                exl.AddTable<VIZ_RegisterOfOutwardSupplyModel>("A", 6, model, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 20, 12, 12, 8, 14, 8, 14, 8, 14, 16, 10, 30 });
                var igstamt = model.Sum(o => o.ITaxAmount);
                var sgstamt = model.Sum(o => o.STaxAmount);
                var cgstamt = model.Sum(o => o.CTaxAmount);
                var totalamt = model.Sum(o => o.Total);
                exl.AddCell("M" + (model.Count + 6).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("O" + (model.Count + 6).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Q" + (model.Count + 6).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("R" + (model.Count + 6).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
               

                exl.Save();
            }
            return excelFile;
        }

        private string RegisterofOutwardSupplyExcelCreditDebit(List<VIZ_RegisterOfOutwardSupplyModelCreditDebit> modelCreditDebit, decimal InvoiceAmount, decimal CRAmount)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
            {
                var title = @"CENTRAL WAREHOUSING CORPORATION"
                        + Environment.NewLine + "Principal Place of Business"
                        + Environment.NewLine + "CENTRAL WAREHOUSE"
                        + Environment.NewLine + Environment.NewLine
                        + "REGISTER OF OUTWARD SUPPLY (TAX INVOICE/BILL OF SUPPLY)";
                exl.MargeCell("A1:M1", title, DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N1:O1", "BILL REGISTER", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("A2:A4", "Sl.No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("B2:B4", "GSTIN", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("C2:C4", "Place" + Environment.NewLine + "(Name of State)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("D2:D4", "Name of Customer to whom Service rendered", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("E2:E4", "Period of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("F2:F4", "Nature of Invoice" + Environment.NewLine + "(Resv./Initial Fumigatiom/General Basic/Over & Above)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("G2:G4", "HSN Code", DynamicExcel.CellAlignment.Middle);

                exl.MargeCell("H2:H4", "Rate per" + Environment.NewLine + "Bag/MT/Sqm", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("I2:I4", "Credit / Debit Note No", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("J2:J4", "Credit / Debit Note Date", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K2:M2", "Invoice Details", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("K3:K4", "Invoice No.", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("L3:L4", "Date of Invoice", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("M3:M4", "Value of Service" + Environment.NewLine + "(Before Tax)", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N2:S2", "Rate of Tax", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("N3:O3", "IGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("P3:Q3", "CGST", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("R3:S3", "SGST", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("N4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("O4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("P4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("Q4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("R4", "%", DynamicExcel.CellAlignment.Middle);
                exl.AddCell("S4", "Amount", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("T2:T4", "Total Invoice Value" + Environment.NewLine + "(14=(10+12 or 10+14+16))", DynamicExcel.CellAlignment.Middle);
                exl.MargeCell("U2:U4", "Remarks", DynamicExcel.CellAlignment.Middle);
                

                for (var i = 65; i < 86; i++)
                {
                    char character = (char)i;
                    string text = character.ToString();
                    exl.AddCell(text + "5", (i - 64), DynamicExcel.CellAlignment.Middle);
                }
               
                exl.AddTable("A", 6, modelCreditDebit, new[] { 6, 20, 20, 20, 12, 20, 10, 15, 15, 15, 20, 12, 12, 8, 14, 8, 14, 8, 14, 16, 30 });
                var igstamt = modelCreditDebit.Sum(o => o.ITaxAmount);
                var sgstamt = modelCreditDebit.Sum(o => o.STaxAmount);
                var cgstamt = modelCreditDebit.Sum(o => o.CTaxAmount);
                var totalamt = modelCreditDebit.Sum(o => o.Total);
                exl.AddCell("O" + (modelCreditDebit.Count + 6).ToString(), igstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("Q" + (modelCreditDebit.Count + 6).ToString(), cgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("S" + (modelCreditDebit.Count + 6).ToString(), sgstamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
                exl.AddCell("T" + (modelCreditDebit.Count + 6).ToString(), totalamt.ToString(), DynamicExcel.CellAlignment.CenterRight);
               

                exl.Save();
            }
            return excelFile;
        }

        #endregion
        #region Stuffing Acknowledgement Search       

        public void GetAllContainerNoForContstufserach(string cont, int Page = 0)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_cont", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = cont });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_CFSCode", MySqlDbType = MySqlDbType.VarChar, Value = '0' });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetContainerNoForstufack", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            // List<StuffingRequestDtl> LstStuffing = new List<StuffingRequestDtl>();
            List<Viz_ContStufAckSearch> LstStuffing = new List<Viz_ContStufAckSearch>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstStuffing.Add(new Viz_ContStufAckSearch
                    {
                        ContainerNo = Result["ContainerNo"].ToString(),
                        CFSCode = Result["CFSCode"].ToString(),
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstStuffing, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetAllShippingBillNoForContstufserach(string shipbill, int Page)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Size = 50, Value = shipbill });
            LstParam.Add(new MySqlParameter { ParameterName = "in_Page", MySqlDbType = MySqlDbType.Int32, Value = Page });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_CFSCode", MySqlDbType = MySqlDbType.VarChar, Value = '0' });
            // LstParam.Add(new MySqlParameter { ParameterName = "in_BranchId", MySqlDbType = MySqlDbType.Int32, Value = Convert.ToInt32(HttpContext.Current.Session["BranchId"]) });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetshippingbillNoForstufack", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            // List<StuffingRequestDtl> LstStuffing = new List<StuffingRequestDtl>();
            List<Viz_ContStufAckSearch> LstStuff = new List<Viz_ContStufAckSearch>();
            try
            {
                bool State = false;
                while (Result.Read())
                {
                    Status = 1;
                    LstStuff.Add(new Viz_ContStufAckSearch
                    {
                        shippingbillno = Result["ShippingBillNo"].ToString(),
                        shippingbilldate = Result["ShippingBillDate"].ToString(),
                        // ShippingLine = Result["ShippingLine"].ToString()
                    });
                }
                if (Result.NextResult())
                {
                    while (Result.Read())
                    {
                        State = Convert.ToBoolean(Result["State"]);
                    }
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = new { LstStuff, State };
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetStufAckResult(string container, string shipbill, string cfscode)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_container", MySqlDbType = MySqlDbType.VarChar, Value = container });
            LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Value = shipbill });
            LstParam.Add(new MySqlParameter { ParameterName = "in_cfscode", MySqlDbType = MySqlDbType.VarChar, Value = cfscode });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("GetStufAckResult", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Viz_ContStufAckRes> Lststufack = new List<Viz_ContStufAckRes>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    Lststufack.Add(new Viz_ContStufAckRes
                    {
                        shipbill = Result["shipbill"].ToString(),
                        reason = Result["reason"].ToString(),
                        status = Result["status"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Lststufack;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion
        #region Stuffing Loaded Search       


        public void GetStufloadResult(string jobno)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_jobno", MySqlDbType = MySqlDbType.VarChar, Value = jobno });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Value = shipbill });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_cfscode", MySqlDbType = MySqlDbType.VarChar, Value = cfscode });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("getstufloadno", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Viz_loadstuf> Lststufack = new List<Viz_loadstuf>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    Lststufack.Add(new Viz_loadstuf
                    {
                        loadstufreqno = Result["loadreqno"].ToString(),
                        expstufreqno = Result["stufreqno"].ToString(),
                        // reason = Result["reason"].ToString(),
                        // status = Result["status"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Lststufack;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetStufloadasrResult(string jobasrno)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_asrjobno", MySqlDbType = MySqlDbType.VarChar, Value = jobasrno });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Value = shipbill });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_cfscode", MySqlDbType = MySqlDbType.VarChar, Value = cfscode });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("getstufloadasrno", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Viz_loadstufasr> Lststufack = new List<Viz_loadstufasr>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    Lststufack.Add(new Viz_loadstufasr
                    {
                        loadstufasrreqno = Result["loadasrreqno"].ToString(),
                        expstufasrreqno = Result["stufasrreqno"].ToString(),
                        // reason = Result["reason"].ToString(),
                        // status = Result["status"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Lststufack;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetStufloaddpResult(string jobdpno)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_dpjobno", MySqlDbType = MySqlDbType.VarChar, Value = jobdpno });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Value = shipbill });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_cfscode", MySqlDbType = MySqlDbType.VarChar, Value = cfscode });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("getstufloaddpno", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Viz_loadstufdp> Lststufack = new List<Viz_loadstufdp>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    Lststufack.Add(new Viz_loadstufdp
                    {
                        loadstufdpreqno = Result["loaddpreqno"].ToString(),
                        expstufdpreqno = Result["stufdpreqno"].ToString(),
                        // reason = Result["reason"].ToString(),
                        // status = Result["status"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Lststufack;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        public void GetStufloaddtResult(string jobdtno)
        {
            int Status = 0;
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            LstParam.Add(new MySqlParameter { ParameterName = "in_dtjobno", MySqlDbType = MySqlDbType.VarChar, Value = jobdtno });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_shipbill", MySqlDbType = MySqlDbType.VarChar, Value = shipbill });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_cfscode", MySqlDbType = MySqlDbType.VarChar, Value = cfscode });
            IDataParameter[] DParam = { };
            DParam = LstParam.ToArray();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            IDataReader Result = DataAccess.ExecuteDataReader("getstufloaddtno", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            List<Viz_loadstufdt> Lststufack = new List<Viz_loadstufdt>();
            try
            {
                while (Result.Read())
                {
                    Status = 1;
                    Lststufack.Add(new Viz_loadstufdt
                    {
                        loadstufdtreqno = Result["loaddtreqno"].ToString(),
                        expstufdtreqno = Result["stufdtreqno"].ToString(),
                        // reason = Result["reason"].ToString(),
                        // status = Result["status"].ToString(),
                    });
                }
                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = Lststufack;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Dispose();
                Result.Close();
            }
        }
        #endregion

        #region Bond Storage Collection Register
        public void BondStorageCollectionReport(string FromDate, string ToDate)
        {

            FromDate = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            ToDate = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"); ;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_FromDt", MySqlDbType = MySqlDbType.DateTime, Value = FromDate });
            LstParam.Add(new MySqlParameter { ParameterName = "in_ToDt", MySqlDbType = MySqlDbType.DateTime, Value = ToDate });
            DParam = LstParam.ToArray();
            DataSet ds = DataAccess.ExecuteDataSet("getBondStorageCollectionRpt", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = ds;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }
        #endregion

        #region Outstanding Summary Report
        public void OutstandingSummaryReport(VIZ_OutstandingSummary ObjSummary)
        {

            DateTime dtfrom = DateTime.ParseExact(ObjSummary.PeriodFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            

            int Status = 0;
           
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_asOndate", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });            
            
            DParam = LstParam.ToArray();
            _DBResponse = new DatabaseResponse();           
            DataSet ds = DataAccess.ExecuteDataSet("OutstandingSummaryReport", CommandType.StoredProcedure, DParam);
            DataTable dt = ds.Tables[0];
            

            List<VIZ_RptOutstandingSummary> model = new List<VIZ_RptOutstandingSummary>();
            try
            {


                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = GetOutstandingSummaryExcel(model, dt, ObjSummary.PeriodFrom);
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "No Data";
                _DBResponse.Data = null;
            }
            finally
            {
                ds.Dispose();
            }
        }
        

        private string GetOutstandingSummaryExcel(List<VIZ_RptOutstandingSummary> model, DataTable dt, string datevalue)
        {
            if (!System.IO.Directory.Exists(HttpContext.Current.Server.MapPath("~/Docs/Excel")))
            {
                System.IO.Directory.CreateDirectory(HttpContext.Current.Server.MapPath("~/Docs/Excel"));
            }
            var excelFile = HttpContext.Current.Server.MapPath("~/Docs/Excel/" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".xlsx");
            System.Web.UI.WebControls.GridView Grid = new System.Web.UI.WebControls.GridView();


            System.Web.UI.WebControls.Table tb = new System.Web.UI.WebControls.Table();

            if (dt.Rows.Count > 0)
            {

                Grid.AllowPaging = false;
                Grid.DataSource = dt;
                Grid.DataBind();


                for (int i = 0; i < Grid.HeaderRow.Cells.Count; i++)
                {
                    Grid.HeaderRow.Cells[i].Style.Add("background-color", "#edebeb");
                    Grid.HeaderRow.Cells[i].Attributes.Add("class", "Headermode");


                }

                for (int i = 0; i < Grid.Rows.Count; i++)
                {
                    //Apply text style to each Row

                    Grid.Rows[i].BackColor = System.Drawing.Color.White;


                    if (i % 2 != 0)
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode");
                    }
                    else
                    {
                        Grid.Rows[i].Attributes.Add("class", "textmode2");
                    }

                }
                var title = "CENTRAL WAREHOUSING CORPORATION </br>"
                          + "Principal Place of Business</br>"
                          + "CENTRAL WAREHOUSE</br>"
                          + "Consolidate Party Ledger Statement As On Date" + datevalue + "</br>";

                System.Web.UI.WebControls.TableCell cell1 = new System.Web.UI.WebControls.TableCell();
                cell1.Text = "<b> CENTRAL WAREHOUSING CORPORATION </b> ";
                cell1.ForeColor = System.Drawing.Color.Black;
                System.Web.UI.WebControls.TableRow tr1 = new System.Web.UI.WebControls.TableRow();
                tr1.Cells.Add(cell1);
                tr1.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;                

                System.Web.UI.WebControls.TableCell cell3 = new System.Web.UI.WebControls.TableCell();
                cell3.Text = "CENTRAL WAREHOUSE";
                cell3.ForeColor = System.Drawing.Color.Black;

                System.Web.UI.WebControls.TableRow tr3 = new System.Web.UI.WebControls.TableRow();
                tr3.Cells.Add(cell3);
                tr3.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;


                System.Web.UI.WebControls.TableCell cell4 = new System.Web.UI.WebControls.TableCell();
                cell4.Text = "Outstanding Summary Report As on " + datevalue;
                System.Web.UI.WebControls.TableRow tr4 = new System.Web.UI.WebControls.TableRow();
                cell4.ForeColor = System.Drawing.Color.Black;

                tr4.Cells.Add(cell4);
                tr4.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;



                System.Web.UI.WebControls.TableCell cell5 = new System.Web.UI.WebControls.TableCell();
                cell5.Controls.Add(Grid);
                System.Web.UI.WebControls.TableRow tr5 = new System.Web.UI.WebControls.TableRow();
                tr5.Cells.Add(cell5);

                tb.Rows.Add(tr1);
                //  tb.Rows.Add(tr2);
                tb.Rows.Add(tr3);
                tb.Rows.Add(tr4);
                tb.Rows.Add(tr5);

            }
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (System.Web.UI.HtmlTextWriter hw = new System.Web.UI.HtmlTextWriter(sw))
                {
                    System.IO.StreamWriter writer = System.IO.File.AppendText(excelFile);
                    tb.RenderControl(hw);
                    writer.WriteLine(sw.ToString());
                    writer.Close();
                }
            }



            return excelFile;
        }
        #endregion

        public void GetReceiptListForExternalUser(string FromDate, string ToDate, int UID)
        {

            DateTime dtfrom = DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodFrom = dtfrom.ToString("yyyy/MM/dd");
            DateTime dtTo = DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            String PeriodTo = dtTo.ToString("yyyy/MM/dd");


            int Status = 0;

            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodFrom", MySqlDbType = MySqlDbType.DateTime, Value = PeriodFrom });
            LstParam.Add(new MySqlParameter { ParameterName = "in_PeriodTo", MySqlDbType = MySqlDbType.DateTime, Value = PeriodTo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_UID", MySqlDbType = MySqlDbType.Int32, Value = UID });



            DParam = LstParam.ToArray();
            IDataReader Result = DataAccess.ExecuteDataReader("ReceiptListWithDateForExternalUser", CommandType.StoredProcedure, DParam);
            IList<ReceiptList> LstReceiptList = new List<ReceiptList>();
            // CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            _DBResponse = new DatabaseResponse();
            try
            {
                while (Result.Read())
                {
                    Status = 1;

                    LstReceiptList.Add(new ReceiptList
                    {



                        ReceiptNumber = Result["ReceiptNo"].ToString()



                    });
                }

                if (Status == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Success";
                    _DBResponse.Data = JsonConvert.SerializeObject(LstReceiptList); ;
                }
                else
                {
                    _DBResponse.Status = 0;
                    _DBResponse.Message = "No Data";
                    _DBResponse.Data = null;
                }
            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
            finally
            {
                Result.Close();
                Result.Dispose();

            }
        }


        #region Add edit QR Code
        public void AddEditBQRCode(int InvoiceId, string FileName, int CreatedBy)
        {
            string Status = "0";
            IDataParameter[] DParam = { };
            List<MySqlParameter> LstParam = new List<MySqlParameter>();
            DataAccessLayerBaseClass DataAccess = DataAccessLayerFactory.GetDataAccessLayer();
            LstParam.Add(new MySqlParameter { ParameterName = "in_InvoiceId", MySqlDbType = MySqlDbType.Int32, Value = InvoiceId });
            //  LstParam.Add(new MySqlParameter { ParameterName = "in_BLNo", MySqlDbType = MySqlDbType.VarChar, Value = objFormOne.BLNo });
            LstParam.Add(new MySqlParameter { ParameterName = "in_FileName", MySqlDbType = MySqlDbType.VarChar, Value = FileName });
            LstParam.Add(new MySqlParameter { ParameterName = "in_CreatedBy", MySqlDbType = MySqlDbType.VarChar, Value = CreatedBy });


            LstParam.Add(new MySqlParameter { ParameterName = "@RetValue", MySqlDbType = MySqlDbType.Int32, Size = 4, Direction = ParameterDirection.Output, Value = 0 });
            //  LstParam.Add(new MySqlParameter { ParameterName = "@GeneratedClientId", MySqlDbType = MySqlDbType.Int32, Size = 4, Direction = ParameterDirection.Output, Value = 0 });

            DParam = LstParam.ToArray();
            int Result = DataAccess.ExecuteNonQuery("AddEdithdfcbqrcode", CommandType.StoredProcedure, DParam);
            _DBResponse = new DatabaseResponse();
            try
            {
                if (Result == 1)
                {
                    _DBResponse.Status = 1;
                    _DBResponse.Message = "Saved Successfully.";
                    _DBResponse.Data = null;
                }

            }
            catch (Exception ex)
            {
                _DBResponse.Status = 0;
                _DBResponse.Message = "Error";
                _DBResponse.Data = null;
            }
        }





        #endregion

    }
}
