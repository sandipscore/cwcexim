@model CwcExim.Areas.CashManagement.Models.LNSM_PDARefundModel


<input type="hidden" id="Parties" value="@ViewBag.Parties.ToString()" />
<div class="container-fluid">
    <div class="col-md-11 col-md-offset-0-5">
        <div class="Head_h4">
            @using (Ajax.BeginForm("SaveRefundFromPDA", "LNSM_CashManagement", new AjaxOptions { HttpMethod = "POST", Confirm = "Are you sure you want to Save?", OnFailure = "OnFailure", OnSuccess = "OnSuccess", LoadingElementDuration = 1000, LoadingElementId = "divProgress" }))
            {
                <div class="row">
                    <div class="col-md-12">
                        <h4>SD Closure</h4>
                    </div>
                </div>
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.PartyId, new { Value = "0000000000" })
                    @Html.HiddenFor(m => m.ReceiptNo)
                    <input type="hidden" id="currentDate" name="currentDate" value="@ViewBag.currentDate" />
                    <div class="row Form_Space_top">
                        <div class="Form_Input form-group">
                            <div class="col-md-1-5 col_cus_2">

                                @Html.LabelFor(m => m.PartyName)
                                @Html.HiddenFor(m => m.UnPaidAmount)
                                @Html.HiddenFor(m => m.PName)
                                @Html.HiddenFor(m => m.PartyAddress)
                            </div>
                            <div class="col-md-10-5 col_cus_10">
                                <span class="ReQSimbol">*</span>
                                @Html.TextBoxFor(m => m.PartyName, new { @readonly = true })
                                @Html.ValidationMessageFor(m => m.PartyName)
                                <span class="search" id="SearchPartyList"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#PartyList"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="Form_Input form-group">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Opening Balance:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2">
                                @Html.TextBoxFor(m => m.OpBalance, new { @readonly = true })
                                @Html.ValidationMessageFor(m => m.OpBalance)
                            </div>
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Refund Amount:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2 Error_Msg">
                                <span class="ReQSimbol">*</span>
                                @Html.TextBoxFor(m => m.RefundAmount, new { onkeypress = "return AllowOnlyDecimal(event)" })
                                @Html.ValidationMessageFor(m => m.RefundAmount)
                            </div>
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Closing Balance:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2">
                                @Html.TextBoxFor(m => m.closingBalance, new { @readonly = true })
                                @Html.ValidationMessageFor(m => m.closingBalance)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Bank Name:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2">
                                @Html.TextBoxFor(m => m.Bank)
                                @Html.ValidationMessageFor(m => m.Bank)
                            </div>
                            <div class="col-md-1-5 col_cus_2 col-md-offset-4 col_cus_offset_4 padding_rt">
                                <label>Bank Branch:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2">
                                @Html.TextBoxFor(m => m.Branch)
                                @Html.ValidationMessageFor(m => m.Branch)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Cheque No.:</label>
                            </div>
                            <div class="col-md-2-5 col_cus_2">
                                @Html.TextBoxFor(m => m.ChequeNo)
                                @Html.ValidationMessageFor(m => m.ChequeNo)
                            </div>
                            <div class="col-md-1-5 col_cus_2 col-md-offset-4 col_cus_offset_4 padding_rt">
                                <label>Cheque Date.:</label>
                            </div>
                            <div class="col-md-2 col_cus_2 Date_Img">
                                @Html.TextBoxFor(m => m.ChequeDate, new { @readonly = true })
                                @Html.ValidationMessageFor(m => m.ChequeDate)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="Form_Input form-group">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Remarks:</label>
                              
                            </div>
                            <div class="col-md-10-5 col_cus_10">
                                @Html.TextAreaFor(m => m.Remarks)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="stoke SignUp_space_bottom2 SignUp_space_top2"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-offset-3 col-md-2 SignUp_space_bottom">
                            <input type="submit" class="btn log_Btn_sm" value="Save" id="btnSavePDARefund" onclick="return checkAmount()" />
                        </div>
                        <div class="col-md-2">
                            <input type="button" class="btn log_Btn_sm" id="printButton" disabled value="Print" onclick="PrintSDRefund()" />
                        </div>
                        <div class="col-md-2">
                            <input type="button" class="btn log_Btn_sm" id="btnReset" value="Reset" onclick="ResetSDRefund()" />
                        </div>
                    </div>

            }
           
        </div>
        <div class="row Form_Space_top Form_Space_bottom">
            <div class="form-group Form_Input">
                <div class="col-md-2">
                    <input type="button" id="btnReceiptShowList" value="Show List" class="btn log_Btn_sm" onclick="ShowSDRefundList()" />
                </div>
                <div class="col-md-offset-3 col-md-4" style="text-align:right;">
                    <label>Receipt No:</label>
                </div>
                <div class="col-md-3">
                    @Html.TextBox("SearchReceiptNo", "", new { placeholder = "Search Here" })
                    <span class="search"><i class="fa fa-search" aria-hidden="true" onclick="SearchBySDRefund()"></i></span>
                </div>
            </div>
        </div>
        <div class="row Form_Space_top">
            <div class="form-group Form_Input">
                <div class="col-md-12">
                    <div id="DivSDRefundList"></div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="PartyList" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Party Names</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="CHAbox" type="text" />
                <ul class="navList" id="lstCHA"></ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>


    var TimeInSeconds = 5000;
    function OnSuccess(data) {
        var a = data.Message;
        var b = data.Data;
        var c;
        if (b != null && b != "" && b != undefined) {
            c = a + ". " + "Receipt No.: " + b;
        }
        else {

            c = a;
        }

        alert(c);
        if (data.Status != null && data.Data != "" && data.Data != undefined) {
            $('#ReceiptNo').val(data.Data);
            $('#printButton').prop('disabled', false);
            $('#btnSavePDARefund').prop('disabled', true);
            $('input[type="text"],textarea').prop("readOnly", true);
            document.getElementById('SearchPartyList').style.display = 'none';
        }
        else {
            $('#printButton').prop('disabled', true);
            $('#btnSavePDARefund').prop('disabled', false);
        }
        //  setTimeout(RefreshPage, TimeInSeconds);
    }
    function OnFailure() {
        alert("Something went wrong , Please check data");
        $('#printButton').prop('disabled', true);

    }



    GenerateParties();
    function GenerateParties() {
        var parties = JSON.parse($('#Parties').val());
        //debugger;
        var html = '';
        $.each(parties, function (i, item) {
            html += '<li id="' + item.Id + '" onclick="GetPartyDetails(this)">' + item.Name + '</li>';
        });
        $('#lstCHA').html(html);
    }
    function GetPartyDetails(elem) {
        //debugger;
        $('#PartyName').val('');
        $('#PartyId').val('');
        $('#OpBalance').val('');
        $('#RefundAmount').val('');
        $('#closingBalance').val('');
        $('#Bank').val('');
        $('#Branch').val('');
        $('#ChequeNo').val('');
        $('#ChequeDate').val('');

        $('#PartyName').val($(elem).text());
        $('#PartyId').val($(elem).attr('id'));
        var parties = JSON.parse($('#Parties').val());
        var party = $.grep(parties, function (item) { return item.Id == $(elem).attr('id'); })[0];
        $('#OpBalance').val(party.Balance);
        $('#UnPaidAmount').val(party.UnPaidAmount);
        $('#PName').val(party.PName);
        $('#PartyAddress').val(party.PartyAddress);
        $("#PartyList").modal("hide");
    }

    function Calculate() {
        var amt = 0;
        for (var i = 0; i < 5; i++) {
            amt += Number($('#Details_' + i + '__Amount').val());
        }
        $('#txtTotal').val(amt);
        $('#txtClosing').val(Number($('#OpBalance').val()) + amt);
    }

    function PrintSDRefund() {
        //debugger;
        var ReceiptNo = $('#ReceiptNo').val();
        var Token = $('input[name="__RequestVerificationToken"]').val();
        $.ajax({
            url: '@Url.Action("GetRefundSDReport", "LNSM_CashManagement", new { Area = "CashManagement" }) ',
            headers: { "__RequestVerificationToken": Token },
            dataType: 'JSON',
            type: 'POST',
            data: {
                ReceiptNo: ReceiptNo
            },
            success: function (data) {
                if (data.Status == 1)
                    window.open(data.Message + "?_t=" + (new Date().getTime()), "_blank");
                else
                    alert(data.Data);
            }
        });
    }

    function RemoveMessage() {
        alert("in");
        $('[data-valmsg-for="RefundAmount"]').html('Fill Out This Field');
    }
    $(window).keypress(function (event) {
        if (event.which == 13) {
            $(this).next().focus();
        }
    });

    function checkAmount() {
        var RefundAmount = Number($("#RefundAmount").val());
        //debugger;
        if (RefundAmount == "" || RefundAmount == null) {

            $('[data-valmsg-for="RefundAmount"]').html('<span>Fill Out This Field</span>');
            //setTimeout(LoadGateEntryView, TimeInSeconds);
            return false;

        }
        var opening = Number($("#OpBalance").val());
        var closing = Number($("#OpBalance").val()) - Number(RefundAmount);
        var UnPaid = Number($("#UnPaidAmount").val());
        $("#closingBalance").val(closing);
        if (RefundAmount > opening || RefundAmount < 0) {
            alert("Refund Amount Can Not Be Greater Than Opening Balance Or 0");
            $("#btnSavePDARefund").attr("disabled", true);
            $("#printButton").attr("disabled", true);
            return false;
        }
        else if (UnPaid > 0) {
            alert("SD Refund Can Not Be Possible due to UnPaid Bill");
            $("#btnSavePDARefund").attr("disabled", true);
            $("#printButton").attr("disabled", true);
            return false;
        }

        else {
            $("#btnSavePDARefund").attr("disabled", false);
        }
    }
    $("#RefundAmount").blur(function () {
        if ($("#OpBalance").val() == null || $("#OpBalance").val() == "" || $("#OpBalance").val() == undefined || Number($("#OpBalance").val()) <= 0) {
            alert("Opening Balance Should be >0");
        }
        else if ($("#RefundAmount").val() == null || $("#RefundAmount").val() == "" || $("#RefundAmount").val() == undefined || Number($("#RefundAmount").val()) <= 0) {
            alert("Refund Amount Should Be Greater Than 0");
            $("#btnSavePDARefund").attr("disabled", true);
            $("#printButton").attr("disabled", true);

        }
        else {
            $("#btnSavePDARefund").attr("disabled", false);

            var closing = Number($("#OpBalance").val()) - Number($("#RefundAmount").val());
            $("#closingBalance").val(closing);
        }
    });

    $('#CHAbox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstCHA > li').show();
        else {
            $('#lstCHA > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });
</script>
<script>
    $('#ChequeDate').datepicker({
        dateFormat: "dd/mm/yy",
        showOn: "button",
        buttonImage: "/Content/images/calendar.png",
        buttonImageOnly: true,
        buttonText: "Select date",
        changeMonth: true,
        changeYear: true,
        showAnima: "fadein",
        onClose: function () {
        }
    });


    function AllowOnlyDecimal(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if ((CharCode > 47 & CharCode < 58) || (CharCode == 46) || CharCode == 8) {
            return true;
        }
        else {
            evt.preventDefault;
            return false;
        }
    }

   
    function ShowSDRefundList() {
        $('#SearchReceiptNo').val('');
        $('#DivSDRefundList').load('/CashManagement/LNSM_CashManagement/SDRefundList');
    }

    function SearchBySDRefund() {
        var ReceiptNo = $('#SearchReceiptNo').val();
        $('#DivSDRefundList').load('/CashManagement/LNSM_CashManagement/SDRefundList?ReceiptNo=' + ReceiptNo);
    }

    function ResetSDRefund()
    {
        $('#DivBody').load('/CashManagement/LNSM_CashManagement/RefundFromPDA');
    }
</script>
@Scripts.Render("~/bundles/jqueryval")