@model CwcExim.Areas.Import.Models.DSR_Internal_Movement
<div class="container-fluid">
    <div class="row">
        <div class="col-md-offset-0-5 col-md-11">
            <div class="Head_h4">
                <div class="row">
                    <div class="col-md-12">
                        <h4>Internal Movement-Import</h4>
                    </div>
                </div>

                @using (Ajax.BeginForm("AddEditInternalMovement", "DSR_CWCImport", new AjaxOptions
                {
                    Confirm = "Are you sure you want to Save?",
                    HttpMethod = "POST",
                    OnSuccess = "MovementOnSuccess",
                    OnFailure = "MovementOnFailure",
                }))
                {

 
                    @Html.Hidden("BOEJson")
                    @Html.HiddenFor(m => m.MovementId)
                    @Html.HiddenFor(m => m.StockDetailsId)
                    @Html.HiddenFor(m => m.DestuffingEntryDate)

                    if (ViewBag.RightsList != null)
                    {
                        <input type="hidden" id="hdnRights" value="@ViewBag.RightsList" />
                    }
                    else
                    {
                        <input type="hidden" id="hdnRights" value="" />
                    }



                    @Html.AntiForgeryToken()
                    <div id="DivAddMovement">
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Movement No:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.HiddenFor(m => m.DestuffingEntryId)
                                    @Html.HiddenFor(m => m.DestuffingEntryDtlId)
                                    @Html.TextBoxFor(m => m.MovementNo, new { @class = "form-control input-sm", @readonly = true })
                                </div>
                                <div class="col-md-offset-4 col-md-1-5 col_cus_2 col_cus_offset_3 padding_rt">
                                    <label>Movement Date:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2_5 Date_Img">
                                    @Html.TextBoxFor(m => m.MovementDate, new { @class = "form-control input-sm", @readonly = true })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2 padding_rt">
                                    <label>OBL No:</label>
                                </div>
                                <div class="col-md-2-5">
                                    <span class="ReQSimbol">*</span>
                                    @Html.TextBoxFor(m => m.BOENo, new { @class = "form-control input-sm", @readonly = true })
                                    <span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#BOENoModal"></i></span>
                                    @Html.ValidationMessageFor(m => m.BOENo, "", new { @class = "Error_Msg" })                                   
                                </div>
                                <div class="col-md-offset-4 col-md-1-5 col_cus_2 col_cus_offset_3 padding_rt">
                                    <label>OBL Date:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2_5 Date_Img">
                                    @Html.TextBoxFor(m => m.BOEDate, new { @class = "form-control input-sm", @readonly = true })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2 padding_rt">
                                    <label>Cargo Description:</label>
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextAreaFor(m => m.CargoDescription, new { @style = "height:100px;width:100%", @readonly = true })
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>From Godown:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.HiddenFor(m => m.FromGodownId)
                                    @Html.TextBoxFor(m => m.OldGodownName, new { @class = "form-control input-sm", @readonly = true })
                                    @*<span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#OldGodownModal"></i></span>*@
                                </div>
                                <div class="col-md-offset-4 col-md-1-5 col_cus_2 col_cus_offset_3 padding_rt">
                                    <label>To Godown:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.HiddenFor(m => m.ToGodownId)
                                    <span class="ReQSimbol">*</span>
                                    @Html.TextBoxFor(m => m.NewGodownName, new { @class = "form-control input-sm", @readonly = true })
                                    <span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#GodownModal"></i></span>
                                    @Html.ValidationMessageFor(m => m.NewGodownName)
                                   
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2 padding_rt">
                                    <label>Old Location:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.HiddenFor(m => m.OldLocationIds)
                                    @Html.TextBoxFor(m => m.OldLocationNames, new { @class = "form-control input-sm", @readonly = true })
                                </div>
                                <div class="col-md-offset-4 col-md-1-5 col_cus_2 col_cus_offset_3 padding_rt">
                                    <label>New Location:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.NewLocationNames, "", new { @class = "form-control input-sm", @readonly = true, onkeydown = "PopupActivate('gdwnwiselocationmodal');" })
                                    <span class="search" id="LocationSearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#gdwnwiselocationmodal"></i></span>
                                    @Html.HiddenFor(m => m.NewLocationIds)
                                    @Html.ValidationMessageFor(m => m.NewLocationNames, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Old No Of Packages:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2">
                                    @Html.TextBoxFor(m => m.NoOfPackages, new { @class = "form-control input-sm", @readonly = true })
                                </div>

                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New No Of Packages:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_3">
                                    @Html.TextBoxFor(m => m.NewNoOfPackages, "", new { @class = "form-control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })
                                    @Html.ValidationMessageFor(m => m.NewNoOfPackages, "", new { @class = "Error_Msg" })                                    
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Old Gross Wt(Kg):</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2">
                                    @Html.TextBoxFor(m => m.GrossWeight, new { @class = "form-control input-sm", @readonly = true })
                                </div>

                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New Gross Wt(Kg):</label>
                                </div>
                                <div class="col-md-2-5 col_cus_3">
                                    @Html.TextBoxFor(m => m.NewGrossWeight, "", new { @class = "form-control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })
                                    @Html.ValidationMessageFor(m => m.NewGrossWeight, "", new { @class = "Error_Msg" })                                   
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Old SQM:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2">
                                    @Html.TextBoxFor(m => m.OldArea, "", new { @class = "form-control input-sm", @readonly = true })
                                </div>

                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New SQM:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_3">
                                    @Html.TextBoxFor(m => m.NewArea, "", new { @class = "form-control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })
                                    @Html.ValidationMessageFor(m => m.NewArea, "", new { @class = "Error_Msg" })                                   
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Old CBM:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_2">
                                    @Html.TextBoxFor(m => m.OldAreaCbm, "", new { @class = "form-control input-sm", @readonly = true })
                                </div>

                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New CBM:</label>
                                </div>
                                <div class="col-md-2-5 col_cus_3">
                                    @Html.TextBoxFor(m => m.NewAreaCbm, "", new { @class = "form-control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })                                   
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2">
                                    <label>Old CIF Value:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.OldCIFValue, "", new { @class = "form -control input-sm", @readonly = true })
                                </div>
                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New CIF Value:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.NewCIFValue, "", new { @class = "form -control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })
                                    @Html.ValidationMessageFor(m => m.NewCIFValue, "", new { @class = "Error_Msg" })                                    
                                </div>
                            </div>
                        </div>

                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5 col_cus_2 padding_rt">
                                    <label>Old Gross Duty:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.OldGrossDuty, "", new { @class = "form -control input-sm", @readonly = true })
                                    @Html.ValidationMessageFor(m => m.OldGrossDuty, "", new { @class = "Error_Msg" })
                                </div>
                                <div class="col-md-1-5 col-md-offset-4">
                                    <label>New Gross Duty:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.NewGrossDuty, "", new { @class = "form -control input-sm", @onkeypress = "return AllowOnlyDecimal(event)" })
                                    @Html.ValidationMessageFor(m => m.NewGrossDuty, "", new { @class = "Error_Msg" })                                   
                                </div>
                            </div>
                        </div>

                        <div class="row SignUp_space_bottom SignUp_space_top">
                            <div class="stoke"></div>
                        </div>
                        <div class="row SignUp_space_bottom2">
                            <div class="col-md-offset-3 col-md-2">
                                <input type="submit" id="btnSave" class="btn log_Btn_sm" value="Save" />
                            </div>
                            <div class="col-md-2">
                                <input type="button" id="btnReset" class="btn log_Btn_sm" value="Reset" onclick="ResetMovement()" />
                            </div>
                            <div class="col-md-2">
                                <input type="button" class="btn log_Btn_sm" value="Cancel" onclick="CancelMovement()" />
                            </div>
                        </div>
                        <div class="logSuccMsg" id="DivSucMsg" style="background-color:transparent"></div>
                        <div class="logErrMsg Form_Space_top" id="DivErrMsg" style="background-color:transparent"></div>
                    </div>
                }
               
            </div>
        </div>
    </div>
</div>
<div id="OldGodownModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Godown</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="OldGodownbox" type="text" />
                <ul class="navList" id="lstOldGodown"></ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="GodownModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Godown</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="Godownbox" type="text" />
                <ul class="navList" id="lstGodown">
                    @{
                        if (ViewBag.ListOfGodown != null)
                        {
                            foreach (var item in ViewBag.ListOfGodown)
                            {
                                <li id="@item.Value" onclick="SelectGodown(this)">@item.Text</li>
                            }
                        }
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="gdwnwiselocationmodal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Godown Wise Location</h4>
            </div>
            <div class="modal-body popup_body">
                <div id="lstGdwnWiseLctn">
                </div>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="BOENoModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of OBL No</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="BOENobox" type="text" />
                <ul class="navList" id="BOENoList">
                    @{
                        if (ViewBag.BOENoList != null)
                        {
                            foreach (var item in ViewBag.BOENoList)
                            {

                                <li id="@item.Value" onclick="SelectBOENo(this)">@item.Text</li>
                            }
                        }
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jqueryval")
<script>

    $(function () {
        debugger;
        var NewLctnNames = '@Model.NewLocationNames';
        var NewLocationIds = '@Model.NewLocationIds';
        //GetGodownWiseLocation();
        $('#NewLocationIds').val(NewLocationIds);
        $('#NewLocationNames').val(NewLctnNames);
        var selectedlctn = '@Model.NewLocationIds'.split(',');
        $(selectedlctn).each(function (i, elem) {
            $('#' + elem + 'y').prop('checked', true);
        });
        
    })
    $('#MovementDate').datepicker({
        dateFormat: "dd/mm/yy",
        showOn: "button",
        buttonImage: "/Content/images/calendar.png",
        buttonImageOnly: true,
        buttonText: "Select date",
        changeMonth: true,
        changeYear: true,
        showAnima: "fadein",
        onClose: function () {
        }
    });
   
    function CancelMovement() {
        $('#DivBody').load('/Import/DSR_CWCImport/CreateInternalMovement');
    }
    function MovementOnSuccess(data) {
        $('#DivErrMsg').html('');
        if (data.Status == 1) {
            $('#DivSucMsg').html(data.Message);
            setTimeout(function () { $('#DivBody').load('/Import/DSR_CWCImport/CreateInternalMovement'); }, 5000);
        }
        else {
            $('#DivErrMsg').html(data.Message);
           
        }
    }
    function MovementOnFailure() { }
    $('#Godownbox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstGodown > li').show();
        else {
            $('#lstGodown > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });
    $('#BOENobox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#BOENoList > li').show();
        else {
            $('#BOENoList > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });
    function LoadPage() {
        $('#DivBody').load('/Import/DSR_CWCImport/CreateInternalMovement');
    }
    function SelectGodown(data) {
        $('#ToGodownId').val(data.id);
        $('#NewGodownName').val(data.innerText);
        $("#GodownModal").modal("hide");

        $('#NewLocationIds').val('');
        $('#NewLocationNames').val('');
        GetLocationByGodown(data.id);
    }
   
    function GetLocationByGodown(i) {
        //debugger;
        $.ajax({
            url: '/Import/DSR_CWCImport/GetGodownWiseLocation',
            type: 'GET',
            dataType: 'JSON',
            data: { GodownId: i },
            success: function (data) {
                if (data.Status == 1) {
                    debugger;
                    var locCount = data.Data.lstdynamicloc.length;
                    if (locCount == 1) {
                        $('#NewLocationIds').val(data.Data.lstdynamicloc[0].LocationId);
                        $('#NewLocationNames').val(data.Data.lstdynamicloc[0].LocationName);
                    }

                    var html = "";
                    var tabvalue = 401;
                    $.each(data.Data.lstdynamicloc, function (i, elem) {
                        html += '<div style="float:left;"><div class="boolean-container"><input tabindex=' + tabvalue + '_' + i + ' type="checkbox" id="' + elem.LocationId + 'g" name="' + elem.LocationId + '" onclick="SelectLocation()" onkeypress="SelectLocation()" /><label for="' + elem.LocationId + 'g"><i class="square"></i><span>' + elem.LocationName + '</span></label></div></div>';
                    });
                    $('#lstGdwnWiseLctn').html(html);
                    //$('#BtnAddDestuffingEntry').prop("disabled", false);
                    //$('#btnReset').prop("disabled", true);
                }
            }
        });
    }
    
    function SelectLocation() {
        debugger;
        var data = '';
        var inf = '';
        $('#lstGdwnWiseLctn').find('input:checked').each(function () {
            if (data == '')
                data = $(this).prop('name');
            else
                data = data + ',' + $(this).prop('name');
            if (inf == '')
                inf = $('label[for="' + $(this).prop('id') + '"]').text();
            else
                inf = inf + ',' + $('label[for="' + $(this).prop('id') + '"]').text();
        });

        $('#NewLocationIds').val(data);
        $('#NewLocationNames').val(inf);
        //$('#ReceivedPackages').focus();

    }

    function SelectBOENo(data) {
        $('#DestuffingEntryDtlId').val(data.id);
        $('#BOENo').val(data.innerText);
        $("#BOENoModal").modal("hide");
        GetBOENoDetails(data.id);
    }
    function SelectNewLocation(data) {
        $('#LocationId').val(data.id);
        $('#LocationName').val(data.innerText);
        $('#NewLctnNames').val(data.innerText);
        $("#LocationModal").modal("hide");
        //  GetInternalInvoice();
    }
    function GetBOENoDetails(DestuffingEntryDtlId) {
        debugger;
        $.ajax({
            url: "/Import/DSR_CWCImport/GetBOENoDetails",
            type: "GET",
            dataType: "JSON",
            data: { DestuffingEntryDtlId: DestuffingEntryDtlId },
            async: false,
            success: function (data) {
                if (data.Status == 1) {
                    $('#BOEDate').val(data.Data.BOEDate);
                    $('#BOENo').val(data.Data.BOENo);
                    $('#DestuffingEntryId').val(data.Data.DestuffingEntryId);
                    $('#DestuffingEntryDate').val(data.Data.DestuffingEntryDate);

                    GetOBLWiseGodown(DestuffingEntryDtlId, $('#BOENo').val());
                }
            }
        });
    }

    $('#btnSave').click(function () {

        //    if ($('#NewNoOfPackages').val() == '0') {
        //        alert('New No of Packages should be greater than 0');
        //        return false;
        //    }
        //    else {
        //        var OPkg = Number($('#NoOfPackages').val());
        //        var NPkg = Number($('#NewNoOfPackages').val());
        //        if (NPkg > OPkg) {
        //            $('#NewNoOfPackages').val('');
        //            alert('New No of Packages Can not greater than Old No of Packages');
        //            return false;
        //        }
        //    }

        //    if ($('#NewGrossWeight').val() == '0') {
        //        alert('New Gross Weight should be greater than 0');
        //        return false;
        //    }
        //    else {
        //        var OGWt = Number($('#GrossWeight').val());
        //        var NGWt = Number($('#NewGrossWeight').val());
        //        if (NGWt > OGWt) {
        //            $('#NewGrossWeight').val('');
        //            alert('New Gross Weight Can not greater than Old Gross Weight');
        //            return false;
        //        }
        //    }

        //    if ($('#NewArea').val() == '0') {
        //        alert('New SQM should be greater than 0');
        //        return false;
        //    }
        //    else {
        //        var OArea = Number($('#OldArea').val());
        //        var NArea = Number($('#NewArea').val());
        //        if (NArea > OArea) {
        //            $('#NewArea').val('');
        //            alert('New Area(SQM) Can not greater than Old Area(SQM)');
        //            return false;
        //        }
        //    }
        //    if ($('#NewAreaCbm').val() > 0) {
        //        var OArea = Number($('#OldAreaCbm').val());
        //        var NArea = Number($('#NewAreaCbm').val());
        //        if (NArea > OArea) {
        //            $('#NewAreaCbm').val('');
        //            alert('New CBM Can not greater than Old CBM');
        //            return false;
        //        }
        //    }

        //    if ($('#NewCIFValue').val() == '0') {
        //        alert('New CIF Value should be greater than 0');
        //        return false;
        //    }
        //    else {
        //        var OCValue = Number($('#OldCIFValue').val());
        //        var NCValue = Number($('#NewCIFValue').val());
        //        if (NCValue > OCValue) {
        //            $('#NewCIFValue').val('');
        //            alert('New CIF Value Can not greater than Old CIF Value');
        //            return false;
        //        }
        //    }

        //    if ($('#NewGrossDuty').val() == '0') {
        //        alert('New Gross Duty should be greater than 0');
        //        return false;
        //    }
        //    else{
        //        var OGDuty = Number($('#OldGrossDuty').val());
        //        var NGDuty = Number($('#NewGrossDuty').val());
        //        if (NGDuty > OGDuty) {
        //            $('#NewGrossDuty').val('')
        //            alert('New Gross Duty Can not greater than Old Gross Duty');
        //            return false;
        //    }
        //}


    });
</script>

