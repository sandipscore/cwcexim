@model CwcExim.Areas.Bond.Models.DndBondWOUnloading

<div class="container-fluid">
    <div class="col-md-offset-0-5 col-md-11">
        <div class="Head_h4">
            @using (Ajax.BeginForm("AddEditWOUnloading", "DndBond", new AjaxOptions { Confirm = "Are you sure you want to Save?", HttpMethod = "POST", OnSuccess = "UnloadingOnSuccess", OnFailure = "UnloadingOnFailure" }))
            {
                <div id="DivBondApp">
                    <div class="row">
                        <div class="col-md-12">
                            <h4>Unloading at Bonded Warehouse</h4>
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.UnloadingId)
                    @Html.HiddenFor(m => m.GodownId)
                    @Html.HiddenFor(m => m.SpaceAppId)
                    @*@Html.HiddenFor(m => m.BondWOId)*@
                    @Html.AntiForgeryToken()
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Deposit No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.DepositNo, new { @class = "form-control input-sm", @readonly = true })

                                @Html.ValidationMessageFor(m => m.DepositNo)
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5 padding_rt">
                                <label>Deposit Date:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5 Date_Img">
                                @Html.TextBoxFor(m => m.DepositDate, new { @class = "form-control input-sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.DepositDate)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Bond BOE No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.BondBOENo, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5 padding_rt">
                                <label>Bond BOE Date:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5">
                                @Html.TextBoxFor(m => m.BondBOEDate, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Bond No:</label>
                            </div>
                            <div class="col-md-2-5">
                                <span class="ReQSimbol">*</span>
                                @Html.TextBoxFor(m => m.BondNo, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5 padding_rt">
                                <label>Bond Date:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5">
                                @Html.TextBoxFor(m => m.BondDate, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                @Html.LabelFor(m => m.WRNo, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.WRNo, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5">
                                @Html.LabelFor(m => m.WRDate, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-2 col_cus_2_5 Date_Img">
                                @Html.TextBoxFor(m => m.WRDate, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Godown Name:</label>
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(m => m.GodownName, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>SAC No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.SacNo, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5">
                                <label>SAC Date:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5">
                                @Html.TextBoxFor(m => m.SacDate, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Unloaded Date:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5 Date_Img">
                                @Html.TextBoxFor(m => m.UnloadedDate, new { @class = "form-control input-sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.UnloadedDate)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Location Name:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.HiddenFor(m => m.LocationId)
                                <span class="ReQSimbol">*</span>
                                @Html.TextBoxFor(m => m.LocationName, new { @class = "form-control input-sm", @readonly = true })
                                <span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#LocationModal"></i></span>
                                @Html.ValidationMessageFor(m => m.LocationName)
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5 padding_rt">
                                <label>Area Occupied:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.AreaOccupied, new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.AreaOccupied)
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Cargo Description:</label>
                            </div>
                            <div class="col-md-10-5 col_cus_10">
                                @Html.TextAreaFor(m => m.CargoDescription, new { @class = "form-control input-sm", @style = "width:100%;height:100px;", @disabled = true })
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.Units)
                    @Html.HiddenFor(m => m.Weight)
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Unloaded Units:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.UnloadedUnits, new { @class = "form-control input-sm", @onchange = "FillBalancedUnits()" })
                                @Html.ValidationMessageFor(m => m.UnloadedUnits)
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5">
                                <label>Balanced Units:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.BalancedUnits, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Unloaded Weights:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.UnloadedWeights, new { @class = "form-control input-sm", @onchange = "FillBalancedWeights()" })
                                @Html.ValidationMessageFor(m => m.UnloadedWeights)
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 col-md-1-5">
                                <label>Balanced Weights:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.BalancedWeights, new { @class = "form-control input-sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Conditions Of Packages:</label>
                            </div>
                            <div class="col-md-2-5">
                                <span class="ReQSimbol">*</span>
                                @Html.DropDownListFor(m => m.PackageCondition, new List<SelectListItem>
                                                    {
                                                     new SelectListItem {Text="Sound Condition",Value="Sound Condition" },
                                                      new SelectListItem {Text="Damage Condition",Value="Damage Condition" },
                                                       new SelectListItem {Text="Others",Value="Others" }
                                                    }, "----Select----", new { @class = "form-control input_sm dropdown" })
                                @Html.ValidationMessageFor(m => m.PackageCondition, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-2 col_cus_2_5">
                                <div id="DivOthers">
                                    @Html.TextBoxFor(m => m.Others, "", new { @class = "form-control input-sm", @id = "Others", @maxlength = 500 })
                                    @Html.ValidationMessageFor(m => m.Others, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Remarks:</label>
                            </div>
                            <div class="col-md-10-5 col_cus_10">
                                @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control input-sm", @style = "width:100%;height:100px;", @maxlength = 500 })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="stoke SignUp_space_bottom2 SignUp_space_top2"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-offset-4 col-md-2">
                            <input type="submit" class="btn log_Btn_sm" value="Save" id="BtnSave" />
                        </div>
                        <div class="col-md-2">
                            <input type="button" class="btn log_Btn_sm" value="Back" onclick="LoadPage()" />
                        </div>
                    </div>
                    <div id="DivMsg" class="logSuccMsg" style="background-color:transparent"></div>

                    <div id="DivMsgErr" class="logErrMsg SignUp_space_bottom2" style="background-color:transparent"></div>
                </div>
            }
                    </div>
                </div>
</div>
<div id="LocationModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Godown Location</h4>
            </div>
            <div class="modal-body popup_body">
                <div class="navList" id="lstGodown">
                    @if (ViewBag.Godown != null)
                    {

                    }
                </div>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")
<script>
    $('#UnloadedDate').datepicker({
        dateFormat: "dd/mm/yy",
        showOn: "button",
        buttonImage: "/Content/images/calendar.png",
        buttonImageOnly: true,
        buttonText: "Select date",
        changeMonth: true,
        changeYear: true,
        showAnima: "fadein",
        onClose: function () {
            $("[data-valmsg-for='UnloadedDate']").html('');
        },
        onSelect: function (date) {
            if ($('#SacDate').val() != '') {
                var varsac = $('#SacDate').val();
                var varday = varsac.substring(0, 2);
                var varmm = varsac.substring(5, 3);
                var varyy = varsac.substring(10, 6);
                var mmk = '' + varyy + '-' + varmm + '-' + varday + '';
                var vardate = new Date(mmk);

                //var varsac = $('#SacDate').val();
                var Svarday = date.substring(0, 2);
                var Svarmm = date.substring(5, 3);
                var Svaryy = date.substring(10, 6);
                var Smmk = '' + Svaryy + '-' + Svarmm + '-' + Svarday + '';
                var Svardate = new Date(Smmk);



                var sdate = new Date(Svardate);


                if (vardate > sdate) {
                    alert('Unloading Date should be greater than or equal to SAC Date');
                    $('#UnloadedDate').val('');

                }
            }

        }
    });
    //$('#WRDate').datepicker({
    //    dateFormat: "dd/mm/yy",
    //    showOn: "button",
    //    buttonImage: "/Content/images/calendar.png",
    //    buttonImageOnly: true,
    //    buttonText: "Select date",
    //    changeMonth: true,
    //    changeYear: true,
    //    showAnima: "fadein",
    //    onClose: function () {
    //        $("[data-valmsg-for='WRDate']").html('');
    //    }
    //});
    function CheckBoxChange() {
        var locationName = '', locationId = '';
        $('#lstGodown input[type="checkbox"]:checked').each(function () {
            if (locationName == '')
                locationName = $('label[for="' + $(this).prop('id') + '"]').text();
            else
                locationName += ',' + $('label[for="' + $(this).prop('id') + '"]').text();
            if (locationId == '')
                locationId = $(this).prop('id').split("-")[1];
            else
                locationId += ',' + $(this).prop('id').split("-")[1];
        });
        $('#LocationId').val(locationId);
        $('#LocationName').val(locationName);
    }
    function UnloadingOnSuccess(data)
    {
        if (data.Status == 1 || data.Status == 2)
        {
            $('#DivMsg').html(data.Message);
            setTimeout(function () {
                $('#DivMsg').html('');
                LoadPage();
               
            }, 5000);
            
          
        }
        else {
            $('#DivMsgErr').html(data.Message);
        }
    }
    function UnloadingOnFailure() {

    }
    function FillBalancedUnits()
    {
        $('#BalancedUnits').val(parseInt(Number($('#Units').val()) - Number($('#UnloadedUnits').val())));
    }
    function FillBalancedWeights()
    {
        $('#BalancedWeights').val(Number(parseFloat(Number($('#Weight').val()) - Number($('#UnloadedWeights').val()))).toFixed(2));
    }
    function LoadPage() {
        $('#DivBody').load('/Bond/DndBond/CreateWOUnloading');
    }
    $("#DivOthers").hide();
    $('#PackageCondition').change(function () {

        var val = $(this).find(":selected").text();
        if (val == 'Others') {
            $('#DivOthers').show();

        }
        else {
            $('#DivOthers').hide();
        }
    })
    if ($('#PackageCondition').find(":selected").text() == "Others") {
        //$("#Others").removeAttr("disabled");
        $('#DivOthers').show();
        //  $("#Others").val();
    }
    else {
        //$("#Others").attr("disabled", "disabled");
        $("#Others").val('');
        $('#DivOthers').hide();
    }
</script>

