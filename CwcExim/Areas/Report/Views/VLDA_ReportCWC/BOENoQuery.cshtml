@model CwcExim.Areas.Report.Models.WFLD_BOEQuery
<script src="~/Areas/Report/Scripts/App/Services/VLDA_BOEQueryService.js"></script>
<script src="~/Areas/Report/Scripts/App/Controllers/VLDA_BOEQueryCtrl.js"></script>
<script>
    angular.bootstrap(document.getElementById('ICEGateDetailAppDiv'), ['CWCApp']);
</script>
<style>
    #DivFormOneDet {
        height: 270px;
        overflow-x: hidden;
    }

    .slimScrollDiv {
        height: 300px;
    }

    .table.tblOBL {
        border-bottom: 0;
    }

    .slim_tble {
        width: 100%;
        table-layout: fixed;
    }

    .txt_wrp {
        overflow: hidden;
        word-wrap: break-word;
    }

    #tblOBL.dataTable tbody > tr > td {
        cursor: pointer;
    }
</style>
<div class="container-fluid" id="ICEGateDetailAppDiv" ng-controller="VLDA_BOEQueryCtrl">
    <div class="row">
        <div class="col-md-offset-0-5 col-md-11">
            <div class="Head_h4">
                <div class="row">
                    <div class="col-md-12">
                        <h4>BOE Search</h4>
                    </div>
                </div>
                @*@using (Ajax.BeginForm("AddEditOBLEntry", "Ppg_OblEntry", new AjaxOptions
                    {
                        Confirm = "Are you sure you want to save?",
                        HttpMethod = "POST",
                        OnSuccess = "JobOrderOnSuccess",
                        OnFailure = "JobOrderOnFailure"
                    }))*@
                @{
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.StringifiedText)
                    @Html.HiddenFor(m => m.impobldtlId)
                    @*@Html.HiddenFor(m => m.IsAlreadyUsed)*@
                if (ViewBag.ListOfContainerNo != null)
                {
                    <input type="hidden" id="hdnListOfContainerNo" value="@ViewBag.ListOfContainerNo" />
                }
                else
                {
                    <input type="hidden" id="hdnListOfContainerNo" value="" />
                }

                <input type="hidden" id="hdnSearchBy" value="@ViewBag.SearchBy" />


                <div id="DivJOHdr" class="Form_Space_bottom">
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 padding_rt">
                                <label>BOE No Search:</label>
                            </div>
                            <div class="col-md-1-5 col_cus_2">
                                @*@Html.RadioButtonFor(m => m.SearchBy, "SearchByDB", new { @class = "", @id = "SearchByDB", @checked = true,@onchange= "ResetDet()" })*@
                                @*<input type="radio" ng-model="SearchBy" ng-click="ResetDet()"  value="SearchByDB">*@
                                <input type="radio" id="SearchByDB" name="SearchBy" ng-model="SearchBy" value="SearchByDB" ng-click="ResetDet()" />
                                <label for="SearchByDB"><i class="circle"></i><span>System</span></label>

                            </div>
                            @* <div class="col-md-1-5 col_cus_2_5">*@
                            @*@Html.RadioButtonFor(m => m.SearchBy, "SearchByCCIN", new { @class = "", @id = "SearchByCCIN", @onchange = "ResetDet()" })*@
                            @*<input type="radio" ng-model="SearchBy" ng-click="ResetDet()"  vlaue="SearchByCCIN">*@
                            @*<input type="radio" id="SearchByCCIN" name="SearchBy" ng-model="SearchBy" value="SearchByCCIN" ng-click="ResetDet()" />
                                    <label for="SearchByCCIN"><i class="circle"></i><span>ICE Gate</span></label>
                                </div>*@
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>BOE No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @*@Html.HiddenFor(m => m.CFSCode)*@
                                @Html.TextBoxFor(m => m.BOENo, new { @class = "form-control input_sm" })
                                <span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#OBLModal"></i></span>
                            </div>
                            <div class="col-md-offset-0-5 col-md-2-5">
                                <input type="button" id="btnShowDetails" class="btn log_Btn_sm" ng-model="btnGet" ng-hide="Action" value="Show Details" ng-click="GetBOEDetailsForBOEQuery()" />
                            </div>
                            <div class="col-md-offset-1 col-md-1-5 col_cus_2 padding_rt">
                                <label>BOE Date:</label>
                            </div>
                            <div class="col-md-2-5 Date_Img">
                                @Html.TextBoxFor(m => m.BOEDate, new { @class = "form-control input_sm", @readonly = true })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>IGM No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.IGM_No, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.IGM_No, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>IGM Date:</label>
                            </div>
                            <div class="col-md-2-5 Date_Img">
                                @Html.TextBoxFor(m => m.IGM_Date, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.IGM_Date, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>TP No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.TPNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.TPNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>TP Date:</label>
                            </div>
                            <div class="col-md-2-5 Date_Img">
                                @Html.TextBoxFor(m => m.TPDate, new { @class = "form-control input_sm", @readonly = "true" })
                                @Html.ValidationMessageFor(m => m.TPDate, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>TSA No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.TSANo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.TSANo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>TSA Date:</label>
                            </div>
                            <div class="col-md-2-5 Date_Img">
                                @Html.TextBoxFor(m => m.TSADate, new { @class = "form-control input_sm", @readonly = "true" })
                                @Html.ValidationMessageFor(m => m.TSADate, "", new { @class = "Error_Msg" })
                            </div>
                            @*<div class="col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt col-md-1-5">
                                    <label>Port:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.DropDownListFor(m => m.PortId, new List<SelectListItem>
                                   {
                                   }, "----Select----", new { @class = "form-control input_sm dropdown" })

                                    @Html.ValidationMessageFor(m => m.PortId, "", new { @class = "Error_Msg" })
                                    @Html.HiddenFor(m => m.PortName)
                                    @Html.HiddenFor(m => m.SelectPortId)
                                </div>*@
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Importer Name:</label>
                            </div>
                            <div class="col-md-10-5">
                                @*@Html.DropDownListFor(m => m.CountryId, new List<SelectListItem>
                                    {
                                    }, "----Select----", new { @class = "form-control input_sm dropdown" })
                                     @Html.ValidationMessageFor(m => m.CountryId, "", new { @class = "Error_Msg" })
                                     @Html.HiddenFor(m => m.CountryName)
                                     @Html.HiddenFor(m => m.SelectCountryId)*@
                                @Html.HiddenFor(m => m.ImporterId)
                                @Html.TextBoxFor(m => m.ImporterName, new { @class = "form-control input_sm", @readonly = true })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col_cus_2 padding_rt col-md-1-5">
                                <label>Importer Address1:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextAreaFor(m => m.ImporterAddress, new { @class = "form-control input_sm", @readonly = true })
                            </div>
                            <div class="col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt col-md-1-5">
                                <label>Importer Address2:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextAreaFor(m => m.ImporterAddress1, new { @class = "form-control input_sm", @readonly = true })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>SMTP No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.SMTPNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.SMTPNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>No Of Pkg.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.NoOfPkg, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.NoOfPkg, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Cargo Type:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.DropDownListFor(m => m.CargoType, new List<SelectListItem>
                                   {
                                       new SelectListItem {Text="HAZ",Value="1" },
                                       new SelectListItem {Text="Non-HAZ",Value="2" }
                                   }, "----Select----", new { @class = "form-control input_sm dropdown", @disabled = true })
                                @Html.ValidationMessageFor(m => m.CargoType, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Cargo Description:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.CargoDescription, new { @class = "form-control input_sm", @maxlength = "1000", @readonly = true })
                                @Html.ValidationMessageFor(m => m.CargoDescription, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Pkg Type:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.PkgType, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.PkgType, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Gross Wt(Kg).:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GR_WT, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GR_WT, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>



                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Invoice  No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.InvNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.InvNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Invoice Date:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.InvDate, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.InvDate, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>



                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Gate Pass  No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GatePassNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GatePassNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Gate Pass Date:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GatePassDate, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GatePassDate, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Gate Exit  No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GateExitNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GateExitNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Gate Exit Date:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GateExitDate, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GateExitDate, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>OBL  No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.OBL_No, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.OBL_No, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>OBL Date:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.OBL_Date, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.OBL_Date, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>


                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Godown Name:</label>
                            </div>
                            <div class="col-md-10-5">
                                @Html.TextBoxFor(m => m.GodownNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.GodownNo, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Location:</label>
                            </div>
                            <div class="col-md-10-5">
                                @Html.TextBoxFor(m => m.Location, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.Location, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>


                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Movement Type:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.DropDownListFor(m => m.MovementType, new List<SelectListItem>
                               {
                                   new SelectListItem {Text="FCL",Value="FCL" },
                                   new SelectListItem {Text="LCL",Value="LCL" }
                               }, "----Select----", new { @class = "form-control input_sm dropdown", @disabled = true })
                                @Html.ValidationMessageFor(m => m.MovementType, "", new { @class = "Error_Msg" })
                            </div>
                            
                            <div class="col-md-1-5">
                                <label>CBM:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.CBM, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.CBM, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5">
                                <label>SQM:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.SQM, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.SQM, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>

                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Shipping Line:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.ShippingLine, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.ShippingLine, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col-md-offset-4 col_cus_offset_3 col_cus_2 padding_rt">
                                <label>Destuffing No.:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.DestuffingNo, new { @class = "form-control input_sm", @readonly = true })
                                @Html.ValidationMessageFor(m => m.DestuffingNo, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>



                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div id="DivFormOneDet" ng-hide="OblEntryDetails.length==0">
                            <table class="table table-striped table-bordered dataTable">
                                <thead>
                                    <tr>
                                        <th width="2%">Sl No</th>
                                        <th width="5%">Container No</th>
                                        <th width="2%">Container Size</th>
                                        <th width="5%">No. of PKG</th>
                                        <th width="5%">GR WT</th>
                                        @*<th width="10%">Shipping Line</th>*@
                                        @*<th width="3%" class="text-center">Action</th>*@
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr ng-repeat="j in OblEntryDetails">
                                        <td width="2%">
                                            {{$index+1}}<input type="hidden" ng-model="j.ID" /><input type="hidden" ng-model="j.AddID" ng-disabled="true" />
                                            <input type="hidden" ng-model="j.DetailsID" />
                                        </td>
                                        <td width="5%"><input type="text" ng-model="j.ContainerNo" ng-blur="onchangetext(j);" maxlength="15" ng-disabled="true" /></td>
                                        <td width="2%">
                                            <select ng-model="j.ContainerSize" ng-disabled="true" required>
                                                <option value="">--Select--</option>
                                                <option value="{{s.id}}" ng-repeat="s in ContainerSizeList">{{s.ContainerSize}}</option>
                                            </select>
                                        </td>
                                        <td width="5%">
                                            <input type="text" ng-model="j.NoOfPkg" ng-disabled="true" onkeypress="return isNumber(event)" />
                                        </td>
                                        <td width="5%"><input type="text" ng-model="j.GR_WT" ng-disabled="true" /></td>

                                        @*<td style="position:relative;">
                                                <input type="text" ng-model="j.ShippingLineName" id="ShippingLineName_{{$index}}" ng-disabled="true" required />
                                                <input type="text" ng-hide="true" ng-model="j.ShippingLineId" />
                                                <span class="search" style="top: 6px; right: 13px;" id="ShippingLineSerach"><i class="fa fa-search" aria-hidden="true" ng-model="j.Slmodal" ng-click="onShippingLineChange($index)" data-toggle="modal" data-target="#ShippingLineModal"></i></span>
                                            </td>*@
                                        @*<td width="3%" style="text-align:center;">
                                                <input type="hidden" ng-model="j.IsProcessed" />
                                                <a href="#" ng-click="Delete($index,j)"><i class="fa fa-window-close-o Delete" aria-hidden="true"></i></a>
                                            </td>*@
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                @*<div class="row">
                        <div class="stoke SignUp_space_bottom SignUp_space_top"></div>
                        <div class="logErrMsg" id="DivTblContrErrMsg" style="background-color:transparent"></div>
                    </div>*@
                    @*<div class="row SignUp_space_bottom">
                            <div class="col-md-offset-4 col-md-2">
                                <input type="button" id="btnAddJO" class="btn log_Btn_sm" value="Add" ng-click="AddOblEntry()" />
                            </div>
                            <div class="col-md-2">
                                <input type="button" id="btnResetJO" class="btn log_Btn_sm" value="Reset" ng-click="ResetJODet()" />
                            </div>
                        </div>*@
                    @*<div class="row">
                            <div class="stoke SignUp_space_bottom SignUp_space_top"></div>
                        </div>*@
                    @*<div class="row SignUp_space_top2">
                            <div class="col-md-offset-4 col-md-2">
                                <input type="submit" id="btnSave" class="btn log_Btn_sm" value="Save" ng-click="OnOBLEntrySave()" />
                            </div>
                            <div class="col-md-2">
                                <input type="button" id="btnReset" class="btn log_Btn_sm" value="Reset" onclick="ResetAllField()" />
                            </div>
                        </div>*@
                    <div class="logSuccMsg Form_Space_top" id="DivSucMsg" style="background-color:transparent"></div>
                    <div class="logErrMsg Form_Space_bottom" id="DivErrMsg" style="background-color:transparent"></div>
                }
                @*<div class="row">
                        <div class="col-md-12">
                            <div id="OblEntryList"></div>
                        </div>
                    </div>*@
            </div>

        </div>
    </div>

    <div class="modal fade" id="ContainerNoModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content popup_modal">
                <div class="modal-header popup_header">
                    <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                    <h4 class="modal-title">List of Container No</h4>
                </div>
                <div class="modal-body popup_body">
                    <input placeholder="Search Me" id="ContainerNobox" type="text" />
                    <ul class="navList" id="lstContainerNo">
                        @{
                            if (ViewBag.ListOfContainerNo != null)
                            {
                                foreach (var item in ViewBag.ListOfContainerNo)
                                {
                                    <li id="@item.Size">@item.ContainerNo</li>
                                }
                            }
                            else
                            {
                                <li></li>
                            }

                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-md-offset-6 col-md-6">
                            <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="ShippingLineModal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content popup_modal">
                <div class="modal-header popup_header">
                    <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                    <h4 class="modal-title">List of Shipping Line Names</h4>
                </div>
                <div class="modal-body popup_body">
                    <input placeholder="Search Me" id="ShippingLinebox" type="text" />
                    <ul class="navList" id="lstShippingLine">
                        @{
                            if (ViewBag.ListOfShippingLine != null)
                            {
                                foreach (var item in ViewBag.ListOfShippingLine)
                                {
                                    <li id="@item.ShippingLineId">@item.ShippingLineName</li>
                                }
                            }
                            else
                            {
                                <li></li>
                            }

                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-md-offset-6 col-md-6">
                            <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="ImporterModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content popup_modal">
                <div class="modal-header popup_header">
                    <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                    <h4 class="modal-title">List of Importer Name</h4>
                </div>
                <div class="modal-body popup_body">
                    <input placeholder="Search Me" id="Importerbox" type="text" />
                    <ul class="navList" id="lstImporter">
                        @{
                            if (ViewBag.ListOfImporter != null)
                            {
                                foreach (var item in ViewBag.ListOfImporter)
                                {
                                    <li id="@item.ImporterId">@item.ImporterName</li>
                                }
                            }
                            else
                            {
                                <li></li>
                            }
                        }
                    </ul>
                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-md-offset-6 col-md-6">
                            <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="OBLModal" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content popup_modal" style="width:50%;">
                <div class="modal-header popup_header">
                    <button type="button" class="close" onclick="CloseOBL()"><i class="fa fa-times" aria-hidden="true"></i></button>
                    <h4 class="modal-title">List of BOE No</h4>
                </div>
                <div class="modal-body popup_body" style="position:relative;">
                    <input placeholder="Search By BOE No" id="OBLBox" type="text" />
                    <span class="search" style="top: 18px;"><i class="fa fa-search" aria-hidden="true" onclick="SearchOBL()"></i></span>
                    <table class="table table-striped table-bordered dataTable tblhd" style="width:100%; margin:0 !important; border-bottom:0; padding:0;">
                        <thead>
                            <tr>
                                <th>BOE No</th>
                            </tr>
                        </thead>
                    </table>
                    <div id="slim_scroll">
                        <table class="table dataTable table-bordered table-striped" id="tblOBL">
                            @{
                                if (ViewBag.LstObl != null)
                                {
                                    foreach (var item in ViewBag.LstObl)
                                    {
                                        <tr onclick="SelectOBL('@item.OBLNo')">
                                            <td>@item.OBLNo</td>
                                        </tr>
                                    }
                                }
                            }
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-md-5">
                            @if (ViewBag.State != null && Convert.ToBoolean(ViewBag.State) == true)
                            {
                                <button type="button" style="width:100%; margin-left:0;" onclick="LoadMoreOBL()" class="btn log_Btn_sm" id="btnLoadMoreOBL">Load More</button>
                            }
                            else
                            {
                                <button type="button" style="width:100%; margin-left:0;" onclick="LoadMoreOBL()" class="btn log_Btn_sm" id="btnLoadMoreOBL" disabled>Load More</button>
                            }
                        </div>
                        <div class="col-md-offset-3 col-md-4">
                            <button type="button" class="btn log_Btn_sm" onclick="CloseOBL()">Close</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript" src="/scripts/jquery.nicescroll.min.js"></script>
<script type="text/javascript">
    $(function () {
        $('#slim_scroll').slimScroll({
            allowPageScroll: true
        });
    });
</script>
<script>

    var ArrayJODetails = [];
    $(function () {

        $("#CargoType").change(function (e) {
            if ($("#CargoType").val()!=null || $("#CargoType").val()!=''|| $("#CargoType").val()!='----Select----') {
                $('[data-valmsg-for="CargoType"]').html('');
            }
            else {
                $('[data-valmsg-for="CargoType"]').html('Fill Out This Field');
            }

        });

        // Decimal Number
        $("#GR_WT").keydown(function (e) {
            if(e.keyCode==190 || e.keyCode==110){
                if($(this).val().indexOf('.')>=0){
                    e.preventDefault();
                }
            }
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number or character
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });

        // Integer Number
        $("#NoOfPkg").keydown(function (e) {
            if(e.keyCode==190 || e.keyCode==110){
                if($(this).val().indexOf('.')>=0){
                    e.preventDefault();
                }
            }
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number or character
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });

        // Text Box
        $("#ContainerNo,#IGM_No,#TPNo,#OBL_No,#LineNo,#SMTPNo").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number or character
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode < 65 || e.keyCode > 90)) {
                e.preventDefault();
            }
        });









        // Text Box with space
        $("#CargoDescription,#PkgType").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if (e.keyCode == 32) {
                return true;
            }
            else if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                // Allow: Ctrl+A, Command+A
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right, down, up
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number or character
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && (e.keyCode < 65 || e.keyCode > 90)) {
                e.preventDefault();
            }
        });

        var SerializedData = @Html.Raw(Json.Encode(Model.StringifiedText));
        if(SerializedData!=null)
        {
            ArrayJODetails=$.parseJSON(SerializedData);
            //GenerateTable();
            //$('#tblJODet').show();
        }
        else {
            $('#tblJODet').hide();
        }

        //GetPortList();
       // GetAllCountry();
        LoadOblEntryList();

        if ($('#Id').val()>0) {
            $('#btnReset').attr('disabled', true);
            $('#btnShowDetails').attr('disabled', true);
            $('#ContainerNo').attr('readonly', true);
            $('#ContainerSize').attr('readonly', true);
            $('#IGM_No').attr('readonly', true);
            $('#ContainerNoSerach').css('display', 'none');
        }
        else {
            //$('#IGM_Date').datepicker({
            //    dateFormat: "dd/mm/yy",
            //    showOn: "button",
            //    buttonImage: "/Content/images/calendar.png",
            //    buttonImageOnly: true,
            //    buttonText: "Select date",
            //    changeMonth: true,
            //    changeYear: true,
            //    showAnima: "fadein",
            //    onClose: function () {
            //        $('[data-valmsg-for="IGM_Date"]').html('');
            //    }
            //});
        }

    });

    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    }

    //$('#TPDate').datepicker({
    //    dateFormat: "dd/mm/yy",
    //    showOn: "button",
    //    buttonImage: "/Content/images/calendar.png",
    //    buttonImageOnly: true,
    //    buttonText: "Select date",
    //    changeMonth: true,
    //    changeYear: true,
    //    showAnima: "fadein",
    //    onClose: function () {
    //        $('[data-valmsg-for="TPDate"]').html('');
    //    }
    //});

    //$('#OBL_Date').datepicker({
    //    dateFormat: "dd/mm/yy",
    //    showOn: "button",
    //    buttonImage: "/Content/images/calendar.png",
    //    buttonImageOnly: true,
    //    buttonText: "Select date",
    //    changeMonth: true,
    //    changeYear: true,
    //    showAnima: "fadein",
    //    onClose: function () {
    //        $('[data-valmsg-for="TPDate"]').html('');
    //    }
    //});

    //$('#OBL_Date').datepicker({
    //    dateFormat: "dd/mm/yy",
    //    showOn: "button",
    //    buttonImage: "/Content/images/calendar.png",
    //    buttonImageOnly: true,
    //    buttonText: "Select date",
    //    changeMonth: true,
    //    changeYear: true,
    //    showAnima: "fadein",
    //    onClose: function () {
    //        $('[data-valmsg-for="OBL_Date"]').html('');
    //    }
    //});

    //function ShowDetails(){

    //    if ($('#Id').val() > 0) {
    //        return false;
    //    }
    //    else if ($('#ContainerNo').val() == '' || $('#ContainerNo').val() == null) {
    //        alert("Please enter Container No.");
    //        return false;
    //    }
    //        //else if ($('#ContainerSize').val() == '' || $('#ContainerSize').val() == '----Select----' && $('#ContainerSize').val() == null) {
    //        //    alert("Please select Container Size.");
    //        //    return false;
    //        //}
    //        //else if ($('#IGM_No').val() == '' || $('#IGM_No').val() == null) {
    //        //    alert("Please enter IGM No.");
    //        //    return false;
    //        //}
    //        //else if ($('#IGM_Date').val() == '' || $('#IGM_Date').val() == null) {
    //        //    alert("Please select IGM Date.");
    //        //    return false;
    //        //}
    //    else {

    //        $.ajax({
    //            type: 'GET',
    //            url: '/Import/Ppg_OblEntry/GetCFSCodeFromContainer',
    //            data: { ContainerNo: $('#ContainerNo').val(), ContainerSize: $('#ContainerSize').val() },
    //            dataType: 'JSON',
    //            success: function (data) {
    //                if (data.Status == 0) {
    //                    $('#CFSCode').val('');
    //                    angular.element('#OBLEntryAppDiv').scope().GetOBLDetails();
    //                    angular.element('#OBLEntryAppDiv').scope().$apply();
    //                    //GetOBLDetails();
    //                }
    //                else if (data.Status == 1) {
    //                    $('#CFSCode').val(data.Data);
    //                    angular.element('#OBLEntryAppDiv').scope().GetOBLDetails();
    //                    angular.element('#OBLEntryAppDiv').scope().$apply();
    //                    //GetOBLDetails();
    //                }
    //                else if (data.Status == 2) {
    //                    $('#CFSCode').val('');
    //                    alert("This Container is alredy exists in OBL Entry.");
    //                    angular.element('#OBLEntryAppDiv').scope().OblEntryDetails.length=0;
    //                    //ArrayJODetails=[];
    //                    $('#tblJODet tbody').html('');
    //                    $('#tblJODet').hide();
    //                    return false;
    //                }
    //            },
    //        });

    //    }


    //}

    //function GetOBLDetails() {
    //    if ($('#Id').val() == 0 && $('#ContainerNo').val() != '' && $('#ContainerNo').val() != null && $('#IGM_No').val() != '' && $('#IGM_No').val() != null && $('#IGM_Date').val() != '' && $('#IGM_Date').val() != null) {
    //        $.ajax({
    //            type: 'GET',
    //            url: '/Import/Ppg_OblEntry/GetOBLDetails',
    //            data: { CFSCode : $('#CFSCode').val(), ContainerNo: $('#ContainerNo').val(), ContainerSize: $('#ContainerSize').val(), IGM_No: $('#IGM_No').val(), IGM_Date: $('#IGM_Date').val(),OBLEntryId:$('#Id').val() },
    //            dataType: 'JSON',
    //            success: function (data) {
    //                if (data.Status == 1) {
    //                    if (data.Data.StringifiedText != null && data.Data.StringifiedText != '') {
    //                        ArrayJODetails = $.parseJSON(data.Data.StringifiedText);
    //                        GenerateTable();
    //                        $('#tblJODet').show();
    //                    }
    //                    else {
    //                        alert("No OBL is available.");
    //                        ArrayJODetails = [];
    //                        $('#tblJODet').hide();
    //                    }

    //                }
    //                else {
    //                    alert("No OBL is available.");
    //                    ArrayJODetails = [];
    //                    $('#tblJODet').hide();
    //                    $('#MovementType').val('');
    //                    $('#PortId').val(0);
    //                    $('#ShippingLineId').val(0);
    //                    $('#ShippingLineName').val('');

    //                }
    //            },
    //        });
    //    }

    //}
    function SelectOBL(OBLNo) {
        debugger;
        ResetAllField() ;
       // $('#DivJOHdr input[type="text"]').val('');
        $('#BOENo').val(OBLNo);
        $("#OBLModal").modal("hide");
        $('#OBLBox').val('');
        LoadOBL();
    }

    var Page = 0;
    function LoadOBL() {
        Page = 0;
        $.ajax({
            url: '/Report/VLDA_ReportCWC/LoadICEGateBOENo',
            type: 'GET',
            data: { OBLNo: "", Page: Page,SearchBy: $('#hdnSearchBy').val() },
            success: function (data) {
                if (data.Status == 1) {
                    debugger;
                    var html = '';
                    $.each(data.Data.LstObl, function (item, elem) {
                        debugger;
                        html += '<tr onclick="SelectOBL(&quot;' + elem.OBLNo + '&quot;)"><td>' + elem.OBLNo + '</td></tr>';
                    });
                    $('#tblOBL tbody').html(html);

                    if (data.Data.State == true)
                        $('#btnLoadMoreOBL').prop('disabled', false);
                    else $('#btnLoadMoreOBL').prop('disabled', true);
                }
            }
        });
    }
    var Page = 0;
    function LoadMoreOBL() {
        Page = 0;
        debugger;
        $.ajax({
            url: '/Report/VLDA_ReportCWC/LoadICEGateBOENo',
            type: 'GET',
            data: { OBLNo: "", Page: Page + 1,SearchBy: $('#hdnSearchBy').val() },
            success: function (data) {
                if (data.Status == 1) {
                    debugger;
                    var html = '';
                    $.each(data.Data.LstObl, function (item, elem) {
                        debugger;
                        html += '<tr onclick="SelectOBL(&quot;' + elem.OBLNo + '&quot;)"><td>' + elem.OBLNo + '</td></tr>';
                    });
                    if (Page == -1)
                        $('#tblOBL tbody').html(html);
                    else
                        $('#tblOBL tbody').append(html);
                    Page++;

                    if (data.Data.State == true)
                        $('#btnLoadMoreOBL').prop('disabled', false);
                    else $('#btnLoadMoreOBL').prop('disabled', true);
                }
            }
        });
    }

    function SearchOBL() {
        if ($('#OBLBox').val() != '') {
            $.ajax({
                url: '/Report/VLDA_ReportCWC/SearchICEGateBOENo',
                type: 'GET',
                data: { OBLNo: $('#OBLBox').val(), SearchBy: $('#hdnSearchBy').val() },
                success: function (data) {
                    if (data.Status == 1) {
                        var html = '';
                        $.each(data.Data.LstObl, function (item, elem) {
                            html += '<tr onclick="SelectOBL(&quot;' + elem.OBLNo + '&quot;)"><td>' + elem.OBLNo + '</td></tr>';
                        });
                        $('#tblOBL tbody').html('');
                        $('#tblOBL tbody').html(html);
                        $('#btnLoadMoreOBL').prop('disabled', false);
                        Page = -1;
                    }
                    else {
                        $('#tblOBL tbody').html('');
                        Page = -1;
                        $('#btnLoadMoreOBL').prop('disabled', false);
                    }

                }
            });
        }
        else
            LoadOBL();
    }

    function CloseOBL() {
        $('#OBLBox').val('');
        $("#OBLModal").modal("hide");
        LoadOBL();
    }

    //function GetPortList() {

    //    $.ajax({
    //        type: 'GET',
    //        url: '/Import/WFLD_OblEntry/GetPortList',
    //        dataType: 'JSON',
    //        success: function (data) {
    //            if (data != null) {
    //                for (var i = 0; i < data.length; i++) {
    //                    $('#PortId').append($("<option></option>").attr("value", data[i].PortId).text(data[i].PortName));
    //                }
    //            }
    //            else {
    //                $('#PortId').html('');
    //            }

    //            if ($('#SelectPortId').val() > 0) {
    //                $('#PortId').val($('#SelectPortId').val());
    //            }

    //        }
    //    });
    //}

    //function GetAllCountry() {

    //    $.ajax({
    //        type: 'GET',
    //        url: '/Import/WFLD_OblEntry/GetAllCountry',
    //        dataType: 'JSON',
    //        success: function (data) {
    //            if (data != null) {
    //                for (var i = 0; i < data.length; i++) {
    //                    $('#CountryId').append($("<option></option>").attr("value", data[i].CountryId).text(data[i].CountryName));
    //                }
    //            }
    //            else {
    //                $('#PortId').html('');
    //            }

    //            if ($('#SelectCountryId').val() > 0) {
    //                $('#CountryId').val($('#SelectCountryId').val());
    //            }

    //        }
    //    });
    //}

    function LoadOblEntryList() {
        $('#OblEntryList').load('/Import/VLDA_OblEntry/ListOfOBLWiseContainer');
    }
    //function LoadOblEntryList() {
    //    $('#OblEntryList').load('/Import/Ppg_OblEntry/ListOfOBLEntry');
    //}
    $('#ContainerNobox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstContainerNo > li').show();
        else {
            $('#lstContainerNo > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });





    
    $('#OBLBox').keyup(function () {
        debugger;
        var valThis = $(this).val().toLowerCase();
        if (valThis == "") {
            //  $('#ShippingLineModal .navList > li').show();
        } else {


            setTimeout( SearchOBL(), 4000);
           
        };
    });

    var ListOfContainerNo=[];
    $('#lstContainerNo > li').on("click", function () {
        debugger;
        $('#ContainerNo').val($(this).text());
        //$('#CFSCode').val($(this).attr('id'));
        $('#ContainerSize').val($(this).attr('id'));

        ListOfContainerNo= @Html.Raw(Json.Encode(ViewBag.ListOfContainerNo));
        //var ListContainerNo=JSON.parse(ListOfContainerNo);

        var resultAarray = $.grep(ListOfContainerNo, function (item) {
            return item.ContainerNo==$('#ContainerNo').val();
        });
        $('#MovementType').val(resultAarray[0].MovementType);
       

        $("#ContainerNoModal").modal("hide");
    });

    $('#ShippingLinebox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstShippingLine > li').show();
        else {
            $('#lstShippingLine > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });
    $('#lstShippingLine > li').on("click", function () {
        $('#ShippingLineName').val($(this).text());
        $('#ShippingLineId').val($(this).attr('id'));
        $("#ShippingLineModal").modal("hide");
    });
    $('#Importerbox').keyup(function () {
        var valThis = $(this).val().toLowerCase();
        if (valThis == "") {
            $('#lstImporter > li').show();
        } else {
            $('#lstImporter > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(valThis) >= 0) ? $(this).show() : $(this).hide();
            });
        };
    });
    $('#lstImporter li').on("click", function () {
        $('#ImporterName').val($(this).text());
        $('#ImporterId').val($(this).attr('id'));
        $("#ImporterModal").modal("hide");
    });

    function JobOrderOnSuccess(data) {
        if (data.Status == 1 || data.Status == 2) {
            $('#DivSucMsg').html(data.Message);
            LoadOblEntryList();
            ResetAllField();
        }
        else {
            $('#DivErrMsg').html(data.Message);
        }
        setTimeout(function () { $('#DivErrMsg,#DivSucMsg').html(''); }, 5000);
    }
    function JobOrderOnFailure() { }

    var isEditOpened=false;
    function LoadOblEntry() {
        $('#DivBody').load('/Import/VLDA_OblEntry/ICEGateDetail');
    }

    function ResetAllField() {
        ArrayJODetails = [];
      //  LoadOblEntry();
        $('#Id').val(0);
        $('#tblJODet').hide();
        $('#DivJOHdr input[type="text"]').val('');
        $('textarea').val('');
        $('#StringifiedText').val('');
        $('#MovementType').val('');
        $('#PortId').val('');
        $('#CountryId').val('');
        $('#btnReset').attr('disabled', false);
        $('#IGM_No').attr('readonly', false);
        $('#ContainerNoSerach').css('display', 'block');

        //$('#IGM_Date').datepicker({
        //    dateFormat: "dd/mm/yy",
        //    showOn: "button",
        //    buttonImage: "/Content/images/calendar.png",
        //    buttonImageOnly: true,
        //    buttonText: "Select date",
        //    changeMonth: true,
        //    changeYear: true,
        //    showAnima: "fadein",
        //    onClose: function () {
        //        $('[data-valmsg-for="IGM_Date"]').html('');
        //    }
        //});

    }
    //function ResetJODet() {
    //    $('#OBL_No,#OBL_Date,#LineNo,#SMTPNo,#NoOfPkg,#CargoDescription,#PkgType,#GR_WT,#ImporterName').val('');
    //    $('#CargoType').val(0);
    //    $('#btnAddJO').attr('disabled', false);
    //    $('#btnResetJO').attr('disabled', false);
    //}

    function AddJODet() {
        if (ValidateJODet()) {
            var JODetails = {
                OBLEntryId: 0,
                OBL_No: $('#OBL_No').val(),
                OBL_Date: $('#OBL_Date').val(),
                LineNo: $('#LineNo').val(),
                SMTPNo: $('#SMTPNo').val(),
                NoOfPkg: $('#NoOfPkg').val(),
                CargoType: $('#CargoType').val(),
                CargoDescription: $('#CargoDescription').val(),
                PkgType: $('#PkgType').val(),
                GR_WT: $('#GR_WT').val(),
                ImporterId: $('#ImporterId').val(),
                ImporterName: $('#ImporterName').val(),
            };
            ArrayJODetails.push(JODetails);
            GenerateTable();
            ResetJODet();
            isEditOpened=false;
            $('#btnResetJO').attr('disabled', false);
            $('#DivTblContrErrMsg').html('');
        }
    }
    function ValidateJODet() {
        var Result = true;
        if ($('#OBL_No').val() == null || $('#OBL_No').val() == '') {
            $('[data-valmsg-for="OBL_No"]').html('<span>Fill Out This Field</span>');
            Result = false;
        }
        if ($('#OBL_Date').val() == null || $('#OBL_Date').val() == '') {
            $('[data-valmsg-for="OBL_Date"]').html('<span>Fill Out This Field</span>');
            Result = false;
        }
        if ($('#CargoType').val() == null  || $('#CargoType').val() == '' || $('#CargoType').val() == '----Select----') {
            $('[data-valmsg-for="CargoType"]').html('<span>Fill Out This Field</span>');
            Result = false;
        }
        if ($('#PkgType').val() == null || $('#PkgType').val() == '') {
            $('[data-valmsg-for="PkgType"]').html('<span>Fill Out This Field</span>');
            Result = false;
        }
        if ($('#GR_WT').val() == null || $('#GR_WT').val() == '') {
            $('[data-valmsg-for="GR_WT"]').html('<span>Fill Out This Field</span>');
            Result = false;
        }
        return Result;
    }
    //function GenerateTable() {
    //    var html = '';
    //    $.each(ArrayJODetails, function (i, item) {
    //        var cargoType = '';
    //        if (item.CargoType == 1) {
    //            cargoType = 'HAZ';
    //        }
    //        else if (item.CargoType == 2) {
    //            cargoType = 'NON-HAZ';
    //        }
    //        html += '<tr><td class="text-center">' + (i + 1) + '</td><td>' + item.OBL_No + '</td><td>' + item.OBL_Date + '</td><td>' + cargoType + '</td><td>' + item.NoOfPkg + '</td><td>' + item.GR_WT + '</td>'
    //          + '<td class="text-center"><a href="#" onclick="EditJODet(' + i + ')"><i class="fa fa-pencil-square Edit"></i></a></td><td class="text-center"><a href="#" onclick="ViewJODet(' + i + ')"><i class="fa fa-search-plus Edit"></i></a></td></tr>';
    //    });
    //    $('#tblJODet tbody').html(html);
    //    $('#tblJODet').show();
    //}
    function EditJODet(i) {
        if (!isEditOpened)
        {
            $('#BtnAddContainer').prop("disabled", false);
            $('#OBL_No').val(ArrayJODetails[i].OBL_No);
            $('#OBL_Date').val(ArrayJODetails[i].OBL_Date);
            $('#LineNo').val(ArrayJODetails[i].LineNo);
            $('#SMTPNo').val(ArrayJODetails[i].SMTPNo);
            $('#NoOfPkg').val(ArrayJODetails[i].NoOfPkg);
            $('#CargoType').val(ArrayJODetails[i].CargoType);
            $('#CargoDescription').val(ArrayJODetails[i].CargoDescription);
            $('#PkgType').val(ArrayJODetails[i].PkgType);
            $('#GR_WT').val(ArrayJODetails[i].GR_WT);
            $('#ImporterName').val(ArrayJODetails[i].ImporterName);
            $('#btnAddJO').attr('disabled', false);
            ArrayJODetails.splice(i, 1);
            GenerateTable();
            isEditOpened=true;
            $('#btnResetJO').attr('disabled', true);

        }
        else {
            $('#DivTblContrErrMsg').html('Please Add The Above Records');
        }
    }
    function ViewJODet(i) {
        if (!isEditOpened)
        {
            $('#OBL_No').val(ArrayJODetails[i].OBL_No);
            $('#OBL_Date').val(ArrayJODetails[i].OBL_Date);
            $('#LineNo').val(ArrayJODetails[i].LineNo);
            $('#SMTPNo').val(ArrayJODetails[i].SMTPNo);
            $('#NoOfPkg').val(ArrayJODetails[i].NoOfPkg);
            $('#CargoType').val(ArrayJODetails[i].CargoType);
            $('#CargoDescription').val(ArrayJODetails[i].CargoDescription);
            $('#PkgType').val(ArrayJODetails[i].PkgType);
            $('#GR_WT').val(ArrayJODetails[i].GR_WT);
            $('#ImporterName').val(ArrayJODetails[i].ImporterName);
            $('#btnAddJO').attr('disabled', true);
            $('#btnResetJO').attr('disabled', false);
        }
        else {
            $('#DivTblContrErrMsg').html('Please Add The Above Records');
        }
    }
    //$('#btnSave').on("click", function () {

    //    if($('#IsAlreadyUsed').val() == 1){
    //        $('#DivErrMsg').html("Cannot Update OBL Entry As It Already Exists In Another Page.");
    //        return false;
    //    }

    //    var length = ArrayJODetails.length;
    //    if (length != null && length > 0){
    //        $('#StringifiedText').val(JSON.stringify(ArrayJODetails));
    //    }
    //    else {
    //        var isModelValid =true;

    //        if($('#ContainerNo').val() == null || $('#ContainerNo').val() == ''){
    //            isModelValid =false;
    //        }
    //        if($('#ContainerSize').val() == null || $('#ContainerSize').val() == ''){
    //            isModelValid =false;
    //        }
    //        if($('#IGM_No').val() == null || $('#IGM_No').val() == ''){
    //            isModelValid =false;
    //        }
    //        if($('#IGM_Date').val() == null || $('#IGM_Date').val() == ''){
    //            isModelValid =false;
    //        }
    //        if($('#MovementType').val() == null || $('#MovementType').val() == '' || $('#MovementType').val() == '----Select----'){
    //            isModelValid =false;
    //        }
    //        if($('#PortId').val() == 0){
    //            isModelValid =false;
    //        }
    //        if($('#CountryId').val() == 0){
    //            isModelValid =false;
    //        }

    //        //if (isModelValid) {
    //        //    alert("Please enter atleast one OBL Entry.");
    //        //    return false;
    //        //}

    //    }

    //    if (isEditOpened) {
    //        $('#DivTblContrErrMsg').html('Please Add The Above Records');
    //        return false;
    //    }
    //    else {
    //        $('#DivTblContrErrMsg').html('');
    //    }
    //});
</script>


@*<script>

        /*
        jQuery Masked Input Plugin
        Copyright (c) 2007 - 2015 Josh Bush (digitalbush.com)
        Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
        Version: 1.4.1
    */
        ! function(a) {
            "function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : jQuery)
        }(function(a) {
            var b, c = navigator.userAgent,
              d = /iphone/i.test(c),
              e = /chrome/i.test(c),
              f = /android/i.test(c);
            a.mask = {
                definitions: {
                    9: "[0-9]",
                    a: "[A-Za-z]",
                    "*": "[A-Za-z0-9]"
                },
                autoclear: !0,
                dataName: "rawMaskFn",
                placeholder: "_"
            }, a.fn.extend({
                caret: function(a, b) {
                    var c;
                    if (0 !== this.length && !this.is(":hidden")) return "number" == typeof a ? (b = "number" == typeof b ? b : a, this.each(function() {
                        this.setSelectionRange ? this.setSelectionRange(a, b) : this.createTextRange && (c = this.createTextRange(), c.collapse(!0), c.moveEnd("character", b), c.moveStart("character", a), c.select())
                    })) : (this[0].setSelectionRange ? (a = this[0].selectionStart, b = this[0].selectionEnd) : document.selection && document.selection.createRange && (c = document.selection.createRange(), a = 0 - c.duplicate().moveStart("character", -1e5), b = a + c.text.length), {
                        begin: a,
                        end: b
                    })
                },
                unmask: function() {
                    return this.trigger("unmask")
                },
                mask: function(c, g) {
                    var h, i, j, k, l, m, n, o;
                    if (!c && this.length > 0) {
                        h = a(this[0]);
                        var p = h.data(a.mask.dataName);
                        return p ? p() : void 0
                    }
                    return g = a.extend({
                        autoclear: a.mask.autoclear,
                        placeholder: a.mask.placeholder,
                        completed: null
                    }, g), i = a.mask.definitions, j = [], k = n = c.length, l = null, a.each(c.split(""), function(a, b) {
                        "?" == b ? (n--, k = a) : i[b] ? (j.push(new RegExp(i[b])), null === l && (l = j.length - 1), k > a && (m = j.length - 1)) : j.push(null)
                    }), this.trigger("unmask").each(function() {
                        function h() {
                            if (g.completed) {
                                for (var a = l; m >= a; a++)
                                    if (j[a] && C[a] === p(a)) return;
                                g.completed.call(B)
                            }
                        }

                        function p(a) {
                            return g.placeholder.charAt(a < g.placeholder.length ? a : 0)
                        }

                        function q(a) {
                            for (; ++a < n && !j[a];);
                            return a
                        }

                        function r(a) {
                            for (; --a >= 0 && !j[a];);
                            return a
                        }

                        function s(a, b) {
                            var c, d;
                            if (!(0 > a)) {
                                for (c = a, d = q(b); n > c; c++)
                                    if (j[c]) {
                                        if (!(n > d && j[c].test(C[d]))) break;
                                        C[c] = C[d], C[d] = p(d), d = q(d)
                                    }
                                z(), B.caret(Math.max(l, a))
                            }
                        }

                        function t(a) {
                            var b, c, d, e;
                            for (b = a, c = p(a); n > b; b++)
                                if (j[b]) {
                                    if (d = q(b), e = C[b], C[b] = c, !(n > d && j[d].test(e))) break;
                                    c = e
                                }
                        }

                        function u() {
                            var a = B.val(),
                              b = B.caret();
                            if (o && o.length && o.length > a.length) {
                                for (A(!0); b.begin > 0 && !j[b.begin - 1];) b.begin--;
                                if (0 === b.begin)
                                    for (; b.begin < l && !j[b.begin];) b.begin++;
                                B.caret(b.begin, b.begin)
                            } else {
                                for (A(!0); b.begin < n && !j[b.begin];) b.begin++;
                                B.caret(b.begin, b.begin)
                            }
                            h()
                        }

                        function v() {
                            A(), B.val() != E && B.change()
                        }

                        function w(a) {
                            if (!B.prop("readonly")) {
                                var b, c, e, f = a.which || a.keyCode;
                                o = B.val(), 8 === f || 46 === f || d && 127 === f ? (b = B.caret(), c = b.begin, e = b.end, e - c === 0 && (c = 46 !== f ? r(c) : e = q(c - 1), e = 46 === f ? q(e) : e), y(c, e), s(c, e - 1), a.preventDefault()) : 13 === f ? v.call(this, a) : 27 === f && (B.val(E), B.caret(0, A()), a.preventDefault())
                            }
                        }

                        function x(b) {
                            if (!B.prop("readonly")) {
                                var c, d, e, g = b.which || b.keyCode,
                                  i = B.caret();
                                if (!(b.ctrlKey || b.altKey || b.metaKey || 32 > g) && g && 13 !== g) {
                                    if (i.end - i.begin !== 0 && (y(i.begin, i.end), s(i.begin, i.end - 1)), c = q(i.begin - 1), n > c && (d = String.fromCharCode(g), j[c].test(d))) {
                                        if (t(c), C[c] = d, z(), e = q(c), f) {
                                            var k = function() {
                                                a.proxy(a.fn.caret, B, e)()
                                            };
                                            setTimeout(k, 0)
                                        } else B.caret(e);
                                        i.begin <= m && h()
                                    }
                                    b.preventDefault()
                                }
                            }
                        }

                        function y(a, b) {
                            var c;
                            for (c = a; b > c && n > c; c++) j[c] && (C[c] = p(c))
                        }

                        function z() {
                            B.val(C.join(""))
                        }

                        function A(a) {
                            var b, c, d, e = B.val(),
                              f = -1;
                            for (b = 0, d = 0; n > b; b++)
                                if (j[b]) {
                                    for (C[b] = p(b); d++ < e.length;)
                                        if (c = e.charAt(d - 1), j[b].test(c)) {
                                            C[b] = c, f = b;
                                            break
                                        }
                                    if (d > e.length) {
                                        y(b + 1, n);
                                        break
                                    }
                                } else C[b] === e.charAt(d) && d++, k > b && (f = b);
                            return a ? z() : k > f + 1 ? g.autoclear || C.join("") === D ? (B.val() && B.val(""), y(0, n)) : z() : (z(), B.val(B.val().substring(0, f + 1))), k ? b : l
                        }
                        var B = a(this),
                          C = a.map(c.split(""), function(a, b) {
                              return "?" != a ? i[a] ? p(b) : a : void 0
                          }),
                          D = C.join(""),
                          E = B.val();
                        B.data(a.mask.dataName, function() {
                            return a.map(C, function(a, b) {
                                return j[b] && a != p(b) ? a : null
                            }).join("")
                        }), B.one("unmask", function() {
                            B.off(".mask").removeData(a.mask.dataName)
                        }).on("focus.mask", function() {
                            if (!B.prop("readonly")) {
                                clearTimeout(b);
                                var a;
                                E = B.val(), a = A(), b = setTimeout(function() {
                                    B.get(0) === document.activeElement && (z(), a == c.replace("?", "").length ? B.caret(0, a) : B.caret(a))
                                }, 10)
                            }
                        }).on("blur.mask", v).on("keydown.mask", w).on("keypress.mask", x).on("input.mask paste.mask", function() {
                            B.prop("readonly") || setTimeout(function() {
                                var a = A(!0);
                                B.caret(a), h()
                            }, 0)
                        }), e && f && B.off("input.mask").on("input.mask", u), A()
                    })
                }
            })
        });

        $("#datepicker-input").mask("99/99/9999");

        $("#datepicker-input").datepicker({
            showOn: "button",
            buttonImageOnly: true,
            changeMonth: true,
            changeYear: true,
            beforeShow: function(input, inst) {
                console.log("input: " + input + ", inst: " + inst);
                //inst.dpDiv.css({marginTop: '-1px', marginLeft: input.offsetWidth + 'px'});
                $(".datepicker-wrap").append(inst.dpDiv);
            }
        });

        $("#datepicker-btn").click(function() {
            $("#datepicker-input").datepicker("show");
        });

    </script>*@






