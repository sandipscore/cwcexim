using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using EinvoiceLibrary;
using System.Web.Mvc;
using CwcExim.Areas.Report.Models;
using CwcExim.Controllers;
using CwcExim.Models;
using CwcExim.Repositories;
using CwcExim.Filters;
using System.IO;
using CwcExim.UtilityClasses;
using System.Reflection;
using System.Text;
using System.Data;
using System.Drawing;
using CwcExim.Areas.CashManagement.Models;
using System.Threading.Tasks;
using CwcExim.Areas.Import.Controllers;
using CwcExim.Areas.CashManagement.Controllers;
using EinvoiceLibrary;
using ClosedXML.Excel;

namespace CwcExim.Areas.Report.Controllers
{
    public class Kdl_ReportCWCController : BaseController
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private string HeadOffice { get; set; }
        private string HOAddress { get; set; }
        public string ZonalOffice { get; set; }
        public string ZOAddress { get; set; }
        public decimal Version { get; set; }

        public string Effectlogofile { get; set; }
        public Kdl_ReportCWCController()
        {
            /*
             * CALL PROCEDURE AND SET VALUE OF PROPERTIES
             */
            CompanyDetailsForReport objCompanyDetails = new CompanyDetailsForReport();
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.getCompanyDetails();
            objCompanyDetails = (CompanyDetailsForReport)ObjRR.DBResponse.Data;
            HeadOffice = ""; //objCompanyDetails.CompanyName;
            HOAddress = "";//objCompanyDetails.RoAddress;
            ZonalOffice = objCompanyDetails.CompanyName;
            ZOAddress = objCompanyDetails.CompanyAddress;
            Effectlogofile = objCompanyDetails.VersionLogoFile;
            Version = objCompanyDetails.EffectVersion;


        }



        #region Invoice Report Details



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult InvoiceReportDetails()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView("InvoiceReportDetails");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetInvoiceReportList(InvoiceReportDetails ObjInvoiceReportDtls)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<InvoiceReportDetails> LstInvoiceReportDetails = new List<InvoiceReportDetails>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetInvoiceReportDetails(ObjInvoiceReportDtls);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstInvoiceReportDetails = (List<InvoiceReportDetails>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateInvoiceReportDetailsPDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "InvoiceReportDetails.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/InvoiceReportDetails/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{

                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                //}
                //"/"+ SubDomain + 
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/InvoiceReportDetails/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region Exemted Service (Without Tax) for a month



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ExemptedService()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetExemptedServiceList(ExemptedService ObjExemptedService)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ExemptedService> LstInvoiceReportDetails = new List<ExemptedService>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetExemptedService(ObjExemptedService);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstInvoiceReportDetails = (List<ExemptedService>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateExemptedServicePDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ExemptedServiceWithoutTax.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ExemptedServiceWithoutTax/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ExemptedServiceWithoutTax/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion

        #region service code wise Invoice Details

        [HttpGet]
        public ActionResult ServiceCodeWiseInvDtls()
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<SACList> LstSAC = new List<SACList>();
            ObjRR.GetSAC();
            if (ObjRR.DBResponse.Data != null)
            {
                LstSAC = (List<SACList>)ObjRR.DBResponse.Data;
            }
            ViewBag.SACList = LstSAC;

            return PartialView();
        }

        /*    [HttpPost]
            [ValidateAntiForgeryToken]
            public ActionResult GetServiceCodeWiseInvDtls(ServiceCodeWiseInvDtls ObjServiceCodeWiseInvDtls)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                List<ServiceCodeWiseInvDtls> LstInvoiceReportDetails = new List<ServiceCodeWiseInvDtls>();
                Login objLogin = (Login)Session["LoginUser"];
                ObjRR.ServiceCodeWiseInvDtls(ObjServiceCodeWiseInvDtls);//, objLogin.Uid
                if (ObjRR.DBResponse.Data != null)
                {
                    LstInvoiceReportDetails = (List<ServiceCodeWiseInvDtls>)ObjRR.DBResponse.Data;
                    return Json(ObjRR.DBResponse);
                }
                else
                {
                    return Json(ObjRR.DBResponse);
                }

            }

            [HttpPost, ValidateInput(false)]
            [CustomValidateAntiForgeryToken]
            public JsonResult GenerateServiceCodeWiseInvDtlsPDF(FormCollection fc)
            {
                try
                {

                    string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                    // string FtpIdPath = "";
                    //string LocalIdPath = "";
                    var Pages = new string[1];
                    var FileName = "ServiceCodeWiseInvoiceDetails.pdf";
                    Pages[0] = fc["Page"].ToString();
                    // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                    //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                    //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                    //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                    // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                    string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ServiceCodeWiseInvoiceDetails/";
                    if (!Directory.Exists(LocalDirectory))
                        Directory.CreateDirectory(LocalDirectory);
                    using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                    {
                        ObjPdf.HeadOffice = this.HeadOffice;
                        ObjPdf.HOAddress = this.HOAddress;
                        ObjPdf.ZonalOffice = this.ZonalOffice;
                        ObjPdf.ZOAddress = this.ZOAddress;
                        ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                    }
                    var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ServiceCodeWiseInvoiceDetails/" + FileName };
                    return Json(ObjResult);

                }
                catch (Exception ex)
                {
                    return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
                }

            }*/


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetServiceCodeWiseInvDtls(Kdl_ServiceCodeWiseInvDtls ObjServiceCodeWiseInvDtls)
        {

            Response.AppendHeader("content-disposition", "attachment;filename=Servicecodewiseinvdtls.xls");
            Response.Charset = "";
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.ContentType = "application/vnd.ms-excel";

            Kdl_ReportRepository obj = new Kdl_ReportRepository();
            obj.ServiceCodeWiseInvDtls(ObjServiceCodeWiseInvDtls.PeriodFrom, ObjServiceCodeWiseInvDtls.PeriodTo, ObjServiceCodeWiseInvDtls.SAC);
            DataSet ds = new DataSet();
            ds = (DataSet)obj.DBResponse.Data;
            //  Response.Write(ImportReportExcelPDF(ds),vm.PeriodFrom,vm.PeriodTo);
            if (obj.DBResponse.Data != "")
            {
                Response.Write(ServiceCodeWiseReportExcelPDF(ds, ObjServiceCodeWiseInvDtls.PeriodFrom, ObjServiceCodeWiseInvDtls.PeriodTo));
                Response.End();
            }
            else
            {
              Console.Write( "No Data Found");
            }


            return Content("xc");
        }



        private string ServiceCodeWiseReportExcelPDF(DataSet ds, string PeriodFrom, string PeriodTo)
        {

            List<dynamic> lstPartyDetails = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
          // List<dynamic> lstinvoiceDetails = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            //List<dynamic> lstSDTransaction = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            var FileName = "Service Code Wise Invoice Details Report.pdf";
            string html = "<html><body>";
            html += "<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>";
           // var Html = '<div style="text-align: center;border: 1px solid #000;">Service Code Wise Invoice Details  From ' + FormDate + ' To ' + ToDate + '</div>'
            html += "<tr><td colspan='12' valign='top' align='center'><h1 style='font-size: 20px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><label style='font-size: 7pt;'>Kandla</label><h5 style='font-weight: bold;'>Service Code Wise Invoice Details For Form" + PeriodFrom + " TO " + PeriodTo + "</h5></td></tr>";
            html += "<tr><td colspan='12'><table cellspacing='0' cellpadding='15' style='text-align: center; border: 1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:7pt;'>";
            html += "<thead>";
            html += "<tr>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Sl no.</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Types of Invoices</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>GSTIN of Supplier</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Name of Supplier</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Invoice Number</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Invoice date</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Place Of Supply</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Taxable Value</th>";
           // html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Income Head</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>HSN Code</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Rate</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>CGST</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>SGST</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>IGST</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>TOTAL GST</th>";
            html += "<th style='border-top: 1px solid #000; padding:20px;'>Invoice Value</th>";
            //    html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>APPRAISEMENT NO</th>";
            //   html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>APPRAISEMENT Date</th>";
            //  html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Haz/Non Haz</th>";
            //   html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>CIF (Rs.)</th>";
            //  html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Duty (Rs.)</th>";
            //  html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Cargo Type (Gen/Haz)</th>";
            //  html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Via No</th>";
            //  html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Vessel Name</th>";
            // html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; padding:20px;'>Main Line</th>";
            // html += "<th style='border-top: 1px solid #000; padding:20px;'>Remarks</th>";
            html += "</tr>";
            html += "</thead>";
            html += "<tbody>";
             int i = 1;

            //for (int i=0;i<= lstPartyDetails.Count; i++)
            lstPartyDetails.ToList().ForEach(item =>
            {
              //int j = i + 1;
                
                    try
                    {
                        html += "<tr>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + i + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.SupplyType + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.Gstno + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.PartyName + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.InvoiceNo + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.Date + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.PartyState + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.TaxableValue + "</td>";
                        //  html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.SAC + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>18%</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.CGSTAmt + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.SGSTAmt + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.IGSTAmt + "</td>";
                        html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.totalgst + "</td>";
                        html += "<td style='border-top: 1px solid #000; text-align: center;padding:20px;'>" + item.TotalValue + "</td>";
                        html += "</tr>";
                        // int j = 1;
                        //  td style = 'border-top: 1px solid #000; text-align: center
                        /*   for (int j = 1; j < lstinvoiceDetails.Count(); j++)
                           {
                               if (lstPartyDetails[i].InvoiceNo == lstinvoiceDetails[j].InvoiceNo )
                               {
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                  html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                  html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].TotalValue + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].PartyState + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].TaxableValue + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].SAC + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>18%</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].CGSTAmt + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].SGSTAmt + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].IGSTAmt + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + lstinvoiceDetails[j].totalgst + "</td>";
                                   html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                                  
                                 j++;


                               };*/

                        //       html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'></td>";
                        //  html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.AppraisementDate + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.cargotype + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.CIFValue + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.Duty + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.cargotype + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.viano + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.vesselname + "</td>";
                        // html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.MainLine + "</td>";
                        // html += "<td style='border-top: 1px solid #000; text-align: center;'>" + item.remark + "</td>";

                        //  i++;

                        //   }



                        // }

                        //    i++;
                        i++;
                        //  }
                    }
                    catch (Exception Ex)
                    {

                    }
                // }
                // }
            });
            html += "</tbody>";
            html += "</table></td></tr>";

            html += "</tbody></table>";
            html += "</body></html>";
            string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/HtmlReport";

            if (!Directory.Exists(LocalDirectory))
            {
                Directory.CreateDirectory(LocalDirectory);
            }
            if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
            {
                System.IO.File.Delete(LocalDirectory + "/" + FileName);
            }

            System.IO.File.WriteAllText(LocalDirectory + "/" + FileName, html);


            FileInfo fi = new FileInfo(LocalDirectory + "/" + FileName);



            //Open a file for Read\Write
            FileStream fs = fi.Open(FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read);


            StreamReader sr = new StreamReader(fs);

            //Use the ReadToEnd method to read all the content from file
            string fileContent = sr.ReadToEnd();

            //Close the StreamReader object after operation
            sr.Close();
            // fs.Close();

            return fileContent;
        }
        // end job order report

        
        #endregion

        #region Debtor Report

        [HttpGet]
        public ActionResult DebtorReport()
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<EximTraderWithInvoice> LstEximTraderWithInvoice = new List<EximTraderWithInvoice>();
            ObjRR.GetEximTraderWithInvoice();
            if (ObjRR.DBResponse.Data != null)
            {
                LstEximTraderWithInvoice = (List<EximTraderWithInvoice>)ObjRR.DBResponse.Data;
            }
            ViewBag.EximTraderWithInvoice = LstEximTraderWithInvoice;

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDebtorReport(DebtorReport ObjDebtorReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<DebtorReport> LstInvoiceReportDetails = new List<DebtorReport>();
            //  Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DebtorReport(ObjDebtorReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstInvoiceReportDetails = (List<DebtorReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDebtorReportPDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DebtorReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DebtorReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DebtorReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region Collection Report
        [HttpGet]
        public ActionResult CollectionReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}
            ViewBag.TotalCash = 0;
            ViewBag.TotalPDA = 0;
            ViewBag.TotalBank = 0;

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetCollectionReport(CollectionReport ObjDebtorReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<CollectionReport> LstInvoiceReportDetails = new List<CollectionReport>();
            FinalCollectionReportTotal objFinalCollectionReportTotal = new FinalCollectionReportTotal();
            CollectionReportTotal objCollectionReportTotal = new CollectionReportTotal();
            //  Login objLogin = (Login)Session["LoginUser"];
            ObjRR.CollectionReport(ObjDebtorReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                objFinalCollectionReportTotal = (FinalCollectionReportTotal)ObjRR.DBResponse.Data;
                LstInvoiceReportDetails = objFinalCollectionReportTotal.listCollectionReport.ToList();
                objCollectionReportTotal = objFinalCollectionReportTotal.objCollectionReportTotal;

                ViewBag.TotalCash = objCollectionReportTotal.TotalCash;
                ViewBag.TotalPDA = objCollectionReportTotal.TotalPDA;
                ViewBag.TotalBank = objCollectionReportTotal.TotalBank;

                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateCollectionReportPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "CollectionReport.pdf";
                Pages[0] = fc["Page"].ToString();

                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CollectionReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CollectionReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion



        #region Invoice Report Summary



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult InvoiceReportSummary()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView("InvoiceReportSummary");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetInvoiceReportSummary(InvoiceReportSummary ObjInvoiceReportSummary)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<InvoiceReportSummary> LstInvoiceReportSummary = new List<InvoiceReportSummary>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetInvoiceReportSummary(ObjInvoiceReportSummary);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstInvoiceReportSummary = (List<InvoiceReportSummary>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateInvoiceReportSummaryPDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "InvoiceReportSummary.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/InvoiceReportSummary/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //"/"+ SubDomain + 
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/InvoiceReportSummary/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion

        #region TDSReport


        [HttpGet]
        public ActionResult TDSReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<PartyLedgerList> LstParty = new List<PartyLedgerList>();
            ObjRR.GetEximTraderForPartyLedger();
            if (ObjRR.DBResponse.Data != null)
            {
                ViewBag.PartyList = new SelectList((List<PartyLedgerList>)ObjRR.DBResponse.Data, "PartyId", "PartyName");
            }
            else
            {
                ViewBag.PartyList = null;
            }
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetTDSReport(TDSReport ObjTDSReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            TDSMain LstITDSMain = new TDSMain();
            //  Login objLogin = (Login)Session["LoginUser"];
            ObjRR.TdsReport(ObjTDSReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstITDSMain = (TDSMain)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateTDSReportPDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "TDSReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/TDSReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/TDSReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion



        #region DailyPdaActivityReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult DailyPdaActivityReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDailyPdaActivityReport(DailyPdaActivityReport ObjDailyPdaActivityReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<DailyPdaActivityReport> LstDailyPdaActivityReport = new List<DailyPdaActivityReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DailyPdaActivity(ObjDailyPdaActivityReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstDailyPdaActivityReport = (List<DailyPdaActivityReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDailyPdaActivityReportPDF(FormCollection fc)
        {
            try
            {

                string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DailyPdActivityReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyPdActivityReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyPdActivityReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region DailyCashBookReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult DailyCashBookReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDailyCashBookReport(DailyCashBook ObjDailyCashBook)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<DailyCashBook> LstDailyCashBook = new List<DailyCashBook>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DailyCashBook(ObjDailyCashBook);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstDailyCashBook = (List<DailyCashBook>)ObjRR.DBResponse.Data;
                LstDailyCashBook = LstDailyCashBook.OrderBy(o => o.ReceiptDate).ThenBy(o => o.CRNo).ToList();

                LstDailyCashBook.Add(new DailyCashBook()
                {
                    ReceiptDate = "<strong>Total</strong>",
                    CRNo = "",
                    Depositor = "",
                    CwcChargeTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CwcChargeTAX)).ToString(),
                    CwcChargeNonTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CwcChargeNonTAX)).ToString(),
                    CustomRevenueTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CustomRevenueTAX)).ToString(),
                    CustomRevenueNonTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CustomRevenueNonTAX)).ToString(),
                    InsuranceTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.InsuranceTAX)).ToString(),
                    InsuranceNonTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.InsuranceNonTAX)).ToString(),
                    PortTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PortTAX)).ToString(),
                    PortNonTAX = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PortNonTAX)).ToString(),
                    LWB = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.LWB)).ToString(),
                    CWCCGST = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCCGST)).ToString(),
                    CWCSGST = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCSGST)).ToString(),
                    CWCISGT = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCISGT)).ToString(),
                    HtTax = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtTax)).ToString(),
                    HtNonTax = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtNonTax)).ToString(),
                    HtCGST = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtCGST)).ToString(),
                    HtSGST = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtSGST)).ToString(),
                    HtISGT = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtISGT)).ToString(),
                    RoPdRefund = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RoPdRefund)).ToString(),
                    MISC = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MISC)).ToString(),
                    PdaPLus = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PdaPLus)).ToString(),
                    TDSPlus = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TDSPlus)).ToString(),
                    PdaMinus = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PdaMinus)).ToString(),
                    Exempted = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Exempted)).ToString(),
                    TDSMinus = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TDSMinus)).ToString(),
                    HtAdjust = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtAdjust)).ToString(),
                    RoundOff = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RoundOff)).ToString(),
                    RowTotal = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RowTotal)).ToString()
                });
                ObjRR.DBResponse.Data = LstDailyCashBook;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDailyCashBookReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DailyCashBookReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyCashBookReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f))
                //{

                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                //}
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyCashBookReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        [HttpGet]
        public ActionResult DailyCashBookReportCash()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Ppg_ReportRepository ObjReport = new Ppg_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDailyCashBookReportCash(DailyCashBookPpg ObjDailyCashBook)
        {
            Ppg_ReportRepository ObjRR = new Ppg_ReportRepository();
            List<DailyCashBookPpg> LstDailyCashBook = new List<DailyCashBookPpg>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DailyCashBookCash(ObjDailyCashBook);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstDailyCashBook = (List<DailyCashBookPpg>)ObjRR.DBResponse.Data;
                LstDailyCashBook = LstDailyCashBook.OrderBy(o => o.ReceiptDate).ThenBy(o => o.CRNo).ToList();

                LstDailyCashBook.Add(new DailyCashBookPpg()
                {
                    /*  ReceiptDate = "<strong>Total</strong>",
                      CRNo = "",
                      Depositor = "",
                      ChqNo = "",
                      GenSpace = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GenSpace)).ToString(),
                      StorageCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.StorageCharge)).ToString(),
                      Insurance = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Insurance)).ToString(),
                      GroundRentEmpty = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GroundRentEmpty)).ToString(),
                      GroundRentLoaded = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GroundRentLoaded)).ToString(),
                      MfCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MfCharge)).ToString(),
                      EntryCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.EntryCharge)).ToString(),
                      Fumigation = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Fumigation)).ToString(),
                      OtherCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.OtherCharge)).ToString(),
                      Cgst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Cgst)).ToString(),
                      Sgst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Sgst)).ToString(),
                      Igst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Igst)).ToString(),
                      Misc = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Misc)).ToString(),
                      MiscExcess = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MiscExcess)).ToString(),
                      TotalCash = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalCash)).ToString(),
                      TotalCheque = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalCheque)).ToString(),
                      Tds = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Tds)).ToString(),
                      CrTds = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CrTds)).ToString()*/
                    InvoiceDate = "<strong>Total</strong>",
                    InvoiceNo = "",
                    InvoiceType = "",
                    PartyName = "",
                    PayeeName = "",
                    ModeOfPay = "",
                    ChqNo = "",
                    GenSpace = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GenSpace)).ToString(),
                    StorageCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.StorageCharge)).ToString(),
                    Insurance = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Insurance)).ToString(),
                    GroundRentEmpty = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GroundRentEmpty)).ToString(),
                    GroundRentLoaded = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.GroundRentLoaded)).ToString(),
                    MfCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MfCharge)).ToString(),
                    EntryCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.EntryCharge)).ToString(),
                    Fumigation = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Fumigation)).ToString(),
                    OtherCharge = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.OtherCharge)).ToString(),
                    Misc = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Misc)).ToString(),
                    Cgst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Cgst)).ToString(),
                    Sgst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Sgst)).ToString(),
                    Igst = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Igst)).ToString(),

                    MiscExcess = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MiscExcess)).ToString(),
                    TotalCash = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalCash)).ToString(),
                    TotalCheque = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalCheque)).ToString(),
                    TotalOthers = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalOthers)).ToString(),
                    Tds = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Tds)).ToString(),
                    CrTds = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CrTds)).ToString(),
                    TotalPDA = LstDailyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TotalPDA)).ToString(),
                    Remarks = ""

                });
                ObjRR.DBResponse.Data = LstDailyCashBook;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDailyCashBookReportPDFCash(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DailyCashBookReport.pdf";
                Pages[0] = fc["Page"].ToString();
                Pages[0] = fc["Page"].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyCashBookReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A3Landscape, 30f, 30f, 20f, 20f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f))
                //{

                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                //}
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyCashBookReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }



        #endregion


        #region MonthlyCashBookReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult MonthlyCashBookReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetMonthlyCashBookReport(MonthlyCashBook ObjMonthlyCashBook)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<MonthlyCashBook> LstMonthlyCashBook = new List<MonthlyCashBook>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.MOnthlyCashBook(ObjMonthlyCashBook);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstMonthlyCashBook = (List<MonthlyCashBook>)ObjRR.DBResponse.Data;
                LstMonthlyCashBook.Add(new MonthlyCashBook()
                {
                    ReceiptDate = "<strong>Total</strong>",
                    CRNo = "",
                    Depositor = "",
                    CwcChargeTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CwcChargeTAX)).ToString(),
                    CwcChargeNonTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CwcChargeNonTAX)).ToString(),
                    CustomRevenueTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CustomRevenueTAX)).ToString(),
                    CustomRevenueNonTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CustomRevenueNonTAX)).ToString(),
                    InsuranceTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.InsuranceTAX)).ToString(),
                    InsuranceNonTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.InsuranceNonTAX)).ToString(),
                    PortTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PortTAX)).ToString(),
                    PortNonTAX = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PortNonTAX)).ToString(),
                    LWB = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.LWB)).ToString(),
                    CWCCGST = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCCGST)).ToString(),
                    CWCSGST = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCSGST)).ToString(),
                    CWCISGT = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.CWCISGT)).ToString(),
                    HtTax = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtTax)).ToString(),
                    HtNonTax = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtNonTax)).ToString(),
                    HtCGST = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtCGST)).ToString(),
                    HtSGST = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtSGST)).ToString(),
                    HtISGT = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtISGT)).ToString(),
                    RoPdRefund = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RoPdRefund)).ToString(),
                    MISC = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.MISC)).ToString(),
                    PdaPLus = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PdaPLus)).ToString(),
                    TDSPlus = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TDSPlus)).ToString(),
                    PdaMinus = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.PdaMinus)).ToString(),
                    Exempted = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.Exempted)).ToString(),
                    TDSMinus = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.TDSMinus)).ToString(),
                    HtAdjust = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.HtAdjust)).ToString(),
                    BankDeposit = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.BankDeposit)).ToString(),
                    RoundOff = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RoundOff)).ToString(),
                    RowTotal = LstMonthlyCashBook.ToList().Sum(o => Convert.ToDecimal(o.RowTotal)).ToString()
                });
                ObjRR.DBResponse.Data = LstMonthlyCashBook;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateMonthlyCashBookPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "MonthlyCashBookReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/MonthlyCashBookReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/MonthlyCashBookReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region ContainerMovementRegister



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ContainerMovementRegister()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetContainerMovementRegister(ContainerMovementRegister ObjContainerMovementRegister)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ContainerMovementRegister> LstContainerMovementRegister = new List<ContainerMovementRegister>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.ContainerMovementRegister(ObjContainerMovementRegister);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerMovementRegister = (List<ContainerMovementRegister>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateContainerMovementRegisterPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ContainerMovementRegister.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyCashBookReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyCashBookReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region StatementOfEmptyContainer



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult StatementOfEmptyContainer()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetStatementOfEmptyContainer(StatementOfEmptyContainer ObjStatementOfEmptyContainer)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<StatementOfEmptyContainer> LstStatementOfEmptyContainer = new List<StatementOfEmptyContainer>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.StatementOfEmptyContainer(ObjStatementOfEmptyContainer);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstStatementOfEmptyContainer = (List<StatementOfEmptyContainer>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateStatementOfEmptyContainerPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "StatementOfEmptyContainer.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyCashBookReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyCashBookReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region ContainerArrivalReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ContainerArrivalReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetContainerArrivalReport(ContainerArrivalReport ObjContainerArrivalReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ContainerArrivalReport> LstContainerArrivalReport = new List<ContainerArrivalReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.ContainerArrivalReport(ObjContainerArrivalReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerArrivalReport = (List<ContainerArrivalReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateContainerArrivalReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ContainerArrivalReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ContainerArrivalReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ContainerArrivalReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region SealClosingReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult SealClosingReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetSealClosingReport(SealClosingReport ObjSealClosingReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<SealClosingReport> LstSealClosingReport = new List<SealClosingReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.SealClosingReport(ObjSealClosingReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstSealClosingReport = (List<SealClosingReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateSealClosingReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "SealClosingReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/SealClosingReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/SealClosingReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }





        #endregion


        #region De-stuffing Report



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult DeStuffingReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDeStuffingReport(DeStuffingReport ObjDeStuffingReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<DeStuffingReport> LstDeStuffingReport = new List<DeStuffingReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DeStuffingReport(ObjDeStuffingReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstDeStuffingReport = (List<DeStuffingReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDeStuffingReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DeStuffingReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DeStuffingReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DeStuffingReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region Bulk Invoice

        [HttpGet]
        public ActionResult BulkInvoiceReport()
        {


            return PartialView();
        }


        [HttpGet]
        [CustomValidateAntiForgeryToken]
        public ActionResult ListOfInvoiceDateWise(string FromDate, string ToDate, string Module = "All", int ShippingLineId = 0, int CHAId = 0)
        {
            ReportRepository ObjRR = new ReportRepository();
            List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetInvoiceList(FromDate, ToDate, Module, ShippingLineId, CHAId);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }

        }


        [HttpPost]
//  [ValidateAntiForgeryToken]
        public JsonResult GetBulkInvoiceReport(BulkInvoiceReport ObjBulkInvoiceReport)
        {
            if (ObjBulkInvoiceReport.InvoiceNumber == null)
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<BulkInvoiceReport> LstContainerMovementRegister = new List<BulkInvoiceReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.BulkInvoiceReport(ObjBulkInvoiceReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                IList<string> pages = new List<string>();
                var htmls = (List<string>)ObjRR.DBResponse.Data;
                htmls.ForEach(item =>
                {
                    if (!string.IsNullOrEmpty(item) || item != "")
                    {
                        try
                        {
                            var orginalHtml = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(item));
                            var ImgLeft = Server.MapPath("~/Content/Images/CWCPDF.PNG");
                            var ImgRight = Server.MapPath("~/Content/Images/SwachhBharat-Logo.png");
                            orginalHtml = orginalHtml.Replace("IMGLeft", ImgLeft).Replace("IMGRight", ImgRight);
                            pages.Add(orginalHtml.Replace("|_br_|", "<br/>").Replace("<>", " ").Split(' ')[0]);
                            pages.Add(orginalHtml.Replace("|_br_|", "<br/>").Replace("<>", " ").Split(' ')[1]);

                        }
                        catch { }
                    }
                });
                if (htmls.Count() > 0)
                {
                    var type = "bulkreport";
                    var id = "bi" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                    var fileName = id + ".pdf";
                    //  var fileName = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                    string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
                    if (!Directory.Exists(PdfDirectory))
                        Directory.CreateDirectory(PdfDirectory);
                    using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                    {
                        rh.GeneratePDF(PdfDirectory + fileName, pages.ToArray());
                    }



                    return Json(new { Status = 1, Message = "../../Docs/bulkreport/" + id + ".pdf" }, JsonRequestBehavior.DenyGet);
                }
                else
                {
                    return Json(ObjRR.DBResponse);
                }
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateBulkInvoiceReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "BulkInvoice.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/BulkInvoice/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f))
                {

                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/BulkInvoice/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }


        //[HttpGet]
        //[CustomValidateAntiForgeryToken]
        //public ActionResult ListOfInvoiceDateWise(string FromDate, string ToDate)
        //{
        //    Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
        //    List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
        //    Login objLogin = (Login)Session["LoginUser"];
        //    ObjRR.GetInvoiceList(FromDate, ToDate);//, objLogin.Uid
        //    if (ObjRR.DBResponse.Data != null)
        //    {
        //        //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
        //        return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        //    }

        //}

        # endregion

        #region cargoInStock



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult cargoInStockReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetcargoInStockReport(CargoInStockReport ObjCargoInStockReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<CargoInStockReport> LstCargoInStockReport = new List<CargoInStockReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.CargoInstockReport(ObjCargoInStockReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstCargoInStockReport = (List<CargoInStockReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratecargoInStockReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "CargoInStockReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CargoInStockReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CargoInStockReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }



        #endregion



        #region PDSummary



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult PDASummaryReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetPdSummaryReport(PdSummary ObjPdSummary)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<PdSummary> LstPdSummary = new List<PdSummary>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.PdSummaryReport(ObjPdSummary);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstPdSummary = (List<PdSummary>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePdSummaryPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "PdSummary.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/PdSummary/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/PdSummary/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion 



        //#region cargoInStock



        ///*Invoice Report Detai;s Section-06.11.2017*/
        //[HttpGet]
        //public ActionResult cargoInStockReport()
        //{
        //    //Login ObjLogin = (Login)Session["LoginUser"];
        //    //ViewBag.DistList = null;
        //    //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
        //    //ObjReport.GetDistricts(ObjLogin.Uid);
        //    //if (ObjReport.DBResponse.Data != null)
        //    //{
        //    //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
        //    //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
        //    //}

        //    return PartialView();
        //}

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult GetcargoInStockReport(PdSummary ObjPdSummary)
        //{
        //    Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
        //    List<PdSummary> LstPdSummary = new List<PdSummary>();
        //    Login objLogin = (Login)Session["LoginUser"];
        //    ObjRR.PdSummaryReport(ObjPdSummary);//, objLogin.Uid
        //    if (ObjRR.DBResponse.Data != null)
        //    {
        //        LstPdSummary = (List<PdSummary>)ObjRR.DBResponse.Data;
        //        return Json(ObjRR.DBResponse);
        //    }
        //    else
        //    {
        //        return Json(ObjRR.DBResponse);
        //    }

        //}

        //[HttpPost, ValidateInput(false)]
        //[CustomValidateAntiForgeryToken]
        //public JsonResult GeneratecargoInStockReportPDF(FormCollection fc)
        //{
        //    try
        //    {

        //        //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
        //        // string FtpIdPath = "";
        //        //string LocalIdPath = "";
        //        var Pages = new string[1];
        //        var FileName = "PdSummary.pdf";
        //        Pages[0] = fc["Page"].ToString();
        //        // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
        //        //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
        //        //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
        //        //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
        //        // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
        //        string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/PdSummary/";
        //        if (!Directory.Exists(LocalDirectory))
        //            Directory.CreateDirectory(LocalDirectory);
        //        using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f))
        //        {

        //            ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

        //        }
        //        var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/PdSummary/" + FileName };
        //        return Json(ObjResult);

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
        //    }

        //}

        //#endregion 



        #region ContainerOutReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ContainerOutReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetContainerOutReport(ContainerOutReport ObjContainerOutReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ContainerOutReport> LstContainerOutReport = new List<ContainerOutReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.ContainerOutport(ObjContainerOutReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerOutReport = (List<ContainerOutReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateContainerOutReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ContainerOutReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ContainerOutReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ContainerOutReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion


        #region GatePassReport




        [HttpGet]
        public ActionResult GatePassReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetGatePassReport(GatePassReport ObjGatePassReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<GatePassReport> LstContainerOutReport = new List<GatePassReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GatePassReport(ObjGatePassReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerOutReport = (List<GatePassReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateGatePassReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "GatePassReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/GatePassReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/GatePassReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion




        #region IssueSlipReport




        [HttpGet]
        public ActionResult IssueSlipReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetIssueSlipReport(IssueSlipReport ObjIssueSlipReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<IssueSlipReport> LstContainerOutReport = new List<IssueSlipReport>();
            // Login objLogin = (Login)Session["LoginUser"];
            ObjRR.IssueSlipReport(ObjIssueSlipReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerOutReport = (List<IssueSlipReport>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateIssueSlipReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "IssueSlipReport.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/IssueSlipReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/IssueSlipReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion


        #region De_stuffingReportBig




        [HttpGet]
        public ActionResult DeStuffingReportBig()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDeStuffingReportBig(DeStuffingReportBig ObjDeStuffingReportBig)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<DeStuffingReportBig> LstContainerOutReport = new List<DeStuffingReportBig>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DeStuffingReportBig(ObjDeStuffingReportBig);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerOutReport = (List<DeStuffingReportBig>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDeStuffingReportBigPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "DeStuffingReportDetails.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/IssueSlipReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/IssueSlipReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion




        #region CargoStuffingRegister



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult CargoStuffingRegister()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetCargoStuffingRegister(CargoStuffingRegister ObjCargoStuffingRegister)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<CargoStuffingRegister> LstCargoStuffingRegister = new List<CargoStuffingRegister>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.CargoStuffingRegister(ObjCargoStuffingRegister);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstCargoStuffingRegister = (List<CargoStuffingRegister>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateCargoStuffingRegisterPDF(FormCollection fc)
        {
            try
            {


                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "CargoStuffingRegister.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CargoStuffingRegister/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CargoStuffingRegister/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion



        #region Shipping line cha importer wise daily activity report



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult SlineChaImpDailyActivity()
        {

            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<SlineImpCHAList> LstSlineImpCHAList = new List<SlineImpCHAList>();
            ObjRR.ShippingLChaImpList();
            if (ObjRR.DBResponse.Data != null)
            {
                LstSlineImpCHAList = (List<SlineImpCHAList>)ObjRR.DBResponse.Data;
            }
            ViewBag.SlineImpCHAList = LstSlineImpCHAList;

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetSlineChaImpDailyActivity(SlineChaImpDailyActivity ObjSlineChaImpDailyActivity)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<SlineChaImpDailyActivity> LstSlineChaImpDailyActivity = new List<SlineChaImpDailyActivity>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.SlineChaImpDailyActivity(ObjSlineChaImpDailyActivity);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstSlineChaImpDailyActivity = (List<SlineChaImpDailyActivity>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateSlineChaImpDailyActivityPDF(FormCollection fc)
        {
            try
            {


                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "SlineChaImpDailyActivity.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CargoStuffingRegister/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CargoStuffingRegister/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Bulk Receipt

        [HttpGet]
        public ActionResult BulkReceiptReport()
        {


            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetBulkReceiptReport(BulkReceiptReport ObjBulkReceiptReport)
        {
            if (ObjBulkReceiptReport.ReceiptNumber == null)
            {
                ObjBulkReceiptReport.ReceiptNumber = "";
            }

            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<BulkReceiptReport> LstContainerMovementRegister = new List<BulkReceiptReport>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.BulkReceiptReport(ObjBulkReceiptReport);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                IList<string> pages = new List<string>();
                var htmls = (List<string>)ObjRR.DBResponse.Data;
                htmls.ForEach(item =>
                {
                    if (!string.IsNullOrEmpty(item) || item != "")
                    {
                        try
                        {
                            var orginalHtml = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(item));
                            var ImgLeft = Server.MapPath("~/Content/Images/CWCPDF.PNG");
                            var ImgRight = Server.MapPath("~/Content/Images/SwachhBharat-Logo.png");
                            orginalHtml = orginalHtml.Replace("IMGLeft", ImgLeft).Replace("IMGRight", ImgRight);
                            pages.Add(orginalHtml.Replace("|_br_|", "<br/>").Replace("<>", " ").Split(' ')[0]);
                            pages.Add(orginalHtml.Replace("|_br_|", "<br/>").Replace("<>", " ").Split(' ')[1]);
                        }
                        catch (Exception e)
                        {
                            string error = e.Message.ToString();
                        }
                    }
                });

                if (pages.Count > 0)
                {

                    var type = "bulkreport";
                    var id = "BulkReceipt" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                    var fileName = id + ".pdf";
                    //  var fileName = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                    string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
                    if (!Directory.Exists(PdfDirectory))
                        Directory.CreateDirectory(PdfDirectory);
                    using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                    {
                        rh.GeneratePDF(PdfDirectory + fileName, pages.ToArray());
                    }



                    return Json(new { Status = 1, Message = "../../Docs/bulkreport/" + id + ".pdf" }, JsonRequestBehavior.DenyGet);
                }
                else
                {
                    ObjRR.DBResponse.Status = 2;
                    return Json(ObjRR.DBResponse);
                }
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }




      


        [HttpPost]
       // [ValidateAntiForgeryToken]
        public JsonResult GetBulkReceiptReportNew(BulkReceiptReport ObjBulkReceiptReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetBulkCashreceipt(ObjBulkReceiptReport.PeriodFrom, ObjBulkReceiptReport.PeriodTo, ObjBulkReceiptReport.ReceiptNumber);
            if (ObjRR.DBResponse.Status == 1)
            {
                DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                string Path = GenerateBulkReceiptReport(ds);
                return Json(new { Status = 1, Message = Path });
            }
            return Json(new { Status = 0, Message = "No Data Found" });
        }
        [NonAction]
        public string GenerateBulkReceiptReport(DataSet ds)
        {
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);
            List<dynamic> lstMode = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[4]);
            List<string> lstSB = new List<string>();

            int i = 0;
            lstInvoice.ToList().ForEach(item =>
            {
                StringBuilder html = new StringBuilder();

                //Page Header
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'><tbody>");

                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'><tbody>");
                html.Append("<tr><th style='width:20%;'><img style='width:50%;' src='ImgLeft'/></th><th style='width:60%;'></th><th style='width:20%;'><img style='width:70%;' src='ImgRight'/></th></tr><tr><th colspan='3' style='text-align:center;vertical-align:bottom;'>CENTRAL WAREHOUSING CORPORATION<br />(A GOVT. OF INDIA UNDERTAKING)</th></tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td colspan='6' width='50%'>" + objCompany[0].ROAddress + "</td>");
                html.Append("<td colspan='6' width='50%' align='right'>" + objCompany[0].CompanyAddress + "</td></tr>");

                html.Append("<tr><th colspan='12' align='center'>CASH RECEIPT</th></tr>");

                html.Append("<tr><th colspan='12'><br/></th></tr>");

                html.Append("<tr><td colspan='4' width='33.33333333333333%'></td>");
                html.Append("<th colspan='6' width='50%'>Details of Receiver ( Billed to)</th></tr>");

                html.Append("<tr>");
                html.Append("<td colspan='4' width='33.33333333333333%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>");
                html.Append("<tr><td><b>GSTIN -</b>" + objCompany[0].GstIn + "</td></tr>");
                html.Append("<tr><td><b>PAN NO -</b>" + objCompany[0].Pan + "</td></tr>");
                html.Append("<tr><td><b>STATE CODE -</b>" + objCompany[0].StateCode + "</td></tr>");
                html.Append("</tbody></table></td>");
                html.Append("<td colspan='6' width='50%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>");
                html.Append("<tr><th>Name :</th> <td>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th>Address :</th> <td>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th>State :</th> <td>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th>State Code :</th> <td>" + item.PartyStateCode + "</td></tr>");
                html.Append("<tr><th>GSTIN/Unique ID :</th> <td>" + item.PartyGSTNo + "</td></tr>");
                html.Append("</tbody></table></td>");
                html.Append("</tr>");

                html.Append("<tr>");
                html.Append("<td colspan='6' width='50%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>");
                html.Append("<tr><td><b>Invoice No. :</b> " + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><td><b>Cash Receipt No :</b> " + item.ReceiptNo + "</td></tr>");
                html.Append("</tbody></table></td>");
                html.Append("<td colspan='6' width='50%' align='right'><b>Date :</b> " + item.ReceiptDate + " </td>");
                html.Append("</tr>");

                html.Append("<tr>");
                html.Append("<td colspan='6' width='50%' style='vertical-align: top;'><table cellspacing='0' cellpadding='5' style='border:1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'>");
                html.Append("<thead><tr><th style='border-right: 1px solid #000;'>CONTAINER NO.</th>");
                html.Append("<th style='border-right: 1px solid #000;'>SIZE</th>");
                html.Append("<th style='border-right: 1px solid #000;'>ARRIVAL DT.</th>");
                html.Append("<th>CARGO TYPE</th></tr></thead>");
                html.Append("<tbody>");
                html.Append("<tr><td style='border-right: 1px solid #000; border-top: 1px solid #000;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'></td>");
                html.Append("<td style='border-top: 1px solid #000;'></td></tr>");
                html.Append("</tbody>");
                html.Append("</table></td>");
                html.Append("<td colspan='6' width='50%'><table cellspacing='0' cellpadding='5' style='border:1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'><tbody>");
                html.Append("<tr><td><b>Shipping Line. :</b> </td></tr>");
                html.Append("<tr><td><b>CFS Code No. :</b> </td></tr>");
                html.Append("<tr><td><b>Date & Time of Arrival (FN/AN) :</b> </td></tr>");
                html.Append("<tr><td><b>Date & Time of Destuffing (FN/AN)/ Delivery.,Date & Time of Destuffing(FN/AN) / Delivery. :</b> </td></tr>");
                html.Append("<tr><td><b>Name Of Importer :</b> </td></tr>");
                html.Append("<tr><td><b>Bill Of Entry No :</b> </td></tr>");
                html.Append("<tr><td><b>Name of CHA :</b> </td></tr>");
                html.Append("<tr><td><b>No of Packages. :</b> </td></tr>");
                html.Append("<tr><td><b>Total Gross Weight. :</b> </td></tr>");
                html.Append("<tr><td><b>Gross Weight per Package :</b> </td></tr>");
                html.Append("<tr><td><b>Storage space occupied() :</b> </td></tr>");
                html.Append("<tr><td><b>Chargeable period for Storage space. :</b> </td></tr>");
                html.Append("<tr><td><br/><br/></td></tr>");
                html.Append("<tr><td><b>(a) Date & Time of Destuffing (FN/AN)/ Delivery.,Date & Time of Destuffing(FN/AN) / Delivery :</b> </td></tr>");
                html.Append("<tr><td><b>(b) Date of Delivery :</b> </td></tr>");
                html.Append("<tr><td><b>(c) Customs Examination Date :</b> </td></tr>");
                html.Append("</tbody></table></td>");
                html.Append("</tr>");

                html.Append("<tr><td colspan='12'>Value of Cargo (CIF Value + Duty + Penalty) Rs. </td></tr>");

                html.Append("<tr><td colspan='6' width='50%'><b>Invoice No.</b>" + item.InvoiceNo + "</td>");
                html.Append("<td colspan='6' width='50%' align='right'><b>Date</b>" + item.InvoiceDate + "</td></tr>");

                html.Append("<tr><td colspan='12'><table cellspacing='0' cellpadding='5' style='text-align:center; border:1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:7.5pt;'>");
                html.Append("<thead>");
                html.Append("<tr><th rowspan='2' style='border-right: 1px solid #000;'>Particulars</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000;'>SAC</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000;'>Value</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000;'>TDS</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000;'>Discount</th>");
                html.Append("<th colspan='6' style='border-right: 1px solid #000;'>Taxes</th>");
                html.Append("<th rowspan='2' style='text-align:right;'>Total Amount</th></tr>");
                html.Append("<tr><th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>CGST</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>SGST</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>IGST</th></tr>");
                html.Append("</thead>");
                html.Append("<tbody>");
                decimal taxamt = 0M;
                decimal CGST = 0M;
                decimal SGST = 0M;
                decimal IGST = 0M;
                decimal GrandTotal = 0M;
                lstCharges.Where(x=>x.CashReceiptId == item.CashReceiptId).ToList().ForEach(em =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-top: 1px solid #000;'>"+ em.OperationSDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.Taxable + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>0</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>0</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>" + em.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.CGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>" + em.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.SGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>" + em.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.IGSTAmt + "</td>");
                    html.Append("<td style='border-top: 1px solid #000; text-align:right;'>" + em.Total + "</td></tr>");
                    taxamt = taxamt + em.Taxable;
                    CGST = CGST + em.CGSTAmt;
                    SGST = SGST + em.SGSTAmt;
                    IGST = IGST + em.IGSTAmt;
                    GrandTotal = GrandTotal + em.Total;
                });
                html.Append("<tr><th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Grand Total</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'></th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + taxamt + "</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'></th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>0</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>0</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>"+ CGST + "</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>0</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + SGST + "</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:right;'>0</th>");
                html.Append("<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>"+ IGST + "</th>");
                html.Append("<th style='border-top: 1px solid #000; text-align:right;'>"+ GrandTotal + "</th></tr>");

                html.Append("<tr><th colspan='11' style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:left;'>Round Up</th>");
                html.Append("<th style='border-top: 1px solid #000; text-align:right;'>"+ item.RoundUp + "</th></tr>");

                html.Append("<tr><th colspan='11' style='border-right: 1px solid #000; border-top: 1px solid #000; text-align:left;'>Grand Total(Rounded)</th>");
                html.Append("<th style='border-top: 1px solid #000; text-align:right;'>" + GrandTotal + "</th></tr>");

                html.Append("<tr><td colspan='12' style='border-top: 1px solid #000; text-align:left;'><b>TDS Deduction :</b> 0</td></tr>");

                html.Append("<tr><td colspan='12' style='border-top: 1px solid #000; text-align:left;'><b>TDS Collection :</b> "+ item.TdsAmount + "</td></tr>");

                html.Append("<tr><td colspan='12' style='border-top: 1px solid #000; text-align:left;'><b>FIGURE IN WORDS :</b>"+ objCurr.changeCurrencyToWords(GrandTotal.ToString("0"))+"</td></tr>");
                html.Append("</tbody>");
                html.Append("</table></td></tr>");

                html.Append("<tr><td colspan='12'><b>REMARKS :</b> "+ item.Remarks + "</td></tr>");
                
                html.Append("<tr><td colspan='12'><table cellspacing='0' cellpadding='5' style='border:1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:7.5pt;'>");
                html.Append("<thead><tr><th style='border-right: 1px solid #000;'>Mode</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Drawee Bank</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Instrument No</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Date</th>");
                html.Append("<th style='text-align:right;'>Amount</th></tr></thead>");
                html.Append("<tbody>");
                lstMode.Where(x => x.CashReceiptId == item.CashReceiptId).ToList().ForEach(em =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-top: 1px solid #000;'>"+ em.PayMode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.DraweeBank + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.InstrumentNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + em.Date + "</td>");
                    html.Append("<td style='border-top: 1px solid #000; text-align:right;'>" + em.Amount + "</td></tr>");
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr>");

                html.Append("<tr><td colspan='12'><b>CASHIER REMARKS :</b> " + item.Remarks + "</td></tr>");

                html.Append("<tr><td><br/><br/><br/><br/></td></tr>");
                html.Append("<tr>");
                html.Append("<th colspan='4' width='33.33333333333333%' align='left'>CASHIER</th>");
                html.Append("<th colspan='4' width='33.33333333333333%' align='center'>AM (A/cs)</th>");
                html.Append("<th colspan='4' width='33.33333333333333%' align='right'>Manager (CFS)</th>");
                html.Append("</tr>");


                html.Append("</tbody></table>");

                html = html.Replace("ImgLeft", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("ImgRight", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });
            var type = "bulkreport";
            var id = "BulkReceipt" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
            var fileName = id + ".pdf";
            string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
            if (!Directory.Exists(PdfDirectory))
                Directory.CreateDirectory(PdfDirectory);
            using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
            {
                rh.HeadOffice = "";
                rh.HOAddress = "";
                rh.ZonalOffice = "";
                rh.ZOAddress = "";
                rh.GeneratePDF(PdfDirectory + fileName, lstSB);
            }
            return "/Docs/" + type + "/" + fileName;
        }









        [HttpGet]
        [CustomValidateAntiForgeryToken]
        public ActionResult ListOfReceiptDateWise(string FromDate, string ToDate)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            //List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
            //Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetReceiptList(FromDate, ToDate);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }

        }

        # endregion



        #region ChequeSummaryReport



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ChequeSummaryReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetChequeSummaryReport(ChequeSummary ObjChequeSummary)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ChequeSummary> LstChequeSummary = new List<ChequeSummary>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.ChequeSummary(ObjChequeSummary);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstChequeSummary = (List<ChequeSummary>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateChequeSummaryReportPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ChequeSummary.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ChequeSummary/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ChequeSummary/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region Bay Wise Register
        [HttpGet]
        public ActionResult GetBayWiseRegister()
        {
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult GetBayWiseRegisterDetails(FormCollection fc)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            List<BayWiseRegister> lstBay = new List<BayWiseRegister>();
            objRR.BayWiseRegister(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            if (objRR.DBResponse.Data != null)
            {
                lstBay = (List<BayWiseRegister>)objRR.DBResponse.Data;
                string Path = BayWiseRegisterPDF(lstBay);
                return Json(new { Status = 1, Message = Path });
            }
            else
                return Json(new { Status = -1, Message = "No Data" });
        }
        [NonAction]
        public string BayWiseRegisterPDF(List<BayWiseRegister> lstBay)
        {
            string Html = "<table style='width:100%;font-size:9pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th style='width:30%;text-align:right;'><img src='imgMODEL' style='width:50%;' /></th><th style='width:40%;font-weight:600;text-align:center;'><span style='font-size:12pt;'>CENTRAL WAREHOUSING CORPORATION</span><br/>(A GOVERNMENT OF INDIA UNDERTAKING)<br/><span style='font-size:10pt;'>BAY WISE REGISTER</span></th><th style='text-align:right;'>F/CD/CFS CAL/PMR/04</th></tr></thead><tbody><tr><td colspan='3'><table style='width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;border:1px solid #000;'><thead><tr><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Sl.No.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Date & Shift of Destufing</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Container no.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Shipping Line/Name of the Vessel/Voyage/Line No/Rotation</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>CFS Code</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>No. of Pkgs.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Grid No.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Cargo Details</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>No. of Grids Occupied</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>OBL No.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Name of the consignee / Importers</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Date of Delivery</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Gate Pass No.</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>No. of pkgs. Delivered</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Closing Balance</th><th style='border:1px solid #000;padding:3px;text-align:center;font-weight:600;'>Remarks</th></tr></thead><tbody>";
            string html2 = "";
            int Count = 1;
            lstBay.ToList().ForEach(item =>
            {
                html2 += "<tr><td style='border:1px solid #000;padding:3px;text-align:center;'>" + Count + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.DestuffingEntryDate + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.ContainerNo + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.SLine + "<br/>" + item.Vessel + "<br/>" + item.Voyage + "<br/>" + item.LineNo + "<br/>" + item.Rotation + "<br/>" + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.CFSCode + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.NoOfPackages + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.GodownWiseLctnNames + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.CargoDescription + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'></td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.BOLNo + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.ImporterName + "</td><td style='border:1px solid #000;padding:3px;text-align:center;'>" + item.DeliveryDate + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.GatePassNo + "</td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.NoOfPackagesDeli + "</td><td style='border:1px solid #000;padding:3px;text-align:right;'></td><td style='border:1px solid #000;padding:3px;text-align:left;'>" + item.Remarks + "</td></tr>";
                Count++;
            });
            html2 += "</tbody></table></td></tr></tbody></table>";
            string Path = Server.MapPath("~/Docs/") + Session.SessionID + "/BayWiseRegister.pdf";
            if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
            {
                Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
            }
            if (System.IO.File.Exists(Path))
            {
                System.IO.File.Delete(Path);
            }
            Html = (Html + html2).ToString().Replace("imgMODEL", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            using (var rh = new ReportingHelper(PdfPageSize.A3Landscape, 40f, 20f))
            {
                rh.GeneratePDF(Path, Html);
            }
            return "/Docs/" + Session.SessionID + "/BayWiseRegister.pdf";
        }
        #endregion

        #region Bulk Credit Note
        [HttpGet]
        public ActionResult GetBulkCreditNote()
        {
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult GetBulkCreditNoteReport(FormCollection fc)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.GetBulkCreditNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            List<string> lststring = new List<string>();
            if (objRR.DBResponse.Data != null)
            {
                lststring = (List<string>)objRR.DBResponse.Data;
                List<string> pdfPages = new List<string>();
                /*PDF Gneration*/
                string Path = Server.MapPath("~/Docs/") + Session.SessionID + "/";
                string FileName = "BulkCRNote" + "CR" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                lststring.ForEach(item =>
                {
                    if (!string.IsNullOrEmpty(item) && item != "")
                    {
                        item = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(item));
                        pdfPages.Add(item.Replace("|_br_|", "<br/>"));
                    }
                });
                //using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    rh.GeneratePDF(Path + FileName, pdfPages.ToArray());
                //}
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(Path + FileName, pdfPages.ToArray());

                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/" + FileName });
            }
            else
                return Json(new { Status = -1, Message = "No Data" });
        }
        #endregion

        #region Party Wise Ledger

        /* [HttpGet]
         public ActionResult PartyWiseLedger()
         {
             Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
             List<PartyLedgerList> LstParty = new List<PartyLedgerList>();
             ObjRR.GetEximTraderForPartyLedger();
             if (ObjRR.DBResponse.Data != null)
             {
                 ViewBag.PartyList = new SelectList((List<PartyLedgerList>)ObjRR.DBResponse.Data, "PartyId", "PartyName");
             }
             else
             {
                 ViewBag.PartyList = null;
             }
             return PartialView();
         }

         [HttpPost]
         [ValidateAntiForgeryToken]
         public JsonResult GetPartyWiseLedgerDetail(PartyWiseLedger ObjPartyLedger)
         {
             if (ModelState.IsValid)
             {
                 Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                 ObjRR.GetPartyWiseLedger(ObjPartyLedger.FromDate, ObjPartyLedger.ToDate, ObjPartyLedger.PartyId);
                 return Json(ObjRR.DBResponse);
             }
             else
             {
                 var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                 return Json(new { Status = 0, Message = ErrorMessage });
             }
         }

         [HttpPost, ValidateInput(false)]
         [CustomValidateAntiForgeryToken]
         public JsonResult GeneratePDFOfPartyWiseLedger(FormCollection Fc)
         {
             try
             {
                 var Pages = new string[1];
                 var FileName = "PartyWiseLedger.pdf";
                 Pages[0] = Fc["Page"].ToString();
                 string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/PartyWiseLedger/";
                 if (!Directory.Exists(LocalDirectory))
                 {
                     Directory.CreateDirectory(LocalDirectory);
                 }
                 Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                 //Fc["Page"].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                 //using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                 //{
                 //    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                 //}
                 using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                 {
                     ObjPdf.HeadOffice = this.HeadOffice;
                     ObjPdf.HOAddress = this.HOAddress;
                     ObjPdf.ZonalOffice = this.ZonalOffice;
                     ObjPdf.ZOAddress = this.ZOAddress;
                     ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                 }

                 return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/PartyWiseLedger/" + FileName });
             }
             catch
             {
                 return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
             }
         }*/
        public ActionResult PartyWiseLedger()
        {
            Hdb_ReportRepository ObjRR = new Hdb_ReportRepository();
            ObjRR.GetAllPartyForSDDet("", 0);
            if (ObjRR.DBResponse.Data != null)
            {
                var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjRR.DBResponse.Data);
                var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                ViewBag.LstParty = Jobject["LstParty"];
                ViewBag.State = Jobject["State"];
            }
            return PartialView();
        }




        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetLedgerDetReport(string FromDate, string ToDate, int PartyId)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();

            string Fdt = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd");
            string Tdt = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd");

            ObjRR.GetLedgerDetStatement(PartyId, Fdt, Tdt);
            string Path = "";
            if (ObjRR.DBResponse.Data != null)
            {
                Kdl_SDDetailsStatement SDData = new Kdl_SDDetailsStatement();
                SDData = (Kdl_SDDetailsStatement)ObjRR.DBResponse.Data;
                if (SDData.SDBalance == 0)
                {
                    Path = GeneratePDFLedgerDetReport(SDData, FromDate, ToDate);
                }
                else
                {
                    Path = GeneratePDFLedgerSDDetReport(SDData, FromDate, ToDate);
                }
            }
            return Json(new { Status = 1, Data = Path }, JsonRequestBehavior.AllowGet);
        }


        //[NonAction]
        //public string GeneratePDFLedgerDetReport(Kdl_SDDetailsStatement SDData, string FromDate, string ToDate)
        //{
        //    try
        //    {
        //        var FileName = "LedgerReport.pdf";
        //        StringBuilder Pages = new StringBuilder();
        //        string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
        //        //***************************************************************************************


        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
        //        Pages.Append("<tr><td colspan='12'>");
        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
        //        Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
        //        Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>opp:Custom, Boundary of KPT, Near West Gate No.2. P.B.No.1,Kandla-370210</span><br/><label style='font-size: 14px; font-weight:bold;'>PARTY LEDGER STATEMENT</label></td></tr>");
        //        Pages.Append("</tbody></table>");
        //        Pages.Append(" </td></tr>");
        //        Pages.Append("</thead>");

        //        Pages.Append(" <tbody>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party :</b>" + SDData.PartyName + "</td></tr>");
        //        Pages.Append(" <tr><td colspan='12' style='font-size:12px;'><b>Folio No :</b> " + SDData.PartyCode + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>CWC GST No :</b> " + SDData.CompanyGst + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party GST No :</b> " + SDData.PartyGst + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Period :</b> " + FromDate + " - " + ToDate + "</td></tr>");
        //        Pages.Append("</tbody></table>");

        //        int i = 1;
        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
        //        Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>Sl. No</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>Date</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>PARTICULAR</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>Invoice No</th>");
        //       Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>Invoice Date</th>");
        //      //  Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>Receipt No</th>");
        //       // Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Receipt Date</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Credit</th>");
        //        // Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'></th>");

        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:center;'>Debit</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:center;'>Balance</th></tr></thead>");

        //        Pages.Append("<tbody>");
        //        int counter = 1;
        //        decimal utilisationamt = 0;
        //        decimal ReceiptAmt = 0;
        //        decimal balance = 0;
        //        SDData.lstInvc.ForEach(item =>
        //        {
        //            Pages.Append("<tr>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + item.Date + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.TranType + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.InvoiceNo + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.InvoiceDate + "</td>");
        //          //  Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>" + item.ReceiptNo + "</td>");
        //           // Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.ReceiptDate + "</td>");
        //            if (item.ReceiptNo != "")
        //            {
        //                if (item.TranAmt == 0)
        //                {
        //                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                }
        //                else
        //                {
        //                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + ReceiptAmt.ToString() + "</td>");

        //                }

        //            }
        //            else
        //            {
        //                Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + ReceiptAmt.ToString() + "</td>");

        //            }
        //            //  Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.TranType + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:right;'>" + item.TranAmt.ToString() + "</td>");

        //              if (counter == 0)
        //            {
        //                Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
        //            }
        //           /* else if (counter == 1)
        //            {
        //                Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
        //            }*/
                
                
        //            else
        //            {
        //                if (item.ReceiptNo != "")
        //                {
        //                    if (item.TranAmt == 0)
        //                    {
        //                        if (item.CrAdjust == 0)
        //                        {
        //                            utilisationamt = utilisationamt + Convert.ToDecimal(item.ReceiptAmt);
        //                            balance = balance - Convert.ToDecimal(item.TranAmt);
        //                        }
        //                    }
                           
        //                    else
        //                    {
        //                        utilisationamt = utilisationamt + Convert.ToDecimal(item.TranAmt);
        //                        balance = balance - Convert.ToDecimal(item.TranAmt);
        //                    }
        //                }
        //                utilisationamt = utilisationamt - Convert.ToDecimal(item.TranAmt);
        //                balance = balance + Convert.ToDecimal(item.TranAmt);
        //                Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + utilisationamt.ToString() + "</td>");
        //            }
        //            Pages.Append("</tr>");
        //            counter++;
        //            i++;
        //        });
        //        Pages.Append("<tr>");
        //        Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>Closing Balance :</th>");
        //        Pages.Append("<th style='width:12%;text-align:right;'>" + utilisationamt.ToString() + "</th>");
        //        Pages.Append("</tr>");



        //        Pages.Append("<tr>");
        //      //  Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>SD Balance :</th>");
        //      //  Pages.Append("<th style='width:12%;text-align:right;'>" + SDData.SDBalance.ToString() + "</th>");
        //        Pages.Append("</tr>");

        //        Decimal UtiBalance = Convert.ToDecimal(SDData.SDBalance) - Math.Abs(utilisationamt);
        //        Pages.Append("<tr>");
        //      //  Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>Utilization Balance :</th>");
        //      //  Pages.Append("<th style='width:12%;text-align:right;'>" + UtiBalance.ToString() + "</th>");
        //        Pages.Append("</tr>");
        //        Pages.Append("</tbody></table>");

        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
        //        Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
        //        Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
        //        Pages.Append("</tbody></table>");

        //        //***************************************************************************************
        //        Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

        //        if (!Directory.Exists(LocalDirectory))
        //        {
        //            Directory.CreateDirectory(LocalDirectory);
        //        }
        //        if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
        //        {
        //            System.IO.File.Delete(LocalDirectory + "/" + FileName);
        //        }
        //        //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
        //        //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
        //        using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
        //        {
        //            ObjPdf.HeadOffice = this.HeadOffice;
        //            ObjPdf.HOAddress = this.HOAddress;
        //            ObjPdf.ZonalOffice = this.ZonalOffice;
        //            ObjPdf.ZOAddress = this.ZOAddress;
        //            ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
        //        }
        //        return "/Docs/" + Session.SessionID + "/Report/" + FileName;
        //    }
        //    catch
        //    {
        //        return "";
        //    }
        //}
        //[NonAction]
        //public string GeneratePDFLedgerSDDetReport(Kdl_SDDetailsStatement SDData, string FromDate, string ToDate)
        //{
        //    try
        //    {
        //        var FileName = "LedgerReport.pdf";
        //        StringBuilder Pages = new StringBuilder();
        //        string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
        //        //***************************************************************************************


        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
        //        Pages.Append("<tr><td colspan='12'>");
        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
        //        Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
        //        Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>opp:Custom, Boundary of KPT, Near West Gate No.2. P.B.No.1,Kandla-370210</span><br/><label style='font-size: 14px; font-weight:bold;'>PARTY LEDGER STATEMENT</label></td></tr>");
        //        Pages.Append("</tbody></table>");
        //        Pages.Append(" </td></tr>");
        //        Pages.Append("</thead>");

        //        Pages.Append(" <tbody>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party :</b>" + SDData.PartyName + "</td></tr>");
        //        Pages.Append(" <tr><td colspan='12' style='font-size:12px;'><b>Folio No :</b> " + SDData.PartyCode + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>CWC GST No :</b> " + SDData.CompanyGst + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party GST No :</b> " + SDData.PartyGst + "</td></tr>");
        //        Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Period :</b> " + FromDate + " - " + ToDate + "</td></tr>");
        //        Pages.Append("</tbody></table>");

        //        int i = 1;
        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
        //        Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>Sl. No</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>Date</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>PARTICULAR</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>Invoice No</th>");
        //       Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;text-align:center;'>Invoice Date</th>");
        //       // Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>Receipt No</th>");
        //      //  Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Receipt Date</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Credit</th>");
        //        // Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'></th>");

        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:center;'>Debit</th>");
        //        Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:center;'>Balance</th></tr></thead>");

        //        Pages.Append("<tbody>");
        //        int counter = 1;
        //        decimal utilisationamt = 0;
        //        decimal ReceiptAmt = 0;
        //        decimal balance = 0;
        //        SDData.lstInvc.ForEach(item =>
        //        {
        //            Pages.Append("<tr>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + item.ReceiptDate + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.TranType + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.InvoiceNo + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.InvoiceDate + "</td>");
        //           // Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>" + item.ReceiptNo + "</td>");
        //          //  Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.ReceiptDate + "</td>");
        //            if (item.ReceiptNo != "")
        //            {
        //                if (item.TranAmt == 0)
        //                {
        //                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                }
        //                else
        //                {
        //                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + ReceiptAmt.ToString() + "</td>");

        //                }

        //            }
        //            else
        //            {
        //                Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + ReceiptAmt.ToString() + "</td>");

        //            }
        //            //  Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.TranType + "</td>");
        //            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;text-align:right;'>" + item.TranAmt.ToString() + "</td>");

        //            if (counter == 1)
        //            {
        //                Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
        //            }
        //            /* else if (counter == 1)
        //             {
        //                 Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
        //                 utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
        //             }*/


        //            else
        //            {
        //                if (item.ReceiptNo != "")
        //                {
        //                    if (item.TranAmt == 0)
        //                    {
        //                        if (item.CrAdjust == 0)
        //                        {
        //                            utilisationamt = utilisationamt + Convert.ToDecimal(item.ReceiptAmt);
        //                            balance = balance - Convert.ToDecimal(item.TranAmt);
        //                        }
        //                    }

        //                    else
        //                    {
        //                        utilisationamt = utilisationamt + Convert.ToDecimal(item.TranAmt);
        //                        balance = balance - Convert.ToDecimal(item.TranAmt);
        //                    }
        //                }
        //                utilisationamt = utilisationamt - Convert.ToDecimal(item.TranAmt);
        //                balance = balance + Convert.ToDecimal(item.TranAmt);
        //                Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + utilisationamt.ToString() + "</td>");
        //            }
        //            Pages.Append("</tr>");
        //            counter++;
        //            i++;
        //        });
        //        Pages.Append("<tr>");
        //        Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>Closing Balance :</th>");
        //        Pages.Append("<th style='width:12%;text-align:right;'>" + utilisationamt.ToString() + "</th>");
        //        Pages.Append("</tr>");



        //        Pages.Append("<tr>");
        //       // Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>SD Balance :</th>");
        //       // Pages.Append("<th style='width:12%;text-align:right;'>" + SDData.SDBalance.ToString() + "</th>");
        //        Pages.Append("</tr>");

        //        Decimal UtiBalance = Convert.ToDecimal(SDData.SDBalance) - Math.Abs(utilisationamt);
        //        Pages.Append("<tr>");
        //       // Pages.Append("<th colspan='7' style='width:8%;text-align:right;'>Utilization Balance :</th>");
        //      //  Pages.Append("<th style='width:12%;text-align:right;'>" + UtiBalance.ToString() + "</th>");
        //        Pages.Append("</tr>");
        //        Pages.Append("</tbody></table>");

        //        Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
        //        Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
        //        Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
        //        Pages.Append("</tbody></table>");

        //        //***************************************************************************************
        //        Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

        //        if (!Directory.Exists(LocalDirectory))
        //        {
        //            Directory.CreateDirectory(LocalDirectory);
        //        }
        //        if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
        //        {
        //            System.IO.File.Delete(LocalDirectory + "/" + FileName);
        //        }
        //        //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
        //        //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
        //        using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
        //        {
        //            ObjPdf.HeadOffice = this.HeadOffice;
        //            ObjPdf.HOAddress = this.HOAddress;
        //            ObjPdf.ZonalOffice = this.ZonalOffice;
        //            ObjPdf.ZOAddress = this.ZOAddress;
        //            ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
        //        }
        //        return "/Docs/" + Session.SessionID + "/Report/" + FileName;
        //    }
        //    catch
        //    {
        //        return "";
        //    }
        //}


        [NonAction]
        public string GeneratePDFLedgerDetReport(Kdl_SDDetailsStatement SDData, string FromDate, string ToDate)
        {
            try
            {
                var FileName = "SdReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
                //***************************************************************************************

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>CFS Kandla</span><br/><label style='font-size: 14px; font-weight:bold;'>SD STATEMENT</label></td></tr>");
                Pages.Append("</tbody></table>");
                Pages.Append(" </td></tr>");
                Pages.Append("</thead>");

                Pages.Append(" <tbody>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party :</b>" + SDData.PartyName + "</td></tr>");
                Pages.Append(" <tr><td colspan='12' style='font-size:12px;'><b>Folio No :</b> " + SDData.PartyCode + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>CWC GST No :</b> " + SDData.CompanyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party GST No :</b> " + SDData.PartyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Period :</b> " + FromDate + " - " + ToDate + "</td></tr>");
                Pages.Append("</tbody></table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
                Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>Sl. No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>Invoice No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Invoice Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>Receipt No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Receipt Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Pay Receipt</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Transaction Type</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;width:12%;'>Transaction Amount</th></tr></thead>");
                Pages.Append("<tbody>");
                int counter = 1;
                decimal utilisationamt = 0;
                decimal ReceiptAmt = 0;
                decimal balance = 0;
                SDData.lstInvc.ForEach(item =>
                {
                    Pages.Append("<tr>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.InvoiceNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.InvoiceDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>" + item.ReceiptNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.ReceiptDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.TranType + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.TranAmt.ToString() + "</td>");
                    Pages.Append("</tr>");
                    if (counter == 1)
                    {
                        //   Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
                        utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
                    }
                    if (counter > 1)
                    {
                        if (item.ReceiptNo != "")
                        {
                            if (item.TranAmt == 0)
                            {
                                if (item.CrAdjust == 0)
                                {
                                    utilisationamt = utilisationamt + Convert.ToDecimal(item.ReceiptAmt);
                                    balance = balance - Convert.ToDecimal(item.TranAmt);
                                }
                            }

                            else
                            {
                                utilisationamt = utilisationamt + Convert.ToDecimal(item.TranAmt);
                                balance = balance - Convert.ToDecimal(item.TranAmt);
                            }
                        }
                        utilisationamt = utilisationamt - Convert.ToDecimal(item.TranAmt);
                        balance = balance + Convert.ToDecimal(item.TranAmt);

                    }
                    counter++;
                    i++;
                });
                Pages.Append("<tr>");
                Pages.Append("<th colspan='7' style='border-right:1px solid #000;width:8%;text-align:right;'>Invoice Utilization Balance :</th>");
                Pages.Append("<th style='width:12%;text-align:right;'>" + /*SDData.UtilizationAmount*/utilisationamt + "</th>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
                Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
                Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
                Pages.Append("</tbody></table>");

                //***************************************************************************************
                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }

        [NonAction]
        public string GeneratePDFLedgerSDDetReport(Kdl_SDDetailsStatement SDData, string FromDate, string ToDate)
        {
            try
            {
                var FileName = "SdReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
                //***************************************************************************************

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>CFS Kandla</span><br/><label style='font-size: 14px; font-weight:bold;'>SD STATEMENT</label></td></tr>");
                Pages.Append("</tbody></table>");
                Pages.Append(" </td></tr>");
                Pages.Append("</thead>");

                Pages.Append(" <tbody>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party :</b>" + SDData.PartyName + "</td></tr>");
                Pages.Append(" <tr><td colspan='12' style='font-size:12px;'><b>Folio No :</b> " + SDData.PartyCode + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>CWC GST No :</b> " + SDData.CompanyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party GST No :</b> " + SDData.PartyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Period :</b> " + FromDate + " - " + ToDate + "</td></tr>");
                Pages.Append("</tbody></table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
                Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>Sl. No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>Invoice No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Invoice Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>Receipt No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Receipt Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Pay Receipt</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Transaction Type</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;width:12%;'>Transaction Amount</th></tr></thead>");
                Pages.Append("<tbody>");
                int counter = 1;
                decimal utilisationamt = 0;
                decimal ReceiptAmt = 0;
                decimal balance = 0;
                SDData.lstInvc.ForEach(item =>
                {
                    Pages.Append("<tr>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.InvoiceNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.InvoiceDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>" + item.ReceiptNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.ReceiptDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.TranType + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.TranAmt.ToString() + "</td>");
                    Pages.Append("</tr>");
                    if (counter == 1)
                    {
                     //   Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
                        utilisationamt = Convert.ToDecimal(item.ReceiptAmt);
                    }
                    if (counter > 1)
                    {
                        if (item.ReceiptNo != "")
                        {
                            if (item.TranAmt == 0)
                            {
                                if (item.CrAdjust == 0)
                                {
                                    utilisationamt = utilisationamt + Convert.ToDecimal(item.ReceiptAmt);
                                    balance = balance - Convert.ToDecimal(item.TranAmt);
                                }
                            }

                            else
                            {
                                utilisationamt = utilisationamt + Convert.ToDecimal(item.TranAmt);
                                balance = balance - Convert.ToDecimal(item.TranAmt);
                            }
                        }
                        utilisationamt = utilisationamt - Convert.ToDecimal(item.TranAmt);
                        balance = balance + Convert.ToDecimal(item.TranAmt);
                      
                    }
                    counter++;
                    i++;
                });
                Pages.Append("<tr>");
                Pages.Append("<th colspan='7' style='border-right:1px solid #000;width:8%;text-align:right;'>Invoice Utilization Balance :</th>");
                Pages.Append("<th style='width:12%;text-align:right;'>" + utilisationamt /*SDData.UtilizationAmount*/ + "</th>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
                Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
                Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
                Pages.Append("</tbody></table>");

                //***************************************************************************************
                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }
        #endregion

        #region Work Slip Report

        [HttpGet]
        public ActionResult WorkSlip()
        {
            return PartialView("WorkSlip");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetWorkSlipReportList(WorkSlipReport ObjWorkSlipReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetWorkSlipReportList(ObjWorkSlipReport);//, objLogin.Uid
            return Json(ObjRR.DBResponse);
        }


        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateWorkSlipPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[2];
                string FileName = "WorkSlipReport.pdf";
                Pages[0] = fc["Page"].ToString();
                Pages[1] = fc["nPage"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/WorkSlipReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);
                //}
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/WorkSlipReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region Container Balance In CFS Report



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult ContainerBalanceInCFSReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}
            ViewBag.BranchType = Session["BranchType"];
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetContainerBalanceInCFS(ContainerBalanceInCFS ObjContainerBalanceInCFS)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<ContainerBalanceInCFS> LstContainerBalanceInCFS = new List<ContainerBalanceInCFS>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.ContainerBalanceInCFS(ObjContainerBalanceInCFS);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstContainerBalanceInCFS = (List<ContainerBalanceInCFS>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateContainerBalanceInCFSPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "ContainerBalanceInCFS.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ContainerBalanceInCFS/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ContainerBalanceInCFS/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region Daily Transaction Report

        [HttpGet]
        public ActionResult DailyTransaction()
        {
            ViewBag.BranchType = Session["BranchType"];
            return PartialView("DailyTransaction");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetDailyTransactionReportList(DailyTransactionReport ObjDailyTransactionReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetDailyTransactionReportList(ObjDailyTransactionReport);//, objLogin.Uid
            return Json(ObjRR.DBResponse);
        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateDailyTransactionPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[12];
                string FileName = "DailyTransactionReport.pdf";
                Pages[0] = fc["Page1"].ToString();
                Pages[1] = fc["Page2"].ToString();
                Pages[2] = fc["Page3"].ToString();
                Pages[3] = fc["Page4"].ToString();
                Pages[4] = fc["Page5"].ToString();
                Pages[5] = fc["Page6"].ToString();
                Pages[6] = fc["Page7"].ToString();
                Pages[7] = fc["Page8"].ToString();
                Pages[8] = fc["Page9"].ToString();
                Pages[9] = fc["Page10"].ToString();
                Pages[10] = fc["Page11"].ToString();
                Pages[11] = fc["Page12"].ToString();

                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/DailyTransactionReport/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);
                //}
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DailyTransactionReport/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion

        #region CFS_ECO Report

        private StringBuilder CreateFieldToBrowse(MonthlyEconomyReport item, StringBuilder sb)
        {
            if (item.FieldType == (int)FieldType.NonValuedField)
            {
                sb.Append("<tr>");

                if (item.ItemType == ItemType.Expense_Rent || item.ItemType == ItemType.Expense_Print)
                {
                    sb.Append("<td style='padding-left:5px;'><span>" + item.ItemCodeNo + "</span></td>");
                    sb.Append("<td colspan='2'><span>" + item.ItemLabel + "</span></td>");
                }
                else if (item.ItemType == ItemType.AnnexureEstablishment)
                {
                    sb.Append("<td colspan='3'><span>" + item.ItemLabel + "</span></td>");
                }
                else
                {
                    sb.Append("<td colspan='2'><span>" + item.ItemLabel + "</span></td>");
                }

                sb.Append("</tr>");
            }
            else if (item.FieldType > (int)FieldType.NonValuedField)
            {
                if (item.ItemType == ItemType.AnnexureEstablishment || item.ItemType == ItemType.AnnexureTotal)
                {
                    sb.Append("<tr>");
                    sb.Append("<td style='padding-left:15px;'><span>" + item.ItemLabel + "</span></td>");

                    sb.Append("<td>");

                    if (item.FieldType == (int)FieldType.TextBoxWithoutJs)
                    {
                        sb.Append("<input class='Numeric' onblur='IsEmpy(this);' style='width: 100%;' type='text' id='txtNoPost_" + item.IncomeExpHeadId + "' name='txtNoPost_" + item.IncomeExpHeadId + "' value='" + item.NoOfPosts + "'>");
                    }
                    else if (item.FieldType == (int)FieldType.TextBoxWithJs)
                    {
                        sb.Append("<input class='Numeric' style='width: 100%;' onblur='IsEmpy(this);" + item.Script + ";' type='text' id='txtNoPost_" + item.IncomeExpHeadId + "' name='txtNoPost_" + item.IncomeExpHeadId + "' value='" + item.NoOfPosts + "'>");
                    }
                    else if (item.FieldType > (int)FieldType.TextBoxWithJs)
                    {
                        if (item.FieldType == (int)FieldType.ReadOnlyTextBoxWithJsResult)
                        {
                            sb.Append("<input  class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txtNoPost_" + item.IncomeExpHeadId + "' name='txtNoPost_" + item.IncomeExpHeadId + "' value='" + item.NoOfPosts + "'>");
                        }
                        else
                        {
                            sb.Append("<input  class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txtNoPost_" + item.IncomeExpHeadId + "' name='txtNoPost_" + item.IncomeExpHeadId + "' value='" + item.NoOfPosts + "'>");
                        }
                    }
                    sb.Append("</td>");

                    sb.Append("<td>");

                    if (item.FieldType == (int)FieldType.TextBoxWithoutJs)
                    {
                        sb.Append("<input  class='Numeric'  onblur='IsEmpy(this);' style='width: 100%;' type='text' id='txtNoPostAmt_" + item.IncomeExpHeadId + "' name='txtNoPostAmt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                    }
                    else if (item.FieldType == (int)FieldType.TextBoxWithJs)
                    {
                        sb.Append("<input  class='Numeric' style='width: 100%;' onblur='IsEmpy(this);" + item.Script + ";' type='text' id='txtNoPostAmt_" + item.IncomeExpHeadId + "' name='txtNoPostAmt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                    }
                    else if (item.FieldType > (int)FieldType.TextBoxWithJs)
                    {
                        if (item.FieldType == (int)FieldType.ReadOnlyTextBoxWithJsResult)
                        {
                            sb.Append("<input class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txtNoPostAmt_" + item.IncomeExpHeadId + "' name='txtNoPostAmt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                        }
                        else
                        {
                            sb.Append("<input class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txtNoPostAmt_" + item.IncomeExpHeadId + "' name='txtNoPostAmt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                        }
                    }
                    sb.Append("</td>");


                    sb.Append("</tr>");
                }
                else
                {
                    sb.Append("<tr>");
                    if (item.ItemType == ItemType.Income)
                    {
                        sb.Append("<td style='padding-left:15px;'><span>" + item.ItemLabel + "</span></td>");
                    }
                    else if (item.ItemType == ItemType.AnnexureHead)
                    {
                        sb.Append("<td colspan='2' style='padding-left:15px;'><span>" + item.ItemLabel + "</span></td>");
                    }

                    if (item.ItemType == ItemType.Expense_Rent || item.ItemType == ItemType.Expense_Print || item.ItemType == ItemType.Expense_Other)
                    {
                        sb.Append("<td style='padding-left:5px;'><span>" + item.ItemCodeNo + "</span></td>");
                        sb.Append("<td style='padding-left:15px;'><span>" + item.ItemLabel + "</span></td>");
                    }

                    sb.Append("<td>");

                    if (item.FieldType == (int)FieldType.TextBoxWithoutJs)
                    {
                        sb.Append("<input class='Numeric'  onblur='IsEmpy(this);' style='width: 100%;' type='text' id='txt_" + item.IncomeExpHeadId + "' name='txt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                    }
                    else if (item.FieldType == (int)FieldType.TextBoxWithJs)
                    {
                        sb.Append("<input class='Numeric'  style='width: 100%;' onblur='IsEmpy(this);" + item.Script + ";' type='text' id='txt_" + item.IncomeExpHeadId + "' name='txt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                    }
                    else if (item.FieldType > (int)FieldType.TextBoxWithJs)
                    {
                        if (item.FieldType == (int)FieldType.ReadOnlyTextBoxWithJsResult)
                        {
                            sb.Append("<input class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txt_" + item.IncomeExpHeadId + "' name='txt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                        }
                        else
                        {
                            sb.Append("<input class='Numeric'  style='width: 100%;' readonly='true' type='text' id='txt_" + item.IncomeExpHeadId + "' name='txt_" + item.IncomeExpHeadId + "' value='" + item.Amount + "'>");
                        }
                    }

                    sb.Append("</td>");

                    sb.Append("</tr>");
                }
            }

            return sb;
        }

        private StringBuilder CreateFieldToPrint(MonthlyEconomyReport item, StringBuilder sb)
        {
            if (item.FieldType == (int)FieldType.NonValuedField)
            {
                sb.Append("<tr>");

                if (item.ItemType == ItemType.Income)
                {
                    sb.Append("<td colspan='4' style='border:1px solid #000;text-align:left;padding:3px;'><span>" + item.ItemLabel + "</span></td>");
                }
                else if (item.ItemType == ItemType.AnnexureEstablishment || item.ItemType == ItemType.AnnexureTotal || item.ItemType == ItemType.AnnexureHead)
                {
                    sb.Append("<td colspan='3' style='border:1px solid #000;text-align:left;padding:3px;'><span>" + item.ItemLabel + "</span></td>");
                }
                else if (item.ItemType == ItemType.Expense_Rent || item.ItemType == ItemType.Expense_Print)
                {
                    sb.Append("<td style='padding-left:5px;border:1px solid #000;text-align:center;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemCodeNo + "</span></td>");
                    sb.Append("<td colspan='4' style='border:1px solid #000;text-align:left;padding:3px;'><span>" + item.ItemLabel + "</span></td>");
                }
                //else
                //{
                //    sb.Append("<td colspan='2' style='border:1px solid #000;text-align:left;'><span>" + item.ItemLabel + "</span></td>");
                //}

                sb.Append("</tr>");
            }
            else if (item.FieldType > (int)FieldType.NonValuedField)
            {
                if (item.ItemType == ItemType.AnnexureEstablishment || item.ItemType == ItemType.AnnexureTotal)
                {
                    sb.Append("<tr>");
                    sb.Append("<td style='padding-left:15px;border:1px solid #000;text-align:left;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemLabel + "</span></td>");

                    sb.Append("<td style='border:1px solid #000;text-align:right;padding:3px;'>");
                    sb.Append("<label>" + item.NoOfPosts + "</label>");
                    sb.Append("</td>");

                    sb.Append("<td style='border:1px solid #000;text-align:right;padding:3px;'>");
                    sb.Append("<label>" + item.Amount + "</label>");
                    sb.Append("</td>");

                    sb.Append("</tr>");
                }
                else
                {
                    sb.Append("<tr>");
                    if (item.ItemType == ItemType.Income)
                    {
                        sb.Append("<td style='padding-left:15px;border:1px solid #000;text-align:left;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemLabel + "</span></td>");
                    }
                    else if (item.ItemType == ItemType.AnnexureHead)
                    {
                        sb.Append("<td colspan='2' style='padding-left:15px;border:1px solid #000;text-align:left;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemLabel + "</span></td>");
                    }

                    if (item.ItemType == ItemType.Expense_Rent || item.ItemType == ItemType.Expense_Print || item.ItemType == ItemType.Expense_Other || item.ItemType == ItemType.Expense_Total)
                    {
                        sb.Append("<td style='padding-left:5px;border:1px solid #000;text-align:center;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemCodeNo + "</span></td>");
                        sb.Append("<td style='padding-left:15px;border:1px solid #000;text-align:left;padding-top:3px;padding-bottom:3px;'><span>" + item.ItemLabel + "</span></td>");
                    }

                    sb.Append("<td style='border:1px solid #000;text-align:right;padding:3px;'>");
                    sb.Append("<label>" + item.Amount + "</label>");
                    sb.Append("</td>");

                    if (!(item.ItemType == ItemType.AnnexureHead || item.ItemType == ItemType.AnnexureEstablishment))
                    {
                        sb.Append("<td style='border:1px solid #000;text-align:right;padding:3px;'>");
                        sb.Append("<label>" + item.CumAmountSinceApril + "</label>");
                        sb.Append("</td>");

                        sb.Append("<td style='border:1px solid #000;text-align:right;padding:3px;'>");
                        sb.Append("<label>" + item.ProrataCumAmount + "</label>");
                        sb.Append("</td>");
                    }

                    sb.Append("</tr>");
                }
            }


            return sb;
        }

        public ActionResult CFSEcoReport()
        {
            ViewBag.BranchType = Session["BranchType"];
            return PartialView();
        }

        [HttpGet]
        public ActionResult PopulateDataForMonthlyReport(string monthNo, string yearNo)
        {

            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            int dataExistStatus;
            List<MonthlyEconomyReport> LstMonthlyEconomyReport = ObjRR.GetMonthlyEconomyReportData(Convert.ToInt32(monthNo), Convert.ToInt32(yearNo), out dataExistStatus).Where(x => x.FieldType > (int)FieldType.NotRequiredField).ToList();

            List<string> Tabs = new List<string>();

            StringBuilder sb_Income = new StringBuilder();
            StringBuilder sb_ExpensesHead = new StringBuilder();
            StringBuilder sb_Rent = new StringBuilder();
            StringBuilder sb_Print = new StringBuilder();

            ///////////////////////////////// Income Start /////////////////////////////////////////////////////////////////

            foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
            {
                sb_Income = CreateFieldToBrowse(item, sb_Income);
                foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                {
                    sb_Income = CreateFieldToBrowse(subItem, sb_Income);
                    foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_Income = CreateFieldToBrowse(subSubItem, sb_Income);
                        foreach (var subSubSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subSubItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                        {
                            sb_Income = CreateFieldToBrowse(subSubSubItem, sb_Income);
                            foreach (var subSubSubSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subSubSubItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                            {
                                sb_Income = CreateFieldToBrowse(subSubSubSubItem, sb_Income);
                            }
                        }
                    }
                }

            }

            ///////////////////////////////// Income End /////////////////////////////////////////////////////////////////

            ///////////////////////////////// Expense Head Start /////////////////////////////////////////////////////////////////

            foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && x.ItemType == ItemType.AnnexureHead).OrderBy(x => x.ItemSortOrder).ToList())
            {
                sb_ExpensesHead = CreateFieldToBrowse(item, sb_ExpensesHead);
                foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.AnnexureHead).OrderBy(x => x.ItemSortOrder).ToList())
                {
                    sb_ExpensesHead = CreateFieldToBrowse(subItem, sb_ExpensesHead);
                    foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.AnnexureHead).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_ExpensesHead = CreateFieldToBrowse(subSubItem, sb_ExpensesHead);
                    }
                }

            }

            ///////////////////////////////// Expense Head End /////////////////////////////////////////////////////////////////

            ///////////////////////////////// Expense Establish and Total Start /////////////////////////////////////////////////////////////////

            foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal)).OrderBy(x => x.ItemSortOrder).ToList())
            {
                sb_ExpensesHead = CreateFieldToBrowse(item, sb_ExpensesHead);
                foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal)).OrderBy(x => x.ItemSortOrder).ToList())
                {
                    sb_ExpensesHead = CreateFieldToBrowse(subItem, sb_ExpensesHead);
                    foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal)).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_ExpensesHead = CreateFieldToBrowse(subSubItem, sb_ExpensesHead);
                    }
                }

            }

            ///////////////////////////////// Expense Establish and Total End /////////////////////////////////////////////////////////////////

            ///////////////////////////////// Expense Rent Start /////////////////////////////////////////////////////////////////

            foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print)).OrderBy(x => x.ItemSortOrder).ToList())
            {
                sb_Rent = CreateFieldToBrowse(item, sb_Rent);
                foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print)).OrderBy(x => x.ItemSortOrder).ToList())
                {
                    sb_Rent = CreateFieldToBrowse(subItem, sb_Rent);
                    foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print)).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_Rent = CreateFieldToBrowse(subSubItem, sb_Rent);
                    }
                }

            }

            ///////////////////////////////// Expense Rent End /////////////////////////////////////////////////////////////////

            ///////////////////////////////// Expense Print Start /////////////////////////////////////////////////////////////////

            //foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && x.ItemType == ItemType.Expense_Print).ToList())
            //{
            //    sb_Print = CreateFieldToBrowse(item, sb_Print);
            //    foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Expense_Print).ToList())
            //    {
            //        sb_Print = CreateFieldToBrowse(subItem, sb_Print);
            //        foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Expense_Print).ToList())
            //        {
            //            sb_Print = CreateFieldToBrowse(subSubItem, sb_Print);
            //        }
            //    }

            //}

            /////////////////////////////////// Expense Print End /////////////////////////////////////////////////////////////////


            Tabs.Add(sb_Income.ToString());
            Tabs.Add(sb_ExpensesHead.ToString());
            Tabs.Add(sb_Rent.ToString());
            Tabs.Add(sb_Print.ToString());

            var ObjResult = new { Status = dataExistStatus, Data = Tabs };
            return Json(ObjResult, JsonRequestBehavior.AllowGet);

        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SaveMonthlyReportDetails(FormCollection fc)
        {
            Login ObjLogin = (Login)Session["LoginUser"];

            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<MonthlyEconomyReport> objMonthlyEconomyReportList = new List<MonthlyEconomyReport>();

            foreach (var texkey in fc.AllKeys.Where(x => x.StartsWith("txt_")).ToList())
            {
                int incomeExpHeadId = Convert.ToInt32(texkey.Split('_')[1]);
                MonthlyEconomyReport objMonthlyEconomyReport = new MonthlyEconomyReport();
                objMonthlyEconomyReport.MonthNo = Convert.ToInt32(fc["MonthNo"]);
                objMonthlyEconomyReport.YearNo = Convert.ToInt32(fc["YearNo"]);
                objMonthlyEconomyReport.IncomeExpHeadId = incomeExpHeadId;

                if (String.IsNullOrWhiteSpace(fc[texkey]))
                {
                    objMonthlyEconomyReport.Amount = 0;
                }
                else
                {
                    objMonthlyEconomyReport.Amount = Convert.ToDecimal(fc[texkey]);
                }

                objMonthlyEconomyReport.CreatedBy = ObjLogin.Uid;

                objMonthlyEconomyReportList.Add(objMonthlyEconomyReport);
            }

            foreach (var texkey in fc.AllKeys.Where(x => x.StartsWith("txtNoPostAmt_")).ToList())
            {
                int incomeExpHeadId = Convert.ToInt32(texkey.Split('_')[1]);
                string noOfPosttxt = "txtNoPost_" + incomeExpHeadId;
                MonthlyEconomyReport objMonthlyEconomyReport = new MonthlyEconomyReport();
                objMonthlyEconomyReport.IncomeExpHeadId = incomeExpHeadId;

                if (String.IsNullOrWhiteSpace(fc[texkey]))
                {
                    objMonthlyEconomyReport.Amount = 0;
                }
                else
                {
                    objMonthlyEconomyReport.Amount = Convert.ToDecimal(fc[texkey]);
                }

                if (String.IsNullOrWhiteSpace(fc[noOfPosttxt]))
                {
                    objMonthlyEconomyReport.NoOfPosts = 0;
                }
                else
                {
                    objMonthlyEconomyReport.NoOfPosts = Convert.ToInt32(fc[noOfPosttxt]);
                }

                objMonthlyEconomyReportList.Add(objMonthlyEconomyReport);
            }

            string XML = Utility.CreateXML(objMonthlyEconomyReportList);
            ObjRR.SaveMonthlyReportDetails(Convert.ToInt32(fc["MonthNo"]), Convert.ToInt32(fc["YearNo"]), XML);
            return Json(ObjRR.DBResponse);
        }

        [HttpGet]
        public ActionResult PrintDataForMonthlyReport(string monthNo, string yearNo)
        {
            try
            {
                int dataExistStatus;
                var Pages = new string[3];
                string FileName = "MonthlyReport.pdf";

                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                List<MonthlyEconomyReport> LstMonthlyEconomyReport = ObjRR.GetMonthlyEconomyReportDataToPrint(Convert.ToInt32(monthNo), Convert.ToInt32(yearNo), out dataExistStatus).Where(x => x.FieldType > (int)FieldType.NotRequiredField).ToList();

                if (dataExistStatus == 1)
                {
                    List<string> Tabs = new List<string>();

                    StringBuilder sb_Income = new StringBuilder();
                    StringBuilder sb_ExpensesHead = new StringBuilder();
                    StringBuilder sb_Rent = new StringBuilder();


                    ///////////////////////////////// Income Start /////////////////////////////////////////////////////////////////

                    sb_Income.Append("<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'>");
                    sb_Income.Append("<thead>");
                    sb_Income.Append("<tr>");
                    sb_Income.Append("<th style='padding:5px;text-align:center;'>");
                    sb_Income.Append("<span style='font-size:10pt;text-align:center;'>CENTRAL WAREHOUSING CORPORATION</span><br/>(A GOVT. OF INDIA UNDERTAKING)<br/><br/>");
                    sb_Income.Append("</th>");
                    sb_Income.Append("</tr>");
                    sb_Income.Append("</thead>");
                    sb_Income.Append("</table>");
                    sb_Income.Append("<br/>");

                    sb_Income.Append("<table style='repeat-header: yes;width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'>");
                    sb_Income.Append("<thead>");
                    sb_Income.Append("<tr>");
                    sb_Income.Append("<th rowspan='2' style='text-align:center;border:1px solid #000;padding:5px;'>Head of Income</th>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Amount</th>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Cumulative since 1st April BE/RE</th>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Prorata Cumulative BE/RE</th>");
                    sb_Income.Append("</tr>");

                    sb_Income.Append("<tr>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Income.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Income.Append("</tr>");
                    sb_Income.Append("</thead>");
                    sb_Income.Append("<tbody>");
                    foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_Income = CreateFieldToPrint(item, sb_Income);
                        foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                        {
                            sb_Income = CreateFieldToPrint(subItem, sb_Income);
                            foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                            {
                                sb_Income = CreateFieldToPrint(subSubItem, sb_Income);
                                foreach (var subSubSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subSubItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                                {
                                    sb_Income = CreateFieldToPrint(subSubSubItem, sb_Income);
                                    foreach (var subSubSubSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subSubSubItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && x.ItemType == ItemType.Income).OrderBy(x => x.ItemSortOrder).ToList())
                                    {
                                        sb_Income = CreateFieldToPrint(subSubSubSubItem, sb_Income);
                                    }
                                }
                            }
                        }

                    }

                    sb_Income.Append("</tbody>");
                    sb_Income.Append("</table>");

                    ///////////////////////////////// Income End /////////////////////////////////////////////////////////////////

                    ///////////////////////////////// Expense Head Start /////////////////////////////////////////////////////////////////

                    sb_ExpensesHead.Append("<table style='repeat-header: yes;width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'>");
                    sb_ExpensesHead.Append("<thead>");
                    sb_ExpensesHead.Append("<tr>");
                    sb_ExpensesHead.Append("<th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;'>Head of Expense</th>");
                    sb_ExpensesHead.Append("<th rowspan='2' style='border:1px solid #000;text-align:center;width:10%;padding:5px;'>No Of Post</th>");
                    sb_ExpensesHead.Append("<th style='border:1px solid #000;text-align:center;width:15%;padding:5px;'>Amount</th>");
                    sb_ExpensesHead.Append("</tr>");

                    sb_ExpensesHead.Append("<tr>");
                    sb_ExpensesHead.Append("<th style='border:1px solid #000;text-align:center;padding:5px;'>Rs.</th>");
                    sb_ExpensesHead.Append("</tr>");

                    sb_ExpensesHead.Append("</thead>");
                    sb_ExpensesHead.Append("<tbody>");

                    foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal || x.ItemType == ItemType.AnnexureHead)).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_ExpensesHead = CreateFieldToPrint(item, sb_ExpensesHead);
                        foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal || x.ItemType == ItemType.AnnexureHead)).OrderBy(x => x.ItemSortOrder).ToList())
                        {
                            sb_ExpensesHead = CreateFieldToPrint(subItem, sb_ExpensesHead);
                            foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.AnnexureEstablishment || x.ItemType == ItemType.AnnexureTotal || x.ItemType == ItemType.AnnexureHead)).OrderBy(x => x.ItemSortOrder).ToList())
                            {
                                sb_ExpensesHead = CreateFieldToPrint(subSubItem, sb_ExpensesHead);
                            }
                        }

                    }

                    sb_ExpensesHead.Append("</tbody>");
                    sb_ExpensesHead.Append("</table>");

                    ///////////////////////////////// Expense Head End /////////////////////////////////////////////////////////////////

                    ///////////////////////////////// Expense Rent Start /////////////////////////////////////////////////////////////////

                    sb_Rent.Append("<table style='repeat-header: yes;width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'>");
                    sb_Rent.Append("<thead>");
                    sb_Rent.Append("<tr>");
                    sb_Rent.Append("<th rowspan='2' style='text-align:center;border:1px solid #000;width:7%;'>Code No.</th>");
                    sb_Rent.Append("<th rowspan='2' style='text-align:center;border:1px solid #000;'>Head of Expense</th>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Amount</th>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Cumulative since 1st April BE/RE</th>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;width:15%;padding:5px;'>Prorata Cumulative BE/RE</th>");
                    sb_Rent.Append("</tr>");

                    sb_Rent.Append("<tr>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Rent.Append("<th style='text-align:center;border:1px solid #000;padding:5px;'>Rs.</th>");
                    sb_Rent.Append("</tr>");

                    sb_Rent.Append("</thead>");
                    sb_Rent.Append("<tbody>");

                    foreach (var item in LstMonthlyEconomyReport.Where(x => x.IncomeExpHeadId == x.ParentId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print || x.ItemType == ItemType.Expense_Other || x.ItemType == ItemType.Expense_Total)).OrderBy(x => x.ItemSortOrder).ToList())
                    {
                        sb_Rent = CreateFieldToPrint(item, sb_Rent);
                        foreach (var subItem in LstMonthlyEconomyReport.Where(x => x.ParentId == item.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print || x.ItemType == ItemType.Expense_Other || x.ItemType == ItemType.Expense_Total)).OrderBy(x => x.ItemSortOrder).ToList())
                        {
                            sb_Rent = CreateFieldToPrint(subItem, sb_Rent);
                            foreach (var subSubItem in LstMonthlyEconomyReport.Where(x => x.ParentId == subItem.IncomeExpHeadId && x.IncomeExpHeadId != item.IncomeExpHeadId && (x.ItemType == ItemType.Expense_Rent || x.ItemType == ItemType.Expense_Print || x.ItemType == ItemType.Expense_Other || x.ItemType == ItemType.Expense_Total)).OrderBy(x => x.ItemSortOrder).ToList())
                            {
                                sb_Rent = CreateFieldToPrint(subSubItem, sb_Rent);
                            }
                        }

                    }

                    sb_Rent.Append("</tbody>");
                    sb_Rent.Append("</table>");

                    Pages[0] = sb_Income.ToString();
                    Pages[1] = sb_ExpensesHead.ToString();
                    Pages[2] = sb_Rent.ToString();

                    string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/MonthlyReport/";
                    if (!Directory.Exists(LocalDirectory))
                        Directory.CreateDirectory(LocalDirectory);
                    using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                    {
                        ObjPdf.HeadOffice = this.HeadOffice;
                        ObjPdf.HOAddress = this.HOAddress;
                        ObjPdf.ZonalOffice = this.ZonalOffice;
                        ObjPdf.ZOAddress = this.ZOAddress;
                        ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                    }
                    //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                    //{
                    //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);
                    //}
                    var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/MonthlyReport/" + FileName };
                    return Json(ObjResult, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var ObjResult = new { Status = 0, Message = "No Data Available for this month. Please generate to print." };
                    return Json(ObjResult, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }
        }

        #endregion

        #region Monthly Performance Report

        public ActionResult MonthlyPerformanceReport()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetMonthlyPerformanceReportList(MonthlyPerformaceReport ObjMonthlyPerformaceReport)
        {
            try
            {
                var Pages = new string[1];
                string FileName = "MonthlyPerformanceRepor.pdf";
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                StringBuilder sb = new StringBuilder();
                List<MonthlyPerformaceReport> LstMonthlyPerformaceReport = ObjRR.GetMonthlyPerformanceReportDataToPrint(ObjMonthlyPerformaceReport.MonthNo, ObjMonthlyPerformaceReport.YearNo);

                if (LstMonthlyPerformaceReport != null && LstMonthlyPerformaceReport.Count > 0)
                {
                    sb.Append("<table style='width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'>");
                    sb.Append("<thead>");
                    sb.Append("<tr>");
                    sb.Append("<th style='text-align:center;border:1px solid #000;text-align:center;padding:5px;'>Particulars</th>");
                    sb.Append("<th style='text-align:center;border:1px solid #000;text-align:center;width:15%;padding:5px;'>Month Under Report</th>");
                    sb.Append("<th style='text-align:center;border:1px solid #000;text-align:center;width:15%;padding:5px;'>Previous Month</th>");
                    sb.Append("<th style='text-align:center;border:1px solid #000;text-align:center;width:15%;padding:5px;'>Corresponding Month of Previous Year</th>");
                    sb.Append("</tr>");
                    sb.Append("</thead>");
                    sb.Append("<tbody>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>1. Import Container Received</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) From ICD</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 1).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 1).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 1).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) From Gateway ports by Road</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 2).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 2).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 2).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>2.Import Container Handled (Including reefers)</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Containers Destuffed</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 3).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 3).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 3).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) Containers despatched factor for destuffing</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 4).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 4).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 4).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>c) ");
                    sb.Append("Total Containers Handled 2(a+b) </span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 5).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 5).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 5).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>3.Export Container Handled (Including reefers)</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Containers Stuffing at CFS/ICD</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 6).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 6).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 6).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) Containers moved/Shifted to rail head/ICD</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 7).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 7).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 7).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>c) Containers moved to Gateway Ports by Road</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 8).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 8).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 8).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>d)  Containers Shifted at factories and moved</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 9).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 9).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 9).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>e) Total Export Containers Handled 3(b+c+d)  </span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 10).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 10).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 10).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>4.Export Container Handled (Including reefers)</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<span style='padding-left:10px;'>a) Empty Containers received at ICD/CFS</span>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span style='padding-left:20px;'>a) From other ICD</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 11).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 11).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 11).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span style='padding-left:20px;'>b) From Gate way ports by Road</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 12).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 12).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 12).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<span style='padding-left:10px;'>b) Empty Containers dispatched/moved out from ICD/CFS</span>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span style='padding-left:20px;'>a) To other ICD/Yards</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 13).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 13).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 13).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span style='padding-left:20px;'>b) To Gate way ports by road</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 14).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 14).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 14).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span style='padding-left:20px;'>c) Total Export containers handled 4(a+b) </span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 15).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 15).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 15).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>5.Total Containers Handles during the month</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Import</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 16).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 16).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 16).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) Export</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 17).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 17).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 17).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>c) Empty</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 18).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 18).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 18).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>Total (a+b+c) </span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 19).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 19).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 19).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>6. Exported</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Quantity(MT)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 20).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 20).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 20).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) FOB Value (Rs.In Lacs)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 21).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 21).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 21).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>7.Cargo Exported</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Quantity(MT)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 22).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 22).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 22).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) FOB Value (Rs.In Lacs)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 23).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 23).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 23).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>8.Income from Refer Containers</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Export(Rs.)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 24).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 24).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 24).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) Import(Rs.)</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 25).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 25).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 25).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>9.Progressive total of containers handled</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Import i) Dry ii) Refer</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 26).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 26).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 26).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b)  Export i) Dry ii) Refer</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 27).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 27).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 27).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>c)  Empty</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 28).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 28).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 28).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>Total (a+b+c) </span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 29).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 29).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 29).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='4'style='text-align:center;border:1px solid #000;text-align:left;padding:3px;'>");
                    sb.Append("<strong>10.Financial Performance</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>a) Income</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 30).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 30).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 30).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>b) Expenditure</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 31).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 31).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 31).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:left;padding:3px;padding-left:15px;'>");
                    sb.Append("<span>c) Profit and Loss</span>");
                    sb.Append("</td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 32).Select(x => x.MonthUnderReport).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 32).Select(x => x.PrevMonth).FirstOrDefault() + "</span></td>");
                    sb.Append("<td style='text-align:center;border:1px solid #000;text-align:right;padding:3px;'><span>" + LstMonthlyPerformaceReport.Where(x => x.DescriptionId == 32).Select(x => x.CorresMonthPrevYear).FirstOrDefault() + "</span></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append("<td colspan='2'style='padding:3px;vertical-align:top;'>");
                    sb.Append("<span>To:</span>");
                    sb.Append("<table style='width:35%;border:1px solid #000;'><tbody><tr><td><br/><br/><br/></td></tr></tbody></table>");
                    sb.Append("</td>");
                    sb.Append("<td colspan='2'style='padding:3px;vertical-align:bottom;text-align:center;'>");
                    sb.Append("<strong>Signature of Manager CFS/ICD</strong>");
                    sb.Append("</td>");
                    sb.Append("</tr>");
                    sb.Append("</tbody>");
                    sb.Append("</table>");
                }

                Pages[0] = sb.ToString();

                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/MonthlyPerformanceRepor/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                //using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);
                //}
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/MonthlyPerformanceRepor/" + FileName };
                return Json(ObjResult, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }
        }

        #endregion

        #region Bulk Debit Note
        [HttpGet]
        public ActionResult GetBulkDeditNote()
        {
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult GetBulkDebitNoteReport(FormCollection fc)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            List<string> lststring = new List<string>();
            if (objRR.DBResponse.Data != null)
            {
                lststring = (List<string>)objRR.DBResponse.Data;
                List<string> pdfPages = new List<string>();
                /*PDF Gneration*/
                string Path = Server.MapPath("~/Docs/") + Session.SessionID + "/";
                string FileName = "BulkDRNote" + "DR" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                lststring.ForEach(item =>
                {
                    if (!string.IsNullOrEmpty(item) && item != "")
                    {
                        item = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(item));
                        pdfPages.Add(item.Replace("|_br_|", "<br/>"));
                    }
                });
                //using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    rh.GeneratePDF(Path + FileName, pdfPages.ToArray());
                //}

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(Path + FileName, pdfPages.ToArray());

                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/" + FileName });
            }
            else
                return Json(new { Status = -1, Message = "No Data" });
        }
        #endregion


        #region register of outward supply

        [HttpGet]
        public ActionResult RegisterOfOutwardSupply()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public FileResult RegisterOfOutwardSupply(FormCollection fc)
        {
            try
            {
                var date1 = Convert.ToDateTime(fc["PeriodFrom"].ToString());
                var date2 = Convert.ToDateTime(fc["PeriodTo"].ToString());
                var ObjRR = new ReportRepository();
                ObjRR.GetRegisterofOutwardSupply(date1, date2);
                if (!string.IsNullOrEmpty(ObjRR.DBResponse.Data.ToString()))
                    return File(ObjRR.DBResponse.Data.ToString(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "RegisterofOutwardSupply.xlsx");
                else
                {
                    string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                    var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xlsx");
                    using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                    {
                        exl.AddCell("A1", "No data found");
                        exl.Save();
                        return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "RegisterofOutwardSupply.xlsx");
                    }
                }
            }
            catch
            {
                string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xlsx");
                using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                {
                    exl.AddCell("A1", "No data found");
                    exl.Save();
                    return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "RegisterofOutwardSupply.xlsx");
                }
            }
            // return null;
        }

        #endregion

        #region CartingOrderRegister

        [HttpGet]
        public ActionResult CartingOrderRegisterReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetCartingOrderRegister(CartingOrderRegister ObjCartingOrderRegister)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<CartingOrderRegister> LstCartingOrderRegister = new List<CartingOrderRegister>();
            // Login objLogin = (Login)Session["LoginUser"];


            ObjRR.CartingOrderRegister(ObjCartingOrderRegister);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstCartingOrderRegister = (List<CartingOrderRegister>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateCartingOrderRegisterPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "CartingOrderRegister.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CartingOrderRegister/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CartingOrderRegister/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion


        #region CartingOrderRegister

        [HttpGet]
        public ActionResult StuffingRegisterReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Kdl_ReportRepository ObjReport = new Kdl_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}
            ViewBag.BranchType = Session["BranchType"];
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetStuffingRegister(StuffingRegister ObjStuffingRegister)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<StuffingRegister> LstStuffingRegister = new List<StuffingRegister>();
            // Login objLogin = (Login)Session["LoginUser"];


            ObjRR.StuffingRegister(ObjStuffingRegister);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstStuffingRegister = (List<StuffingRegister>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateStuffingRegisterPDF(FormCollection fc)
        {
            try
            {

                //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
                // string FtpIdPath = "";
                //string LocalIdPath = "";
                var Pages = new string[1];
                var FileName = "StuffingRegister.pdf";
                Pages[0] = fc["Page"].ToString();
                // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
                //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
                //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
                //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
                // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/StuffingRegister/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/StuffingRegister/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region-- WEEKLY REPORT --

        [HttpGet]
        public ActionResult WeeklyVCReport()
        {
            ViewBag.BranchType = Session["BranchType"];  
            return PartialView();
        }

        [HttpGet]
        public JsonResult GetVCDetails(string date1, string date2)
        {
            try
            {
                var dt1 = DateTime.ParseExact(date1, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                var dt2 = DateTime.ParseExact(date2, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                if (dt2.DayOfWeek.ToString().ToLower() != System.Configuration.ConfigurationManager.AppSettings["VCReportDay"].ToString().ToLower())
                {
                    return Json(new { Status = 2, Message = "Report Only Show on " + System.Configuration.ConfigurationManager.AppSettings["VCReportDay"].ToString() }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var doa = Enumerable.Range(0, 1 + dt2.Subtract(dt1).Days).Select(offset => dt1.AddDays(offset)).ToArray();
                    IList<string> formatted = new List<string>();
                    doa.ToList().ForEach(item =>
                    {
                        formatted.Add(item.ToString("yyyyMMdd"));
                    });
                    var XMLText = Utility.CreateXML(formatted);
                    var reportRepo = new ReportRepository();
                    reportRepo.VCCapacityDetails(XMLText);

                    return Json(new { Status = 1, Message = "Data Detected", Data = reportRepo.DBResponse.Data }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                return Json(new { Status = -1, Message = "Internal Error Occurs !!" }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult WeeklyVCReport(FormCollection fc)
        {
            var date = Convert.ToDateTime(fc["VCTdate"].ToString());
            var cfscap = Convert.ToDecimal(fc["TWcfscap"].ToString());
            var bndcap = Convert.ToDecimal(fc["TWbndcap"].ToString());
            var total1 = Convert.ToDecimal(fc["TWtotalcap"].ToString());
            var cfsutl = Convert.ToDecimal(fc["TWcfsutl"].ToString());
            var bndutl = Convert.ToDecimal(fc["TWbndutl"].ToString());
            var total2 = Convert.ToDecimal(fc["TWtotalutl"].ToString());
            var reportRepo = new ReportRepository();
            reportRepo.AddVCDetails(date, cfscap, bndcap, cfsutl, bndutl);

            return Json(new { Status = 1, Message = "VC Report Saved Succesfully", Data = reportRepo.DBResponse.Data }, JsonRequestBehavior.DenyGet);
        }

        [HttpPost, ValidateInput(false)]
        public JsonResult GeneratePDF(FormCollection fc)
        {
            try
            {
                var pages = new string[2];
                var type = fc["type"].ToString();
                var id = fc["id"].ToString();
                pages[0] = fc["page"].ToString();
                if (id == "")
                {
                    //string ad = "AB1CE12354F";
                    //Random rnd = new Random();
                    //id = new string(Enumerable.Repeat(ad, ad.Length).Select(s => s[rnd.Next(ad.Length)]).ToArray());
                    id = ((Login)(Session["LoginUser"])).Uid.ToString() + "" + DateTime.Now.ToString().Replace('/', '_').Replace(' ', '_').Replace(':', '_');
                }
                id = id.Replace('/', '_');
                var fileName = id + ".pdf";
                //  var fileName = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
                if (!Directory.Exists(PdfDirectory))
                    Directory.CreateDirectory(PdfDirectory);
                //using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    rh.GeneratePDF(PdfDirectory + fileName, pages);
                //}

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(PdfDirectory + fileName, pages);

                }
                return Json(new { Status = 1, Message = "/Docs/" + type + "/" + fileName }, JsonRequestBehavior.DenyGet);// Data = fileName 
            }
            catch (Exception ex)
            {
                return Json(new { Status = "1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }

        #endregion


        #region Stock Position Report
        [HttpGet]
        public ActionResult StockPositionReport()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetStockPositionReport(StockPositionReportModel ObjStockPosition)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<StockPositionReportModel> LstStockPosition = new List<StockPositionReportModel>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.StockPositionReport(ObjStockPosition);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstStockPosition = (List<StockPositionReportModel>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateStockPositionReportPDF(FormCollection fc)
        {
            try
            {

                var Pages = new string[1];
                var FileName = "StockPositionReport.pdf";
                Pages[0] = fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/ChequeSummary/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ChequeSummary/" + FileName };
                return Json(ObjResult);
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Inventory Report Of Cargo & Container
        [HttpGet]
        public ActionResult InventoryReportCargoContainer()
        {
            ViewBag.BranchType = Session["BranchType"];
            return PartialView();
           
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetInventoryReportCargoContainer(InventoryReportModel ObjInventoryReportModel)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            InventoryReportModel ObjLstInventoryReportModel = new InventoryReportModel();
            //Login objLogin = (Login)Session["LoginUser"]
            
            ObjRR.InventoryReportCargoContainer(ObjInventoryReportModel);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                ObjLstInventoryReportModel = (InventoryReportModel)ObjRR.DBResponse.Data;

                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateInventoryReportCargoContainerPDF(FormCollection fc)
        {
            try
            {


                var Pages = new string[1];
                var FileName = "InventoryReportCargoContainer.pdf";
                Pages[0] = fc["Page"].ToString();

                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/InventoryReportCargoContainer/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/InventoryReportCargoContainer/" + FileName };
                return Json(ObjResult);

            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Daily valuation Report of Import Cargo
        [HttpGet]
        public ActionResult DailyValuationReport()
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.GetAllEnteredContainer();
            if (objRR.DBResponse.Data != null)
                ViewBag.ContainerList = objRR.DBResponse.Data;
            else ViewBag.ContainerList = null;
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult GetDailyValuationReport(string ContainerNo, string BOL, string BOE)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.DailyvaluationReport(ContainerNo, BOL, BOE);
            return Json(objRR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Container Status

        [HttpGet]
        public ActionResult LoadContainerStatus()
        {
            bool ShippingLine;
            ContainerStatus ObjContainer = new ContainerStatus();
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ExportRepository ObjER = new ExportRepository();
            ShippingLine = ((Login)Session["LoginUser"]).ShippingLine;
            if (ShippingLine == true)
            {
                ObjContainer.ShippingLineName = ((Login)Session["LoginUser"]).Name;
                ObjContainer.ShippingLineId = ((Login)Session["LoginUser"]).EximTraderId;
                List<ShippingLineList> LstShippingLine = new List<ShippingLineList>();
                LstShippingLine.Add(new ShippingLineList
                {
                    ShippingLineName = ((Login)Session["LoginUser"]).Name,
                    ShippingLineId = ((Login)Session["LoginUser"]).EximTraderId
                });
                ViewBag.ShippingLineList = new SelectList(LstShippingLine, "ShippingLineId", "ShippingLineName");
                ObjRR.GetContainerNoForContStatus(ObjContainer.ShippingLineId);
                if (ObjRR.DBResponse.Data != null)
                    ViewBag.ContainerList = new SelectList((List<ContainerList>)ObjRR.DBResponse.Data, "ContainerNo", "ContainerNo");
                else
                    ViewBag.ContainerList = null;
            }
            else
            {
                ViewBag.ContainerList = null;
                ObjER.GetShippingLine();
                if (ObjER.DBResponse.Data != null)
                    ViewBag.ShippingLineList = new SelectList((List<Areas.Export.Models.ShippingLine>)ObjER.DBResponse.Data, "ShippingLineId", "ShippingLineName");
                else
                    ViewBag.ShippingLineList = null;
            }

            return PartialView(ObjContainer);
        }

        [HttpGet]
        public JsonResult GetContainerNoList(int ShippingLineId)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetContainerNoForContStatus(ShippingLineId);
            return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetContainerStatusDetail(int ShippingLineId, string ContainerNo)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetContainerDetForContStatus(ShippingLineId, ContainerNo);
            return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        #endregion


        #region Stuffing Request Report

        [HttpGet]
        public ActionResult LoadStuffingReqReport()
        {
            return PartialView("StuffingReqReport");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetStuffingReqDetails(StuffingRequest ObjStuffingRequest)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                ObjRR.GetStuffingReqReport(ObjStuffingRequest.FromDate, ObjStuffingRequest.ToDate);
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePDFForStuffingReq(FormCollection Fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "StuffingRequestReport.pdf";
                Pages[0] = Fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/StuffingRequest/";
                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                //}

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/StuffingRequest/" + FileName });
            }
            catch
            {
                return Json(new { Status = 0, Message = "Error" });
            }
        }
        #endregion


        #region Job Order Sheet Report
        [HttpGet]
        public ActionResult JobOrderSheetReport()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetJobOrderSheetReport(JobOrderSheet ObjJobOrderSheet)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<JobOrderSheet> LstJobOrderSheet = new List<JobOrderSheet>();
            // Login objLogin = (Login)Session["LoginUser"];


            ObjRR.JobOrderSheet(ObjJobOrderSheet);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstJobOrderSheet = (List<JobOrderSheet>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateJobOrderSheetPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "JobOrderSheet.pdf";
                Pages[0] = fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/JobOrderSheet/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/JobOrderSheet/" + FileName };
                return Json(ObjResult);
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Carting Work Order Report
        [HttpGet]
        public ActionResult CartingWorkOrderReport()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetCartingWorkOrderReport(CartingWorkOrder ObjCartingWorkOrder)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<CartingWorkOrder> LstCartingWorkOrder = new List<CartingWorkOrder>();
            ObjRR.CartingWorkOrder(ObjCartingWorkOrder);
            if (ObjRR.DBResponse.Data != null)
            {
                LstCartingWorkOrder = (List<CartingWorkOrder>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateCartingWorkOrderPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "CartingWorkOrder.pdf";
                Pages[0] = fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CartingWorkOrder/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CartingWorkOrder/" + FileName };
                return Json(ObjResult);
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Delivery Order Register
        [HttpGet]
        public ActionResult LoadDeliveryOrderReport()
        {
            return PartialView("DeliveryOrderReg");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetDeliveryOrderDetails(DeliveryOrderReg ObjStuffingRequest)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                ObjRR.DeliveryOrderRegisterReport(ObjStuffingRequest.FromDate, ObjStuffingRequest.ToDate);
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePDFForDeliveryOrder(FormCollection Fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "DeliveryOrderReport.pdf";
                Pages[0] = Fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/DeliveryOrder/";
                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
                {
                    Rh.HeadOffice = this.HeadOffice;
                    Rh.HOAddress = this.HOAddress;
                    Rh.ZonalOffice = this.ZonalOffice;
                    Rh.ZOAddress = this.ZOAddress;
                    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/DeliveryOrder/" + FileName });
            }
            catch
            {
                return Json(new { Status = 0, Message = "Error" });
            }
        }

        #endregion


        #region BTT
        [HttpGet]
        public ActionResult GetBTTReport()
        {
            return PartialView();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetBTTReportDetails(BTTDate objBTT)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            List<BTT> lstBTT = new List<BTT>();
            objRR.GetBTTDetails(objBTT.FromDate, objBTT.ToDate);
            if (objRR.DBResponse.Data != null)
            {
                lstBTT = (List<BTT>)objRR.DBResponse.Data;
                string html = "<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='9' style='font-weight:600;font-size:10pt;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:5px;'>Excess Cargo (Back to Town) Daily Report <br/>From <span>" + objBTT.FromDate + "</span> To <span>" + objBTT.ToDate + "</span></th></tr><tr><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Ship Bill No/ Check List/ Commercial Invoice</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:10%;'>Date</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Commodity</th><th colspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:10%;'>Received</th><th colspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Exported</th><th colspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Back To Town</th></tr><tr><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>No of Packages</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>WT</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>No of Pkg</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>WT</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>No of Pkg</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:8%;'>WT</th></tr></thead><tbody>";
                lstBTT.ForEach(item =>
                {
                    html += "<tr><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ShippingBillNo + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.BTTCargoEntryDate + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CommName + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.NoOfUnits + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.GrossWeight + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ENoOfUnits + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.EGrossWeight + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.BTTQuantity + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.BTTWeight + "</td></tr>";
                });
                html += "</tbody></table>";
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report"))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID + "/Report");
                if (System.IO.File.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/BTTReport.pdf"))
                    System.IO.File.Delete(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/BTTReport.pdf");
                using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
                {
                    rh.HeadOffice = this.HeadOffice;
                    rh.HOAddress = this.HOAddress;
                    rh.ZonalOffice = this.ZonalOffice;
                    rh.ZOAddress = this.ZOAddress;
                    rh.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/BTTReport.pdf", html);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/BTTReport.pdf" });
            }
            else return Json(new { Status = -1, Message = "Error" });
        }
        #endregion

        #region Cargo Daily Report

        [HttpGet]
        public ActionResult LoadCargoDailyReport()
        {
            return PartialView("CargoDailyReport");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetCargoReportDetails(CargoDailyReport ObjCargoDailyReport)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                ObjRR.GetCargoDailyReport(ObjCargoDailyReport.FromDate, ObjCargoDailyReport.ToDate);
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePDFForCargoReport(FormCollection Fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "CargoDailyReport.pdf";
                Pages[0] = Fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/CargoDaily/";
                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                //}

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }

                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CargoDaily/" + FileName });
            }
            catch
            {
                return Json(new { Status = 0, Message = "Error" });
            }
        }

        #endregion     



        #region Export Loaded Container Out

        [HttpGet]
        public ActionResult LoadExpLoadedContainerOut()
        {
            return PartialView("LoadedContainerOut");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetExpLoadedContrDet(ExpLoadedContrOut ObjLoadedContr)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                ObjRR.GetExpLoadedContrOut(ObjLoadedContr.FromDate, ObjLoadedContr.ToDate);
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePDFForExpLoadedContr(FormCollection Fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "LoadedContainerOutReport.pdf";
                Pages[0] = Fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportLoadedContainer/";
                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
                {
                    Rh.HeadOffice = this.HeadOffice;
                    Rh.HOAddress = this.HOAddress;
                    Rh.ZonalOffice = this.ZonalOffice;
                    Rh.ZOAddress = this.ZOAddress;
                    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ExportLoadedContainer/" + FileName });
            }
            catch
            {
                return Json(new { Status = 0, Message = "Error" });
            }
        }

        #endregion

        //#region Daily valuation report of export cargo
        //[HttpGet]
        //public ActionResult GetValuationReport()
        //{
        //    return PartialView();
        //}
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public JsonResult GetValuationReportDet(BTTDate date)
        //{
        //    Kdl_ReportRepository objRR = new Kdl_ReportRepository();
        //    objRR.DailyValuationofExp(date.FromDate, date.ToDate);
        //    if (objRR.DBResponse.Data != null)
        //    {
        //        List<DailyValuationOfExpCrgo> lstExp = new List<DailyValuationOfExpCrgo>();
        //        lstExp = (List<DailyValuationOfExpCrgo>)objRR.DBResponse.Data;
        //        if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report"))
        //            Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID + "/Report");
        //        if (System.IO.File.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf"))
        //            System.IO.File.Delete(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf");
        //        string html = "<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='7' style='font-size:11pt;font-family:Verdana,Arial,San-serif;text-align:center;'>Daily Valuation Report of Export Cargo<br/> From " + date.FromDate + " To " + date.ToDate + "</th></tr><tr><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Shipping Bill No/Comm. Inv No/Packing List No</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Commodity</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>No of Packages</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>WT</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Value [FOB]</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Party</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Insurance By</th></tr></thead><tbody>";
        //        lstExp.ForEach(item =>
        //        {
        //            html += "<tr><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ShippingBillNo + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CommodityName + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Units + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Weight + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.FobValue + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CHAName + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.InsuredBy + "</td></tr>";
        //        });
        //        html += "</tbody></table>";
        //        //using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
        //        //{
        //        //    rh.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf", html);
        //        //}
        //        using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
        //        {
        //            ObjPdf.HeadOffice = this.HeadOffice;
        //            ObjPdf.HOAddress = this.HOAddress;
        //            ObjPdf.ZonalOffice = this.ZonalOffice;
        //            ObjPdf.ZOAddress = this.ZOAddress;
        //            ObjPdf.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf", html);

        //        }

        //        return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ExportCargo.pdf" });
        //    }
        //    return Json(new { Status = -1, Message = "No Data" });
        //}
        //#endregion


        #region Daily valuation report of export cargo
        [HttpGet]
        public ActionResult GetValuationReport()
        {
            return PartialView();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetValuationReportDet(BTTDate date)
        {
            ReportRepository objRR = new ReportRepository();
            objRR.DailyValuationofExp(date.FromDate, date.ToDate);
            if (objRR.DBResponse.Data != null)
            {
                List<DailyValuationOfExpCrgo> lstExp = new List<DailyValuationOfExpCrgo>();
                lstExp = (List<DailyValuationOfExpCrgo>)objRR.DBResponse.Data;
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report"))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID + "/Report");
                if (System.IO.File.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf"))
                    System.IO.File.Delete(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf");
                string html = "<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='7' style='font-size:11pt;font-family:Verdana,Arial,San-serif;text-align:center;'>Daily Valuation Report of Export Cargo<br/> From " + date.FromDate + " To " + date.ToDate + "</th></tr><tr><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Shipping Bill No/Comm. Inv No/Packing List No</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Commodity</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>No of Packages</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>WT</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Value [FOB]</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Party</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Insurance By</th></tr></thead><tbody>";
                lstExp.ForEach(item =>
                {
                    html += "<tr><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ShippingBillNo + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CommodityName + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Units + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Weight + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.FobValue + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CHAName + "</td><td style='text-align:right;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.InsuredBy + "</td></tr>";
                });
                html += "</tbody></table>";
                //using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
                //{
                //    rh.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf", html);
                //}

                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ExportCargo.pdf", html);

                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ExportCargo.pdf" });
            }
            return Json(new { Status = -1, Message = "No Data" });
        }
        #endregion


        #region Statement of Reefer Container 
        [HttpGet]
        public ActionResult GetStmtRefContReport()
        {
            return PartialView();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetStmtRefContReportDet(BTTDate date)
        {
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.StatementOfReeferContainer(date.FromDate, date.ToDate);
            if (objRR.DBResponse.Data != null)
            {
                List<StmtRefCont> lstCont = new List<StmtRefCont>();
                lstCont = (List<StmtRefCont>)objRR.DBResponse.Data;
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report"))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID + "/Report");
                if (System.IO.File.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/StmtOfRefCont.pdf"))
                    System.IO.File.Delete(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/StmtOfRefCont.pdf");
                string html = "<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='6' style='font-size:11pt;font-family:Verdana,Arial,San-serif;text-align:center;'>Statement of Reefer Container<br/> From " + date.FromDate + " To " + date.ToDate + "</th></tr><tr><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Container No</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Size</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Shipping Line</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Loaded / Empty</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Date of Arrival</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Date of Exit</th></tr></thead><tbody>";
                lstCont.ForEach(item =>
                {
                    html += "<tr><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ContainerNo + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Size + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ShippingLineName + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ContainerType + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.GateEntryDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.GateExitDate + "</td></tr>";
                });
                html += "</tbody></table>";
                using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
                {
                    rh.HeadOffice = this.HeadOffice;
                    rh.HOAddress = this.HOAddress;
                    rh.ZonalOffice = this.ZonalOffice;
                    rh.ZOAddress = this.ZOAddress;
                    rh.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/StmtOfRefCont.pdf", html);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/StmtOfRefCont.pdf" });
            }
            return Json(new { Status = -1, Message = "No Data" });
        }
        #endregion



        #region Cargo Stock Register
        [HttpGet]
        public ActionResult CargoStockRegister()
        {
            return PartialView();
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetCargoStockRegister(CargoStockRegister ObjCargoStockRegister)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            CargoStockRegister _objCargoStockRegister = new CargoStockRegister();


            ObjRR.CargoStockRegister(ObjCargoStockRegister);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //_objCargoStockRegister.exportCargoStocklst = (List<exportCargoStock>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GenerateCargoStockRegisterPDF(FormCollection fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "CargoStockRegister.pdf";
                Pages[0] = fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/CargoStockRegister/";
                if (!Directory.Exists(LocalDirectory))
                    Directory.CreateDirectory(LocalDirectory);
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

                }
                var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/CargoStockRegister/" + FileName };
                return Json(ObjResult);
            }
            catch (Exception ex)
            {
                return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
            }

        }
        #endregion

        #region Container Master Register
        [HttpGet]
        public ActionResult GetContainerMasterRegister()
        {
            return PartialView();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetContainerMasterRegisterDet(BTTDate date)
        {
          
            Kdl_ReportRepository objRR = new Kdl_ReportRepository();
            objRR.ContainerMasterRegister(date.FromDate, date.ToDate);
            if (objRR.DBResponse.Data != null)
            {
                List<ContainerMstReg> lstCont = new List<ContainerMstReg>();
                lstCont = (List<ContainerMstReg>)objRR.DBResponse.Data;
                if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report"))
                    Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID + "/Report");
                if (System.IO.File.Exists(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ContainerMstReg.pdf"))
                    System.IO.File.Delete(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ContainerMstReg.pdf");
                string html = "<table style='width:100%;font-size:7pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='17' style='text-align:center;font-size:10pt;'>Container Master Register From <span>" + date.FromDate + "</span> To <span>" + date.ToDate + "</span><br/><br/></th></tr><tr><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Date of Arrival</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" +Session["BranchType"] +"Code</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Container No.</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Size</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Loaded /Empty</th><th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Shipping Line</th> <th rowspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Source</th><th colspan='2' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Import</th><th colspan='4' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Empty Movement</th><th colspan='4' style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>Export</th></tr><tr><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Date of Destuffing</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Date of Delivery</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Received Date </th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Utilization</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Out Date</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Destination</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Stuffing Date</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Exit Date</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Destination</th><th style='font-weight:600;text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;width:7%;'>Remarks</th></tr></thead><tbody>";
                lstCont.ForEach(item =>
                {
                    html += "<tr><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.EntryDate + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.CFSCode + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ContainerNo + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Size + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ContainerType + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ShippingLine + "</td><td style='text-align:left;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'></td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.DestuffingDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.DeliveryDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.ReceivedDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Utilization + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.OExitDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'></td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.Stuffingdate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'>" + item.EExitDate + "</td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'></td><td style='text-align:center;border:1px solid #000;border-bottom:1px solid #000;padding:3px;'></td></tr>";
                });
                html += "</tbody></table>";
                using (var rh = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f,true))
                {
                    rh.HeadOffice = this.HeadOffice;
                    rh.HOAddress = this.HOAddress;
                    rh.ZonalOffice = this.ZonalOffice;
                    rh.ZOAddress = this.ZOAddress;
                    rh.GeneratePDF(Server.MapPath("~/Docs/") + Session.SessionID + "/Report/ContainerMstReg.pdf", html);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/ContainerMstReg.pdf" });
            }
            else return Json(new { Status = -1, Message = "No Data" });
        }
        #endregion

        #region PD A/c Statement

        [HttpGet]
        public ActionResult LoadPDAStatement()
        {
            var Months = new Dictionary<int, string>();
            for (Int16 i = 1; i <= 12; i++)
            {
                Months.Add(i, System.Globalization.DateTimeFormatInfo.InvariantInfo.MonthNames[i - 1]);
            }
            ViewBag.Months = new SelectList((IEnumerable)Months, "Key", "Value", DateTime.Today.Month);
            return PartialView("PDAStatement");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetPDAStatement(PDAStatement ObjPDA)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                ObjRR.GetPDAStatement(ObjPDA.Month, ObjPDA.Year);
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }

        }

        [HttpPost, ValidateInput(false)]
        [CustomValidateAntiForgeryToken]
        public JsonResult GeneratePDFForPDAStatement(FormCollection Fc)
        {
            try
            {
                var Pages = new string[1];
                var FileName = "PDAStatement.pdf";
                Pages[0] = Fc["Page"].ToString();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report/PDAStatement/";
                Pages[0] = Pages[0].ToString().Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                using (var Rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
                {
                    Rh.HeadOffice = this.HeadOffice;
                    Rh.HOAddress = this.HOAddress;
                    Rh.ZonalOffice = this.ZonalOffice;
                    Rh.ZOAddress = this.ZOAddress;
                    Rh.GeneratePDF(LocalDirectory + FileName, Pages);
                }
                return Json(new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/PDAStatement/" + FileName });
            }
            catch
            {
                return Json(new { Status = 0, Message = "Error" });
            }
        }

        #endregion

        #region TDS Statement
        [HttpGet]
        public ActionResult TDSStatement()
        {
            return PartialView();
        }
        [HttpPost, ValidateAntiForgeryToken]
        public JsonResult GetTDSStatement(BTTDate objDt)
        {
            if (ModelState.IsValid)
            {
                Kdl_ReportRepository objRR = new Kdl_ReportRepository();
                objRR.TdsStatement(objDt.FromDate, objDt.ToDate);
                if (objRR.DBResponse.Data != null)
                {
                    List<TDSStatement> lstTds = new List<TDSStatement>();
                    lstTds = (List<TDSStatement>)objRR.DBResponse.Data;
                    string html = GeneratePDFForTDSStmt(lstTds, objDt);
                    return Json(new { Status = 1, Message = html });
                }
                return Json(new { Status = -1, Message = "No Data" });
            }
            else
                return Json(new { Status = -1, Message = "No Data" });
        }
        [NonAction]
        public string GeneratePDFForTDSStmt(List<TDSStatement> lstTds, BTTDate objDt)
        {
            int[] ArrayParty = lstTds.Select(x => x.PartyId).Distinct().ToArray();
            string html = "<table style='width:100%;font-size:8pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='7' style='font-weight:600;text-align:center;border:1px solid #000;padding:5px;'>TDS Statement for the period <span>" + objDt.FromDate + "</span> To <span>" + objDt.ToDate + "</span></th></tr><tr><th colspan='2' style='border-left: 1px solid #000;'></th><th colspan='5' style='font-weight:600;text-align:center;border-bottom:1px solid #000;border-left:1px solid #000;border-right:1px solid #000;padding:5px;'>TDS</th></tr><tr><th style='border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 5px;'>Date</th><th style='border-bottom: 1px solid #000;padding: 5px;'>CR. No.</th><th colspan='2' style='border-bottom: 1px solid #000;border-right: 1px solid #000;border-left: 1px solid #000;padding: 5px;'>Collection</th><th style='border-bottom: 1px solid #000;border-right: 1px solid #000;padding: 5px;'>CWC</th><th style='border-bottom: 1px solid #000;border-right: 1px solid #000;padding: 5px;'>H &amp; T</th><th style='border-bottom: 1px solid #000;border-right: 1px solid #000;padding: 5px;'>Total</th></tr></thead><tbody>";
            for (int i = 0; i < ArrayParty.Length; i++)
            {
                decimal TdsCol, CWCTds, HTTds, Tds = 0;
                html += "<tr><td colspan='7' style='text-align: left;padding: 4px;'><br/>" + lstTds.Where(x => x.PartyId == ArrayParty[i]).FirstOrDefault().PartyName.ToString() + "</td></tr>";
                lstTds.Where(x => x.PartyId == ArrayParty[i]).ToList().ForEach(item =>
                {
                    TdsCol = item.TDSCol;
                    Tds = item.TDS;
                    CWCTds = Math.Round(item.CWCTDS, 2);
                    HTTds = Math.Round(item.HTTDS, 2);
                    html += "<tr><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: left;'>" + item.ReceiptDate + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: left;'>" + item.ReceiptNo + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: left;'></td><td style='border-top: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + TdsCol + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + CWCTds + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + HTTds + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-right: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + Tds + "</td></tr>";
                });
                html += "<tr><td colspan='7'></td></tr><tr><td colspan='2'></td><td colspan='2' style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + Math.Round(lstTds.Where(x => x.PartyId == ArrayParty[i]).Select(x => x.TDSCol).Sum(), 2) + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + Math.Round(lstTds.Where(x => x.PartyId == ArrayParty[i]).Select(x => x.CWCTDS).Sum(), 2) + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;padding: 4px;text-align: right;'>" + Math.Round(lstTds.Where(x => x.PartyId == ArrayParty[i]).Select(x => x.HTTDS).Sum(), 2) + "</td><td style='border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;border-right: 1px solid #000; padding: 4px;text-align: right;'>" + Math.Round(lstTds.Where(x => x.PartyId == ArrayParty[i]).Select(x => x.TDS).Sum(), 2) + "</td></tr>";
            }
            html += "</tbody><tfoot><tr><td colspan='7'></td></tr><tr><td colspan='3' style='text-align: left;'>Total:</td><td style='border: 1px solid #000;text-align: right;padding: 4px;'>" + lstTds.Select(x => x.TDSCol).Sum() + "</td><td style='border: 1px solid #000;text-align: right;padding: 4px;'>" + Math.Round(lstTds.Select(x => x.CWCTDS).Sum(), 2) + "</td><td style='border: 1px solid #000;text-align: right;padding: 4px;'>" + Math.Round(lstTds.Select(x => x.HTTDS).Sum(), 2) + "</td><td style='border: 1px solid #000;text-align: right;padding: 4px;'>" + lstTds.Select(x => x.TDS).Sum() + "</td></tr></tfoot></table>";
            if (!Directory.Exists(Server.MapPath("~/Docs/Report/") + Session.SessionID))
                Directory.CreateDirectory(Server.MapPath("~/Docs/Report/") + Session.SessionID);
            if (System.IO.File.Exists(Server.MapPath("~/Docs/Report/") + Session.SessionID + "/TdsStatement.pdf"))
                System.IO.File.Delete(Server.MapPath("~/Docs/Report/") + Session.SessionID + "/TdsStatement.pdf");
            using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f,true))
            {
                rh.HeadOffice = this.HeadOffice;
                rh.HOAddress = this.HOAddress;
                rh.ZonalOffice = this.ZonalOffice;
                rh.ZOAddress = this.ZOAddress;
                rh.GeneratePDF(Server.MapPath("~/Docs/Report/") + Session.SessionID + "/TdsStatement.pdf", html);
            }
            return "/Docs/Report/" + Session.SessionID + "/TdsStatement.pdf";
        }
        #endregion

        #region Bulk Invoice Print New

        public ActionResult BulkInvoiceReportNew()
        {
            return View();
        }


        [HttpPost]
        //[ValidateAntiForgeryToken]
        public JsonResult GetBulkInvoiceReportNew(BulkInvoiceReport ObjBulkInvoiceReport)
        {
            if (ObjBulkInvoiceReport.InvoiceNumber == null)
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();





            Login objLogin = (Login)Session["LoginUser"];
            //When Module is selected All Condition against a party


            if (ObjBulkInvoiceReport.InvoiceModule == "All")
            {
                string ModuleName = "";
                //delete all the files in the folder before creating it
                if (System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    string deletelocation = Server.MapPath("~/Docs/All/") + Session.SessionID + "/";
                    DeleteDirectory(deletelocation);
                }

                //get all the distinct invoice module and invoices list with respect to party and date range 
                ObjRR.ModuleListWithInvoice(ObjBulkInvoiceReport);
                if (ObjRR.DBResponse.Status == 1)
                {
                    DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                    List<dynamic> lstModule = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
                    IList lstDistModule = lstModule.Select(x => x.Module).Distinct().ToList();

                    string FilePath = "";


                    foreach (string Mod in lstDistModule)
                    {
                        //lstModule.Where(x => x.Module == Mod).ToList().ForEach(itemInv =>
                        //{
                        //    String ModuleName= itemInv.Module;
                        switch (Mod)
                        {
                            //Here ds is list of invoice of a module between two dates 
                            case "IMPYard":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "ASSESSMENT SHEET FCL";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforYard((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "IMPDeli":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "ASSESSMENT SHEET LCL";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforGodown((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "EXPLod":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "LOADED CONTAINER PAYMENT SHEET";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforEXPLod((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "EXP":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER MOVEMENT";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforEXP((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "IMPDest":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CCIN ENTRY";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforIMPDest((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BTT":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "BTT";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBTT((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                            case "ECYard":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "EMPTY CONTAINER PAYMENT SHEET";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECYard((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                            case "ECGodn":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "SEAL CUTTING";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECGodn((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "CC":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CARGO SHIFTING";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforCC((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BND":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "FUMIGATION";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBND((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BNDadv":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "EXPORT CONTAINER STUFFING";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforContainerBNDadv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BNDUnld":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "IMPORT TRAIN SUMMARY";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBNDUnld((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "MiscInv":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforMiscInv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "Rent":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforMiscInv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "ECOut":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECOut((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                        }


                    }
                    return Json(new { Status = 1, Data = FilePath });
                }
                else
                    return Json(new { Status = -1, Data = "No Record Found." });
            }

            else
            {

                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);//, objLogin.Uid

                //if (ObjRR.DBResponse.Status == 1)
                //{

                DataSet ds = (DataSet)ObjRR.DBResponse.Data;

                string FilePath = "";
                switch (ObjBulkInvoiceReport.InvoiceModule)
                {
                    case "IMPYard":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforYard(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "IMPDeli":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforGodown(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "EXPLod":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforEXPLod(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "EXP":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforEXP(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "IMPDest":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforIMPDest(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BTT":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBTT(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;

                    case "ECYard":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforECYard(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "ECGodn":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforECGodn(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "CC":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforCC(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BND":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBND(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BNDadv":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforContainerBNDadv(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BNDUnld":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBNDUnld(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "MiscInv":
                        ObjBulkInvoiceReport.All = "";
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforMiscInv(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "Rent":
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforRent(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "ECOut":
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforECOut(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;

                }

                return Json(new { Status = 1, Data = FilePath });
                //}
                //else
                //    return Json(new { Status = -1, Data = "No Record Found." });
            }
        }

        [NonAction]
        public string GeneratingBulkPDFforMiscInv(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";

            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);
            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>MISC INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:7pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforECOut(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>EMPTY CONTAINER OUT INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforRent(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                upiQRInfo.tr = Convert.ToString(item.InvoiceId);

                Einvoice Eobj = new Einvoice();
                B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                objresponse = Eobj.GenerateB2cQRCode(upiQRInfo);
                IrnResponse objERes = new IrnResponse();
                objERes.SignedQRCode = objresponse.QrCodeBase64;
                objERes.SignedInvoice = objresponse.QrCodeJson;
                objERes.SignedQRCode = objresponse.QrCodeJson;
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>RENT INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img width='150px' height='150px' valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(objERes.SignedInvoice)) + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img width='150px' height='150px' valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(objERes.SignedInvoice)) + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }




        [NonAction]
        public string GeneratingBulkPDFforContainerBNDadv(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";


            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);
            string Container = "";
            string cfscode = "";

            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>BOND ADVANCE PAYMENT SHEET INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img width='150px' height='150px' valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(objERes.SignedInvoice)) + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img width='150px' height='150px' valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(objERes.SignedInvoice)) + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/

                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });

            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }


        [NonAction]
        public string GeneratingBulkPDFforBND(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";
            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);
            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>BOND DELIVERY INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforCC(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforECGodn(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";

            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";


            StringBuilder html = new StringBuilder();
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
            });
            html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
            html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
            lstSB.Add(html.ToString());
            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }
        [NonAction]
        public string GeneratingBulkPDFforYard(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";

            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>YARD INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType != "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                //html.Append("<tr><td colspan='6' width='50%'>BOL No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOLNo + "/" + item.BOLDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");

                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());

                /***************/
            });
          


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }

            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforGodown(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), ""); 
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";


          
            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>DELIVERY INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOL No./Date</td><td>:</td><td colspan='6' width='50%'>Dynamic</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied(SQM)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });
           

            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforEXP(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";


            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);
            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";

            lstInvoice.ToList().ForEach(item =>
            {

                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>EXPORT INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Carting (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Stuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Exporter</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>S.B. No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied(CBM)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Stuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforEXPLod(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";

            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%; margin-bottom: 10px;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforIMPDest(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";

            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {

                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>DESTUFFING INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        [NonAction]
        public string GeneratingBulkPDFforBTT(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {

                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label><br/><label style='font-size: 7pt; font-weight: bold;'>BTT INVOICE</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='8'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Shipping Bill No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Carting (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Stuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Exporter</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>S.B. No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied(CBM)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Stuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }



        [NonAction]
        public string GeneratingBulkPDFforECYard(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");
            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";

            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();
            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {

                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }

                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }

        //Update Auction Report

        [NonAction]
        public string GeneratingBulkPDFforBNDUnld(DataSet ds, string InvoiceModuleName, string All)
        {
            Einvoice obj = new Einvoice(new HeaderParam(), "");

            var FileName = "";
            var location = "";
            var BQRFileName = "";
            var BQRlocation = "";


            string dtype = "Date of Arrival";
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);

            List<string> lstSB = new List<string>();

            UpiQRCodeInfo upiQRInfo = new UpiQRCodeInfo();
            upiQRInfo.ver = objCompany[0].ver;

            upiQRInfo.tn = objCompany[0].tn;
            upiQRInfo.tier = objCompany[0].tier;
            upiQRInfo.tid = objCompany[0].tid;
            upiQRInfo.qrMedium = Convert.ToInt32(objCompany[0].qrMedium);
            //  upiQRInfo.QRexpire = objCompany[0].QRexpire;
            upiQRInfo.pn = objCompany[0].pn;
            upiQRInfo.pa = objCompany[0].pa;
            // upiQRInfo.orgId = objCompany[0].orgId;
            upiQRInfo.mtid = objCompany[0].mtid;
            upiQRInfo.msid = objCompany[0].msid;
            upiQRInfo.mode = Convert.ToInt32(objCompany[0].mode);
            upiQRInfo.mid = objCompany[0].mid;
            upiQRInfo.mc = Convert.ToString(objCompany[0].mc);
            upiQRInfo.gstIn = Convert.ToString(objCompany[0].GstIn);
            upiQRInfo.merchant_id = Convert.ToInt32(objCompany[0].ccavenuemid);

            string Container = "";
            string cfscode = "";



            lstInvoice.ToList().ForEach(item =>
            {
                IrnResponse objERes = new IrnResponse();
                //if (item.SupplyType == "B2C")
                //{
                BQRFileName = item.InvoiceId + ".jpg";
                BQRlocation = Server.MapPath("~/Docs/") + "BQR/" + BQRFileName;
                log.Error("Path:" + BQRlocation);
                if (!System.IO.File.Exists(BQRlocation))
                {


                    upiQRInfo.order_id = Convert.ToInt32(item.InvoiceId);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.billing_name = Convert.ToString(item.PartyName);
                    upiQRInfo.billing_address = Convert.ToString(item.PartyAddress);
                    upiQRInfo.billing_zip = Convert.ToString(item.PinCode);
                    upiQRInfo.billing_tel = Convert.ToString(item.MobileNo);
                    upiQRInfo.billing_email = Convert.ToString(item.Email);

                    upiQRInfo.InvoiceDate = Convert.ToString(item.DocDt);
                    upiQRInfo.invoiceNo = Convert.ToString(item.InvoiceNo);
                    upiQRInfo.InvoiceName = Convert.ToString(item.PartyName);
                    upiQRInfo.mam = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.am = Convert.ToDecimal(item.InvoiceAmt);
                    upiQRInfo.CGST = Convert.ToDecimal(item.CGST);
                    upiQRInfo.SGST = Convert.ToDecimal(item.SGST);
                    upiQRInfo.IGST = Convert.ToDecimal(item.IGST);
                    upiQRInfo.GSTPCT = Convert.ToDecimal(item.IGSTPer);
                    upiQRInfo.QRexpire = Convert.ToString(item.DocDt);
                    upiQRInfo.tr = Convert.ToString(item.InvoiceId);
                    string Site = System.Configuration.ConfigurationManager.AppSettings["WebsiteUrl"];

                    upiQRInfo.redirect_url = Site + "UPIResponse/GetResponseBqr";
                    upiQRInfo.cancel_url = Site + "UPIResponse/CancelResponseBqr";
                    upiQRInfo.merchant_param1 = Convert.ToInt32(System.Configuration.ConfigurationSettings.AppSettings["BranchId"].ToString());


                    Einvoice Eobj = new Einvoice();
                    B2cQRCodeResponse objresponse = new B2cQRCodeResponse();
                    objresponse = Eobj.GenerateB2cQRCode_Wfld(upiQRInfo);



                    if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + "BQR"))
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + "BQR");
                    }

                    string strm = objresponse.QrCodeBase64;

                    //this is a simple white background image
                    var myfilename = string.Format(@"{0}", Guid.NewGuid());

                    //Generate unique filename
                    //  string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                    var bytess = Convert.FromBase64String(strm);
                    using (var imageFile = new FileStream(BQRlocation, FileMode.Create))
                    {
                        imageFile.Write(bytess, 0, bytess.Length);
                        imageFile.Flush();
                    }


                    Kdl_ReportRepository wfldObj = new Kdl_ReportRepository();
                    wfldObj.AddEditBQRCode(item.InvoiceId, BQRFileName, ((Login)(Session["LoginUser"])).Uid);


                    objERes.SignedQRCode = objresponse.QrCodeBase64;
                    objERes.SignedInvoice = objresponse.QrCodeJson;
                    objERes.SignedQRCode = objresponse.QrCodeJson;

                }
                StringBuilder html = new StringBuilder();
                /*Header Part*/
                html.Append("<table cellspacing='0' cellpadding='0' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><thead>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr>");
                html.Append("<td width='83%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt;'>" + objCompany[0].CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - " + objCompany[0].EmailAddress + "</label></td>");
                html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='SWACHBHARAT'/></td></tr>");
                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + " </td></tr>");
                html.Append("<tr><td colspan='12'><span style='display: block; font-size: 7pt; text-transform: uppercase;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("</tbody></table></td>");
                if (item.SupplyType == "B2C")
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                }
                else if (!string.IsNullOrEmpty(item.SignedQRCode))
                {
                    html.Append("<td align='left' valign='top'><img valign='top' align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");
                }
                html.Append("</tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");
                html.Append("</thead></table>");

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");

                html.Append("<tr><td colspan='12'><table style='border: 1px solid #000; width:100%;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 13px; text-align: center; margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='width:100%; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='5' width='50%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='30%'>Invoice No</th><th>:</th><td colspan='6' width='70%'>" + item.InvoiceNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Name</th><th>:</th><td colspan='6' width='70%'>" + item.PartyName + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party Address</th><th>:</th><td colspan='6' width='70%'>" + item.PartyAddress + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Party GST</th><th>:</th><td colspan='6' width='70%'>" + item.PartyGSTNo + "</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Place Of Supply</th><th>:</th><td colspan='6' width='70%'>" + item.PartyState + "(" + item.PartyStateCode + ")</td></tr>");
                html.Append("<tr><th colspan='6' width='30%'>Is Service</th><th>:</th><td colspan='6' width='70%'>YES</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='40%'>");
                html.Append("<table style='width:100%; font-size:7pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th colspan='6' width='35%'>Invoice Date</th><th>:</th><td colspan='6' width='65%'>" + item.InvoiceDate + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State</th><th>:</th><td colspan='6' width='65%'>" + item.PartyState + "</td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>State Code</th><th>:</th><td colspan='6' width='65%'>" + item.PartyStateCode + "</td></tr>");
                //html.Append("<tr><th colspan='6' width='35%'>Invoice Generated By</th><th>:</th><td colspan='6' width='65%'></td></tr>");
                html.Append("<tr><th colspan='6' width='35%'>Supply Type</th><th>:</th><td colspan='6' width='65%'>" + item.SupplyType + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'><b>Container / OBL / Shipbill Details:</b></td></tr>");

                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Container No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>Arrival Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                /*************/
                /*Container Bind*/
                int i = 1;
                Decimal totamt = 0;
                lstContainer.Where(x => x.InvoiceId == item.InvoiceId).ToList().ForEach(elem =>
                {

                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ContainerNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.Size + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + elem.ArrivalDate + " " + elem.ArrivalTime + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                    html.Append("</tr>");
                    i = i + 1;
                });
                /***************/
                html.Append("</tbody></table></td></tr>");

                html.Append("<tr><td>");
                html.Append("<table style='border:1px solid #000; width:100%;' cellspacing='0' cellpadding='0'><tbody><tr>");
                html.Append("<td colspan='6' width='50%' valign='top'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>Shipping Line</td><td>:</td><td colspan='6' width='50%'>" + item.ShippingLineName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>CFS Code No</td><td>:</td><td colspan='6' width='50%'>" + item.CFSCode + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Arrival (FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.ArrivalDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing (FN/AN)/ Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of Importer</td><td>:</td><td colspan='6' width='50%'>" + item.ExporterImporterName + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>BOE No./Date</td><td>:</td><td colspan='6' width='50%'>" + item.BOENo + "/" + item.BOEDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Name of CHA</td><td>:</td><td colspan='6' width='50%'>" + item.CHAName + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' width='50%' style='border-left:1px solid #000;'>");
                html.Append("<table style='width:100%; font-size:6pt;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td colspan='6' width='50%'>No of Packages</td><td>:</td><td colspan='6' width='50%'>" + item.TotalNoOfPackages + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Total Gross Weight</td><td>:</td><td colspan='6' width='50%'>" + item.TotalGrossWt + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Gross Weight per Package</td><td>:</td><td colspan='6' width='50%'>" + item.TotalWtPerUnit + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Storage space occupied</td><td>:</td><td colspan='6' width='50%'>" + item.TotalSpaceOccupied + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date & Time of Destuffing(FN/AN)</td><td>:</td><td colspan='6' width='50%'>" + item.DestuffingDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Date of Delivery</td><td>:</td><td colspan='6' width='50%'>" + item.DeliveryDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Customs Examination Date</td><td>:</td><td colspan='6' width='50%'>" + item.CstmExaminationDate + "</td></tr>");
                html.Append("<tr><td colspan='6' width='50%'>Value of Cargo (CIF Value + Duty + Penalty)</td><td>:</td><td colspan='6' width='50%'>" + item.TotalValueOfCargo + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr></tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><th><h3 style='text-align: left; font-size: 7pt; margin-top: 0; margin-bottom: 0;'>Charges :</h3> </th></tr>");

                html.Append("<tr><td><table style='border: 1px solid #000; border-bottom: 0; width:100%; font-size: 6pt; text-align: center;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                /*Charges Bind*/

                //LOOP START
                lstCharges.Where(x => x.InoviceId == item.InvoiceId).ToList().ForEach(elem =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + i.ToString() + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 140px;'>" + elem.Clause + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 24%;'>" + elem.OperationDesc + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 100px;'>" + elem.SACCode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 80px;'>" + elem.Rate + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 130px;'>" + elem.Taxable.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.CGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.SGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 50px;'>" + elem.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align: right; width: 50px;'>" + elem.IGSTAmt.ToString("0.##") + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; text-align: right; width: 100px;'>" + elem.Total.ToString("0.##") + "</td></tr>");
                    i = i + 1;
                    //LOOP END
                });
                html.Append("</tbody>");
                html.Append("</table></td></tr></tbody></table>");


                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 100px;'>Total :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 130px;'>" + item.TotalTaxable.ToString("0.##") + "</th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.AllTotal.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalCGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalSGST.ToString("0.##") + "</th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='font-size: 6pt; text-align: right; width: 50px;'>" + item.TotalIGST.ToString("0.##") + "</th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; border-top:0; width:100%; font-size:6pt; text-align: center;' cellspacing='0' cellpadding='5'> ");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='width: 150px; text-align:left;'>Round Up :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='width: 100px; text-align:right;'>" + item.RoundUp.ToString("0.00") + "</th></tr><tr>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><th rowspan='2' style='font-size: 6pt; text-align: left; width: 170px;'>Total Invoice :</th>");
                html.Append("<th rowspan='2' style='width: 140px;'></th>");
                html.Append("<th rowspan='2' style='width: 24%;'></th>");
                html.Append("<th rowspan='2' style='width: 100px;'></th>");
                html.Append("<th rowspan='2' style='width: 80px;'></th>");
                html.Append("<th rowspan='2' style='width: 130px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th colspan='2' style='width: 200px;'></th>");
                html.Append("<th rowspan='2' style='font-size: 6pt; text-align: right; width: 100px;'>" + item.InvoiceAmt.ToString("0.##") + "</th></tr>");
                html.Append("<tr><th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th>");
                html.Append("<th style='width: 50px;'></th></tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border: 1px solid #000; border-top:0; width: 100%;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><th style='border-bottom: 1px solid #000; font-size: 6pt; text-align: left; padding: 5px;' colspan='13'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0.##")) + "</th></tr>");
                html.Append("<tr><th style='font-size: 6pt; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; font-size:6pt;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr><td colspan='12'><b>Payer Name : </b> " + item.PayeeName + "</td></tr>");
                html.Append("<tr><td colspan='12'><b>Payer Code : </b> " + item.PayerCode + "</td></tr>");
                html.Append("<tr><td colspan='2' width='10%' valign='top'><b>Remarks : </b></td><td colspan='9' width='90%' align='left'>" + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0; font-weight: bold;'>For Central Warehousing Corporation.</p>");
                html.Append("<span><br/><br/></span>");
                html.Append("<p style='text-align: right; font-size: 7pt; margin:0;'>Authorized Signatories</p>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr>");

                if (item.SupplyType != "B2C")
                {
                    html.Append("<tr>");
                    html.Append("<td align='left' valign='top' colspan='6' width='50%'><p style='font-size:7pt; font-weight:bold;'>Scan for Payment</p><img style='width:115px; height:115px' valign='top' align='right' src='" + BQRlocation + "'/> </td>");
                    html.Append("</tr>");
                }

                html.Append("</tbody></table>");
                /***************/
                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("SWACHBHARAT", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
            });


            if (All != "All")
            {
                FileName = "BulkReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
                }
            }
            else
            {
                FileName = InvoiceModuleName + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
                location = Server.MapPath("~/Docs/All/") + Session.SessionID + "/" + FileName;
                if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/All/") + Session.SessionID);
                }
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.Version = Version;
                rp.Effectlogofile = Effectlogofile;
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }



        //[HttpGet]
        //[CustomValidateAntiForgeryToken]
        //public ActionResult ListOfInvoiceDateWise(string FromDate, string ToDate, string invoiceType)
        //{
        //    Ppg_ReportRepository ObjRR = new Ppg_ReportRepository();
        //    List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
        //    Login objLogin = (Login)Session["LoginUser"];
        //    ObjRR.GetInvoiceList(FromDate, ToDate, invoiceType);//, objLogin.Uid
        //    if (ObjRR.DBResponse.Data != null)
        //    {
        //        //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
        //        return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        //    }

        //}



        public JsonResult Download()
        {
            String session = Session.SessionID;
            ReportCWCController obj = new ReportCWCController();
            //////int CurrentFileID = Convert.ToInt32(FileID); 
            string fileSavePath = "";
            fileSavePath = Server.MapPath("~/Docs/All/") + Session.SessionID;
            var filesCol = obj.GetFile(fileSavePath).ToList();
            string FileList = "";
            //string FileList = "/Docs/All/" + Session.SessionID + "/";
            for (int i = 0; i < filesCol.Count; i++)
            {
                FileList = FileList + "/Docs/All/" + Session.SessionID + "/" + (filesCol[i].FileName) + ",";
            }
            var ObjResult = new { Status = 1, Message = FileList };
            return Json(ObjResult);
        }

        [NonAction]
        public List<FileList> GetFile(string fileSavePath)
        {
            List<FileList> listFiles = new List<FileList>();
            DirectoryInfo dirInfo = new DirectoryInfo(fileSavePath);
            int i = 0;
            foreach (var item in dirInfo.GetFiles())
            {
                listFiles.Add(new FileList()
                {
                    FileId = i + 1,
                    FileName = item.Name,
                    FilePath = dirInfo.FullName + "/" + item.Name
                });
                i = i + 1;
            }
            return listFiles;
        }

        private void DeleteDirectory(string path)
        {
            if (Directory.Exists(path))
            {
                //Delete all files from the Directory
                foreach (string file in Directory.GetFiles(path))
                {
                    System.IO.File.Delete(file);
                }
                //Delete all child Directories
                //foreach (string directory in Directory.GetDirectories(path))
                //{
                //    DeleteDirectory(directory);
                //}
                ////Delete a Directory
                //Directory.Delete(path);
            }
        }
        #endregion

        #region BulkDebitnoteReport
        [HttpGet]
        public ActionResult BulkDebitnoteReport()
        {

            //ExportRepository objExport = new ExportRepository();
            //objExport.GetPaymentParty();
            //if (objExport.DBResponse.Status > 0)
            //    ViewBag.PaymentParty = JsonConvert.SerializeObject(objExport.DBResponse.Data);
            //else
            //    ViewBag.PaymentParty = null;
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult PrintDRNote(FormCollection fc)
        {
            //objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            Hdb_ReportRepository objRepo = new Hdb_ReportRepository();
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();
            objRepo.PrintDetailsForBulkCRNote(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"), "D");
            if (objRepo.DBResponse.Data != null)
            {
                objCR = (PrintModelOfBulkCrCompany)objRepo.DBResponse.Data;
                string Path = GenerateDRNotePDF(objCR);
                return Json(new { Status = 1, Message = Path });
            }
            else
            {
                return Json(new { Status = -1, Message = "error" });
            }
        }

        //    public string GenerateCRNotePDF(PrintModelOfBulkCrCompany objCR)
        //    {
        //        string Note = "";
        //        string SACCode = "", note = "", fileName = "";
        //        objCR.lstCharges.Select(x => new { SACCode = x.SACCode }).Distinct().ToList().ForEach(item =>
        //        {
        //            if (SACCode == "")
        //                SACCode = item.SACCode;
        //            else
        //                SACCode = SACCode + "," + item.SACCode;
        //        });

        //            note = (Note == "C") ? "CREDIT NOTE" : "DEBIT NOTE";
        //        fileName = (Note == "C") ? ("CreditNote" + CRNoteId + ".pdf") : ("DebitNote" + CRNoteId + ".pdf");
        //        string Path = Server.MapPath("~/Docs/") + Session.SessionID;//+ "/CreditNote" + CRNoteId + ".pdf";
        //        if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
        //        {
        //            Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
        //        }
        //        if (System.IO.File.Exists(Path + "/" + fileName))
        //        {
        //            System.IO.File.Delete(Path + "/" + fileName);

        //        }
        //        objCR.lstCrParty.ToList().ForEach(item =>
        //        {
        //            string html = "<table style='width:100%;font-size:9pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='2' style='text-align:center;padding:8px;'>Principle Place of Business: <span style='border-bottom:1px solid #000;'>______________________</span><br/>" + note + "</th></tr><tr><th style='border:1px solid #000;text-align:center;padding:8px;width:50%;'>Details of Service Provider</th><th style='border:1px solid #000;text-align:center;padding:8px;width:50%;'>Details of Service Receiver</th></tr></thead><tbody><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>Name: " + objCR.CompanyName + "</td><td style='border:1px solid #000;text-align:left;padding:8px;'>Name: <span>" + item.PartyName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>Warehouse Address: <span>" + objCR.CompanyAddress + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>Address: <span>" + item.PartyAddress + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>City: <span>" + objCR.CompCityName + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>City: <span>" + item.PartyCityName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>State: <span>" + objCR.CompStateName + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>State: <span>" + item.PartyStateName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>State Code: <span>" + objCR.CompStateCode + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>State Code: <span>" + item.PartyStateCode + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>GSTIN: <span>" + objCR.CompGstIn + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'><span>GSTIN(if registered):" + item.PartyGSTIN + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>PAN:<span>" + objCR.CompPan + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'><span></span></td></tr><tr><td style='text-align:left;padding:8px;'>Debit/Credit Note Serial No: <span style='border-bottom:1px solid #000;'>" + item.CRNoteNo + "</span><br/><br/>Date of Issue: <span style='border-bottom:1px solid #000;'>" + item.CRNoteDate + "</span></td><td style='text-align:left;padding:8px;'>Accounting Code of <span>" + SACCode + "</span><br/><br/>Description of Services: <span>Other Storage & Warehousing Services</span></td></tr><tr><td colspan='2' style='text-align:left;padding:8px;'>Original Bill of Supply/Tax Invoice No: <span style='border-bottom:1px solid #000;'>" + item.InvoiceNo + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date: <span style='border-bottom:1px solid #000;'>" + Convert.ToDateTime(item.InvoiceDate).ToString("dd/MM/yyyy") + "</span></td></tr><tr><td colspan='2'>";
        //        string htmltable = "<table style='width:100%;font-family:Verdana,Arial,San-serif;border-collapse:collapse;border:1px solid #000;font-size:7pt;'><thead><tr><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Sl No.</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;width:20%;'>Particulars</th><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;width:7%;'>Taxable Value</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>CGST</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>SGST</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>IGST</th><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Total Amount</th></tr><tr><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Reasons for increase / decrease in original invoice</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th></tr></thead><tbody>";
        //        string tr = "";
        //        int Count = 1;
        //        decimal IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        //            objCR.lstCharges.Where(y => y.CRNoteId == item.CRNoteId).ToList().ForEach(data =>
        //           {
        //                tr += "<tr><td style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>" + Count + "</td><td style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'>" + item.ChargeName + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.Taxable + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.CGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.CGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.SGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.SGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.IGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.IGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.Total + "</td></tr>";
        //            IGSTAmt += item.IGSTAmt;
        //            CGSTAmt += item.CGSTAmt;
        //            SGSTAmt += item.SGSTAmt;
        //            Count++;
        //        });
        //        string AmountInWord = ConvertNumbertoWords((long)objCR.GrandTotal);
        //        string Remarks = objCR.Remarks;
        //        string tfoot = "<tr><td style='border:1px solid #000;text-align:center;padding:5px;'></td><td style='border:1px solid #000;text-align:left;padding:5px;'></td><td style='border:1px solid #000;text-align:center;padding:5px;font-weight:600;'>Total</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + CGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + SGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + IGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + objCR.TotalAmt + "</td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Total Debit/Credit Note Value (in figure)</span> <span>" + objCR.GrandTotal + "</span></td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Total Debit/Credit Note Value (in words)</span> <span>" + AmountInWord + "</span></td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Remarks</span> <span>" + Remarks + "</span></td></tr></tbody></table></td></tr><tr><td colspan='2' style='text-align:left;padding:5px;'>Note:<br/><span style='padding:8px;'>1. The invoice issued earlier can be modified/cancelled by way of Debit Note/Credit Note.</span><br/><span style='padding:8px;'>2. Credit Note is to be issued where excess amount cliamed in original invoice.</span><br/><span style='padding:8px;'>3. Debit Note is to be issued where less amount claimed in original invoice.</span></td></tr><tr><td></td><td style='text-align:left;padding:8px;font-weight:600;'>Signature: ____________________________<br/><br/>Name of the Signatory: __________________ <br/><br/>Designation/Status: ____________________ </td></tr><tr><td style='text-align:left;padding:5px;'>To,<br/><span style='border-bottom:1px solid #000;'>____________________________ <br/>____________________________<br/>____________________________<br/></span><br/><br/>Copy To:<br/>1. Duplicate Copy for RM, CWC,RO -<br/>2. Triplicate Copy for Warehouse</td></tr></tbody></table>";
        //        html = html + htmltable + tr + tfoot;
        //        using (var RH = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
        //        {
        //            RH.GeneratePDF(Path + "/" + fileName, html);
        //        }
        //        return "/Docs/" + Session.SessionID + "/" + fileName;
        //    }


        //}

        [NonAction]
        public string GenerateDRNotePDF(PrintModelOfBulkCrCompany objCR)
        {
            Einvoice obj = new Einvoice();
            string note = "Debit Note";

            List<string> lstSB = new List<string>();

            string SACCode = "";
            objCR.lstCharges.Select(x => new { SACCode = x.SACCode }).Distinct().ToList().ForEach(item =>
            {
                if (SACCode == "")
                    SACCode = item.SACCode;
                else
                    SACCode = SACCode + "," + item.SACCode;
            });

            objCR.lstCrParty.ToList().ForEach(item =>
            {

                //    /*Header Part*/
                StringBuilder html = new StringBuilder();

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");

                html.Append("<tr>");

                html.Append("<td width='90%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                //html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                //html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt; padding-bottom: 10px;'>" + objCR.CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - cwcwfdcfs@gmail.com</label></td>");
                //html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='ISO_IMG'/></td></tr>");
                html.Append("<tr><td width='800%' valign='top' align='center'><label style='font-size: 10pt; font-weight: bold;'>Principle Place of Business: <span style='border-bottom: 1px solid #000;'>______________________</span></label><br /><label style='font-size: 10pt; font-weight: bold;'>" + note + "</label></td></tr>");

                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + "  </td></tr>");
                html.Append("</tbody></table></td>");

                if (item.SignedQRCode == "")
                { }
                else
                {
                    if (item.SupplyType == "B2C")
                    {
                        html.Append("<td align='left' valign='top'><img align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");

                    }
                    else
                    {
                        html.Append("<td align='left' valign='top'><img align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");

                    }
                }







                html.Append("<td align='left' valign='top'><img valign='top' align='right' src=''/> </td>");

                html.Append("</tr>");

                html.Append("</tbody></table>");
                html.Append("</td></tr>");

                //html.Append("<tr><td colspan='1' width='10%' valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                //html.Append("<td colspan='8' width='90%' width='100%' valign='top' align='center'><h1 style='font-size: 20px; line-height: 30px;margin: 0; padding: 0;'>" + objCR.CompanyName + "</h1>");
                //html.Append("<label style='display: block; font-size: 13px; line-height: 22px;'>(A Govt. of India Undertaking) </label><br />");
                //html.Append("<span style='font-size: 12px; padding-bottom: 10px;'>" + objCR.CompanyAddress + "</span>");
                //html.Append("<br /><label style='font-size: 14px; font-weight:bold;'></label>");
                //html.Append("</td></tr>");

                html.Append("</tbody></table>");

                html.Append("<table cellpadding='0' cellspacing='0' style='table-layout: fixed; width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif;'><tbody>");
                html.Append("<tr>");
                html.Append("<td colspan='6' cellspacing='0' style='width:50%; border-right: 1px solid #000;'>");
                html.Append("<table cellspacing='0' style='width:100%;font-size:8pt;'><tbody>");
                html.Append("<tr><th cellpadding='10' style='border-bottom: 1px solid #000;'>Details of Service Provider</th></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Name:</b>" + objCR.CompanyName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Warehouse Address:</b>" + objCR.CompanyAddress + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>City:</b>" + objCR.CompCityName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State:</b>" + objCR.CompStateName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State Code:</b>" + objCR.CompStateCode + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>GSTIN:</b> " + objCR.CompGstIn + "</td></tr>");
                html.Append("<tr><td cellpadding='10'><b>PAN:</b>" + objCR.CompPan + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' cellspacing='0' Valign='top' style='width:50%;'>");
                html.Append("<table cellspacing='0' style='width:100%;font-size:8pt;'><tbody>");
                html.Append("<tr><th cellpadding='10' style='border-bottom: 1px solid #000;'>Details of Service Receiver</th></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Name:</b> " + item.PartyName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Address:</b> " + item.PartyAddress + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>City:</b>" + item.PartyCityName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State:</b>" + item.PartyStateName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State Code:</b> " + item.PartyStateCode + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>GSTIN(if registered):</b> " + item.PartyGSTIN + "</td></tr>");
                html.Append("<tr><td cellpadding='10'></td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='6' cellspacing='0' style='width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif; margin-top:20px;'><tbody>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Debit/Credit Note Serial No :</b> " + item.CRNoteNo + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Accounting Code of</b> " + SACCode + "</td></tr>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Date of Issue :</b> " + Convert.ToDateTime(item.CRNoteDate).ToString("dd/MM/yyyy") + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Description of Services :</b> Other Storage & Warehousing Services</td></tr>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Original Bill of Supply/Tax Invoice No :</b>  " + item.InvoiceNo + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Date :</b>  " + Convert.ToDateTime(item.InvoiceDate).ToString("dd/MM/yyyy") + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif; margin-top:20px;'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Sl No.</th>");
                html.Append("<th colspan='1' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>Particulars</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>Taxable Value</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>Total Amount</th></tr>");
                html.Append("<tr><th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>Reason for increase/decrease in original invoice</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                int i = 1;
                decimal IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
                decimal total = 0;
                objCR.lstCharges.Where(y => y.CRNoteId == item.CRNoteId).ToList().ForEach(data =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + i + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>" + data.ChargeName + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>" + data.Taxable + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.CGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.SGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.IGSTAmt + "</td>");

                    html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>" + data.Total + "</td></tr>");
                    i = i + 1;
                    IGSTAmt += data.IGSTAmt;
                    CGSTAmt += data.CGSTAmt;
                    SGSTAmt += data.SGSTAmt;
                    total += data.Total;
                });

                html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>Total</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + CGSTAmt + "</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + SGSTAmt + "</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + IGSTAmt + "</td>");
                html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>" + total + "</td></tr>");

                string AmountInWord = ConvertNumbertoWords((long)item.GrandTotal);
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Total Debit/Credit Note Value (in figure):</b>" + item.GrandTotal + "</td></tr>");
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Total Debit/Credit Note Value (in words):</b> " + AmountInWord + "</td></tr>");
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Remarks:</b>" + item.Remarks + "</td></tr>");

                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; font-size:9pt; margin-top:20px;'><tbody>");
                html.Append("<tr><td><span><br/></span></td></tr>");
                html.Append("<tr><th>Note:</th></tr>");
                html.Append("<tr><td colspan='12'><b>1.</b> The invoice issued earlier can be modified/cancelled by way of Debit Note/Credit Note.</td></tr>");
                html.Append("<tr><td colspan='12'><b>2.</b> Credit Note is to be issued where excess amount cliamed in original invoice.</td></tr>");
                html.Append("<tr><td colspan='12'><b>3.</b> Debit Note is to be issued where less amount claimed in original invoice.</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; font-size:9pt; margin-top:20px;'><tbody>");
                html.Append("<tr><td><span><br/></span></td></tr>");
                html.Append("<tr><td colspan='6' width='80%'></td>");
                html.Append("<th colspan='5' width='50%'>Signature: ____________________________ <br/><br/> Name of the Signatory: __________________ <br/><br/> Designation/Status: ____________________</th></tr>");

                html.Append("<tr><td colspan='6' width='50%'>To, <br/> ____________________________ <br/>____________________________<br/>____________________________<br/><br/> Copy To: <br/> Duplicate Copy for RM, CWC,RO - <br/> 2.Triplicate Copy for Warehouse</td>");
                html.Append("<th colspan='6' width='50%'></th></tr>");


                html.Append("</tbody></table>");
                // html.Append("<div style='margin-top:10px;'><br/><br/><br/><br/></div>");
                // html.Append("<div style='margin-top:10px;'><br/><br/></div>");

                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                lstSB.Add(html.ToString());

            });



            var FileName = "BulkDebitReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
            var location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
            if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
            {
                System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }
        #endregion
        #region BulkCreaditNoteReport
        [HttpGet]
        public ActionResult BulkCreaditNoteReport()
        {

            //ExportRepository objExport = new ExportRepository();
            //objExport.GetPaymentParty();
            //if (objExport.DBResponse.Status > 0)
            //    ViewBag.PaymentParty = JsonConvert.SerializeObject(objExport.DBResponse.Data);
            //else
            //    ViewBag.PaymentParty = null;
            return PartialView();
        }



        [NonAction]
        public string GenerateDRNotePDF(PrintModelOfBulkCrCompany objCR, string note)
        {
            Einvoice obj = new Einvoice();

            List<string> lstSB = new List<string>();

            string SACCode = "";
            objCR.lstCharges.Select(x => new { SACCode = x.SACCode }).Distinct().ToList().ForEach(item =>
            {
                if (SACCode == "")
                    SACCode = item.SACCode;
                else
                    SACCode = SACCode + "," + item.SACCode;
            });

            objCR.lstCrParty.ToList().ForEach(item =>
            {

                //    /*Header Part*/
                StringBuilder html = new StringBuilder();

                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");
                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");

                html.Append("<tr>");

                html.Append("<td width='90%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                //html.Append("<tr><td width='60%' valign='top'><img align='right' src='IMGSRC'/></td>");
                // html.Append("<td width='300%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size: 7pt; padding-bottom: 10px;'>" + objCR.CompanyAddress + "</span><br/><label style='font-size: 7pt;'>Email - cwcwfdcfs@gmail.com</label></td>");
                //html.Append("<td width='60%' valign='top'><img width='80px' align='right' src='ISO_IMG'/></td></tr>");
                html.Append("<tr><td width='800%' valign='top' align='center'><label style='font-size: 10pt; font-weight: bold;'>Principle Place of Business: <span style='border-bottom: 1px solid #000;'>______________________</span></label><br /><label style='font-size: 10pt; font-weight: bold;'>" + note + "</label></td></tr>");

                html.Append("<tr><td colspan='12' valign='top' style='font-size:8pt;'><b>IRN :</b> " + item.irn + "  </td></tr>");
                html.Append("</tbody></table></td>");

                if (item.SignedQRCode == "")
                { }
                else
                {
                    if (item.SupplyType == "B2C")
                    {
                        html.Append("<td align='left' valign='top'><img align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");

                    }
                    else
                    {
                        html.Append("<td align='left' valign='top'><img align='right' src='" + LoadImage(obj.GenerateQCCode(item.SignedQRCode)) + "'/> </td>");

                    }
                }







                html.Append("<td align='left' valign='top'><img valign='top' align='right' src=''/> </td>");

                html.Append("</tr>");

                html.Append("</tbody></table>");
                html.Append("</td></tr>");

                //html.Append("<tr><td colspan='1' width='10%' valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                //html.Append("<td colspan='8' width='90%' width='100%' valign='top' align='center'><h1 style='font-size: 20px; line-height: 30px;margin: 0; padding: 0;'>" + objCR.CompanyName + "</h1>");
                //html.Append("<label style='display: block; font-size: 13px; line-height: 22px;'>(A Govt. of India Undertaking) </label><br />");
                //html.Append("<span style='font-size: 12px; padding-bottom: 10px;'>" + objCR.CompanyAddress + "</span>");
                //html.Append("<br /><label style='font-size: 14px; font-weight:bold;'></label>");
                //html.Append("</td></tr>");

                html.Append("</tbody></table>");

                html.Append("<table cellpadding='0' cellspacing='0' style='table-layout: fixed; width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif;'><tbody>");
                html.Append("<tr>");
                html.Append("<td colspan='6' cellspacing='0' style='width:50%; border-right: 1px solid #000;'>");
                html.Append("<table cellspacing='0' style='width:100%;font-size:8pt;'><tbody>");
                html.Append("<tr><th cellpadding='10' style='border-bottom: 1px solid #000;'>Details of Service Provider</th></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Name:</b>" + objCR.CompanyName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Warehouse Address:</b>" + objCR.CompanyAddress + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>City:</b>" + objCR.CompCityName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State:</b>" + objCR.CompStateName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State Code:</b>" + objCR.CompStateCode + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>GSTIN:</b> " + objCR.CompGstIn + "</td></tr>");
                html.Append("<tr><td cellpadding='10'><b>PAN:</b>" + objCR.CompPan + "</td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");

                html.Append("<td colspan='6' cellspacing='0' Valign='top' style='width:50%;'>");
                html.Append("<table cellspacing='0' style='width:100%;font-size:8pt;'><tbody>");
                html.Append("<tr><th cellpadding='10' style='border-bottom: 1px solid #000;'>Details of Service Receiver</th></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Name:</b> " + item.PartyName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>Address:</b> " + item.PartyAddress + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>City:</b>" + item.PartyCityName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State:</b>" + item.PartyStateName + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>State Code:</b> " + item.PartyStateCode + "</td></tr>");
                html.Append("<tr><td cellpadding='10' style='border-bottom: 1px solid #000;'><b>GSTIN(if registered):</b> " + item.PartyGSTIN + "</td></tr>");
                html.Append("<tr><td cellpadding='10'></td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='6' cellspacing='0' style='width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif; margin-top:20px;'><tbody>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Debit/Credit Note Serial No :</b> " + item.CRNoteNo + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Accounting Code of</b> " + SACCode + "</td></tr>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Date of Issue :</b> " + Convert.ToDateTime(item.CRNoteDate).ToString("dd/MM/yyyy") + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Description of Services :</b> Other Storage & Warehousing Services</td></tr>");
                html.Append("<tr><td colspan='6' style='width:50%;'><b>Original Bill of Supply/Tax Invoice No :</b>  " + item.InvoiceNo + "</td> <td colspan='6' style='width:50%; text-align: right;'><b>Date :</b>  " + Convert.ToDateTime(item.InvoiceDate).ToString("dd/MM/yyyy") + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; border:1px solid #000; font-size:8pt; font-family:Verdana,Arial,San-serif; margin-top:20px;'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Sl No.</th>");
                html.Append("<th colspan='1' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>Particulars</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>Taxable Value</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>Total Amount</th></tr>");
                html.Append("<tr><th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>Reason for increase/decrease in original invoice</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                int i = 1;
                decimal IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
                decimal total = 0;
                objCR.lstCharges.Where(y => y.CRNoteId == item.CRNoteId).ToList().ForEach(data =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + i + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'>" + data.ChargeName + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>" + data.Taxable + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.CGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.CGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.SGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.SGSTAmt + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.IGSTPer + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + data.IGSTAmt + "</td>");

                    html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>" + data.Total + "</td></tr>");
                    i = i + 1;
                    IGSTAmt += data.IGSTAmt;
                    CGSTAmt += data.CGSTAmt;
                    SGSTAmt += data.SGSTAmt;
                    total += data.Total;
                });

                html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 300px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>Total</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + CGSTAmt + "</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + SGSTAmt + "</td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'></td>");
                html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>" + IGSTAmt + "</td>");
                html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>" + total + "</td></tr>");

                string AmountInWord = ConvertNumbertoWords((long)item.GrandTotal);
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Total Debit/Credit Note Value (in figure):</b>" + item.GrandTotal + "</td></tr>");
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Total Debit/Credit Note Value (in words):</b> " + AmountInWord + "</td></tr>");
                html.Append("<tr><td style='border-bottom: 1px solid #000; font-size: 10px; text-align: left; padding: 5px;' colspan='10'><b>Remarks:</b>" + item.Remarks + "</td></tr>");

                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; font-size:9pt; margin-top:20px;'><tbody>");
                html.Append("<tr><td><span><br/></span></td></tr>");
                html.Append("<tr><th>Note:</th></tr>");
                html.Append("<tr><td colspan='12'><b>1.</b> The invoice issued earlier can be modified/cancelled by way of Debit Note/Credit Note.</td></tr>");
                html.Append("<tr><td colspan='12'><b>2.</b> Credit Note is to be issued where excess amount cliamed in original invoice.</td></tr>");
                html.Append("<tr><td colspan='12'><b>3.</b> Debit Note is to be issued where less amount claimed in original invoice.</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table cellpadding='5' cellspacing='0' style='width:100%; font-size:9pt; margin-top:20px;'><tbody>");
                html.Append("<tr><td><span><br/></span></td></tr>");
                html.Append("<tr><td colspan='6' width='80%'></td>");
                html.Append("<th colspan='5' width='50%'>Signature: ____________________________ <br/><br/> Name of the Signatory: __________________ <br/><br/> Designation/Status: ____________________</th></tr>");

                html.Append("<tr><td colspan='6' width='50%'>To, <br/> ____________________________ <br/>____________________________<br/>____________________________<br/><br/> Copy To: <br/> Duplicate Copy for RM, CWC,RO - <br/> 2.Triplicate Copy for Warehouse</td>");
                html.Append("<th colspan='6' width='50%'></th></tr>");


                html.Append("</tbody></table>");
                // html.Append("<div style='margin-top:10px;'><br/><br/><br/><br/></div>");
                // html.Append("<div style='margin-top:10px;'><br/><br/></div>");

                //html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                lstSB.Add(html.ToString());

            });



            var FileName = "BulkDebitReport" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty) + ".pdf";
            var location = Server.MapPath("~/Docs/") + Session.SessionID + "/" + FileName;
            if (!System.IO.Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
            {
                System.IO.Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
            }
            /*if (System.IO.File.Exists(location))
            {
                System.IO.File.Delete(location);
            }*/
            using (var rp = new ReportingHelper(PdfPageSize.A4, 20f, 20f, 20f, 20f, false, true))
            {
                rp.HeadOffice = "";
                rp.HOAddress = "";
                rp.ZonalOffice = "";
                rp.ZOAddress = "";
                rp.GeneratePDF(location, lstSB);
            }
            return "/Docs/" + Session.SessionID + "/" + FileName;
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult PrintCRNote(FormCollection fc)
        {
            //objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            Hdb_ReportRepository objRepo = new Hdb_ReportRepository();
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();
            string Note = "CREDIT NOTE";

            objRepo.PrintDetailsForBulkCRNote(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"), "C");
            if (objRepo.DBResponse.Data != null)
            {
                objCR = (PrintModelOfBulkCrCompany)objRepo.DBResponse.Data;
                string Path = GenerateDRNotePDF(objCR, Note);
                return Json(new { Status = 1, Message = Path });
            }
            else
            {
                return Json(new { Status = -1, Message = "error" });
            }
        }
        #endregion
        public string ConvertNumbertoWords(long number)
        {
            if (number == 0) return "ZERO";
            if (number < 0) return "minus " + ConvertNumbertoWords(Math.Abs(number));
            string words = "";
            if ((number / 1000000) > 0)
            {
                words += ConvertNumbertoWords(number / 100000) + " LAKHS ";
                number %= 1000000;
            }
            if ((number / 1000) > 0)
            {
                words += ConvertNumbertoWords(number / 1000) + " THOUSAND ";
                number %= 1000;
            }
            if ((number / 100) > 0)
            {
                words += ConvertNumbertoWords(number / 100) + " HUNDRED ";
                number %= 100;
            }
            //if ((number / 10) > 0)  
            //{  
            // words += ConvertNumbertoWords(number / 10) + " RUPEES ";  
            // number %= 10;  
            //}  
            if (number > 0)
            {
                //if (words != "") words += "AND ";
                var unitsMap = new[]
                {
            "ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN"
        };
                var tensMap = new[]
                {
            "ZERO", "TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY"
        };
                if (number < 20) words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0) words += " " + unitsMap[number % 10];
                }
            }
            return words;
        }
        //public string LoadImage(string img)
        //{
        //    ////data:image/gif;base64,
        //    ////this image is a single pixel (black)
        //    //byte[] bytes = Convert.FromBase64String(img);

        //    //Image image;
        //    //using (MemoryStream ms = new MemoryStream(bytes))
        //    //{
        //    // image = Image.FromStream(ms);
        //    //}






        //    string strm = img;

        //    //this is a simple white background image
        //    var myfilename = string.Format(@"{0}", Guid.NewGuid());

        //    //Generate unique filename
        //    string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
        //    var bytess = Convert.FromBase64String(strm);
        //    using (var imageFile = new FileStream(filepath, FileMode.Create))
        //    {
        //        imageFile.Write(bytess, 0, bytess.Length);
        //        imageFile.Flush();
        //    }


        //    string targetpath = Server.MapPath("~/Docs/QRCode/") + myfilename + "crop" + ".jpeg";
        //    String newfilepath = ResizeImage(filepath, targetpath);
        //    return newfilepath;
        //}

        //public string ResizeImage(String Source, String Target)
        //{
        //    // string imgPath = @"D:\TESTPROJECT\Einvoice\CwcExim\CwcExim\Content\Images1\49dc6397-31bb-43d7-b4d0-2db8f04f57c8.png";
        //    // string imgPathTarget = @"D:\TESTPROJECT\Einvoice\CwcExim\CwcExim\Content\InvQrcode2.png";
        //    Bitmap source = new Bitmap(Source);
        //    Bitmap t = CropWhiteSpace(source);
        //    t.Save(Target);

        //    return (Target);
        //}
        //public Bitmap CropWhiteSpace(Bitmap bmp)
        //{
        //    int w = bmp.Width;
        //    int h = bmp.Height;
        //    int white = 0xffffff;

        //    Func<int, bool> allWhiteRow = r =>
        //    {
        //        for (int i = 0; i < w; ++i)
        //            if ((bmp.GetPixel(i, r).ToArgb() & white) != white)
        //                return false;
        //        return true;
        //    };

        //    Func<int, bool> allWhiteColumn = c =>
        //    {
        //        for (int i = 0; i < h; ++i)
        //            if ((bmp.GetPixel(c, i).ToArgb() & white) != white)
        //                return false;
        //        return true;
        //    };

        //    int topmost = 0;
        //    for (int row = 0; row < h; ++row)
        //    {
        //        if (!allWhiteRow(row))
        //            break;
        //        topmost = row;
        //    }

        //    int bottommost = 0;
        //    for (int row = h - 1; row >= 0; --row)
        //    {
        //        if (!allWhiteRow(row))
        //            break;
        //        bottommost = row;
        //    }

        //    int leftmost = 0, rightmost = 0;
        //    for (int col = 0; col < w; ++col)
        //    {
        //        if (!allWhiteColumn(col))
        //            break;
        //        leftmost = col;
        //    }

        //    for (int col = w - 1; col >= 0; --col)
        //    {
        //        if (!allWhiteColumn(col))
        //            break;
        //        rightmost = col;
        //    }

        //    if (rightmost == 0) rightmost = w; // As reached left
        //    if (bottommost == 0) bottommost = h; // As reached top.

        //    int croppedWidth = rightmost - leftmost;
        //    int croppedHeight = bottommost - topmost;

        //    if (croppedWidth == 0) // No border on left or right
        //    {
        //        leftmost = 0;
        //        croppedWidth = w;
        //    }

        //    if (croppedHeight == 0) // No border on top or bottom
        //    {
        //        topmost = 0;
        //        croppedHeight = h;
        //    }

        //    try
        //    {
        //        var target = new Bitmap(croppedWidth, croppedHeight);
        //        using (Graphics g = Graphics.FromImage(target))
        //        {
        //            g.DrawImage(bmp,
        //            new RectangleF(0, 0, croppedWidth, croppedHeight),
        //            new RectangleF(leftmost, topmost, croppedWidth, croppedHeight),
        //            GraphicsUnit.Pixel);
        //        }
        //        return target;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new Exception(
        //        string.Format("Values are topmost={0} btm={1} left={2} right={3} croppedWidth={4} croppedHeight={5}", topmost, bottommost, leftmost, rightmost, croppedWidth, croppedHeight),
        //        ex);
        //    }
        //}

        #region E-Invoice Excel Generation

        [HttpGet]
        public ActionResult RegisterOfEInvoice()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public FileResult EInvoiceExcel(FormCollection fc)
        {
            try
            {
                var date1 = Convert.ToDateTime(fc["PeriodFrom"].ToString());
                var date2 = Convert.ToDateTime(fc["PeriodTo"].ToString());
                var excelName = "";
                var ObjRR = new Kdl_ReportRepository();
                ObjRR.GetRegisterofEInvoice(date1, date2);

                excelName = "EInvoice.xls";

                if (!string.IsNullOrEmpty(ObjRR.DBResponse.Data.ToString()))
                    return File(ObjRR.DBResponse.Data.ToString(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelName);
                else
                {
                    string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                    var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xls");
                    using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                    {
                        exl.AddCell("A1", "No data found");
                        exl.Save();
                        return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelName);
                    }
                }
            }
            catch
            {
                string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xlsx");
                using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                {
                    exl.AddCell("A1", "No data found");
                    exl.Save();
                    return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "EInvoice.xls");
                }
            }
            // return null;
        }

        #endregion

        #region Bulk IRN Generation

        [HttpGet]
        public ActionResult BulkIRNGeneration()
        {
            //WFLD_ReportRepository objPpgRepo = new WFLD_ReportRepository();
            //objPpgRepo.GetBulkIrnDetails();
            //if (objPpgRepo.DBResponse.Status > 0)
            //    ViewBag.InvoiceList = JsonConvert.SerializeObject(objPpgRepo.DBResponse.Data);
            //else
            //    ViewBag.InvoiceList = null;
            return PartialView();
        }

        [HttpPost]
        public JsonResult GetBulkIrnDetails()
        {
            Kdl_ReportRepository objPpgRepo = new Kdl_ReportRepository();
            objPpgRepo.GetBulkIrnDetails();
            var Output = (KDL_BulkIRN)objPpgRepo.DBResponse.Data;

            return Json(Output, JsonRequestBehavior.AllowGet);
        }

        public async Task<JsonResult> AddEditBulkIRN(FormCollection objForm)
        {
            Kdl_CWCImportController objkdlImp = new Kdl_CWCImportController();
            Kdl_CashManagementController objkdlCash = new Kdl_CashManagementController();

            try
            {
                var invoiceData = JsonConvert.DeserializeObject<VRN_BulkIRN>(objForm["PaymentSheetModelJson"]);

                foreach (var item in invoiceData.lstPostPaymentChrg)
                {
                    try
                    {
                        if (item.InvoiceType == "Inv")
                        {
                            var result = await objkdlImp.GetIRNForYardInvoice(item.InvoiceNo, item.SupplyType);
                        }
                        else if (item.InvoiceType == "C")
                        {
                            var result1 = await objkdlCash.GetGenerateIRNCreditNote(item.InvoiceNo, item.SupplyType, "CRN", "C");
                        }
                        else if (item.InvoiceType == "D")
                        {
                            var result2 = await objkdlCash.GetGenerateIRNCreditNote(item.InvoiceNo, item.SupplyType, "DBN", "D");
                        }
                    }
           
                     catch (Exception ex)
            {
                continue;
            }
        }
                
                return Json(new { Status = 1, Message = "IRN Generated" });

            }
            catch (Exception ex)
            {
                var Err = new { Status = -1, Message = "Error" };
                return Json(Err);
            }
        }

        #endregion


        public string LoadImage(string img)
        {

            if (img != "")
            {

                string strm = img;

                //this is a simple white background image
                var myfilename = string.Format(@"{0}", Guid.NewGuid());

                //Generate unique filename
                string filepath = Server.MapPath("~/Docs/QRCode/") + myfilename + ".jpeg";
                var bytess = Convert.FromBase64String(strm);
                using (var imageFile = new FileStream(filepath, FileMode.Create))
                {
                    imageFile.Write(bytess, 0, bytess.Length);
                    imageFile.Flush();
                }


                string targetpath = Server.MapPath("~/Docs/QRCode/") + myfilename + "crop" + ".jpeg";
                String newfilepath = Utility.ResizeImage(filepath, targetpath);
                return newfilepath;
            }
            else
            {
                return "";

            }
        }


        #region OUTWardreristerKandla By Type
        [HttpGet]
        public ActionResult RegisterOfOutwardSupplyByType()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public FileResult RegisterOfOutwardSupplyByType(FormCollection fc)
        {
            try
            {
                var date1 = Convert.ToDateTime(fc["PeriodFrom"].ToString());
                var date2 = Convert.ToDateTime(fc["PeriodTo"].ToString());
                var Type = fc["ddlType"].ToString();
                var excelName = "";
                var ObjRR = new Kdl_ReportRepository();
                ObjRR.GetRegisterofOutwardSupplybyINVTYPE(date1, date2, Type);

                if (Type == "Inv") { Type = "Invoice"; }
                if (Type == "C") { Type = "Credit"; }
                if (Type == "D") { Type = "Debit"; }
                if (Type == "Unpaid") { Type = "Unpaid"; }
                if (Type == "CancelInv") { Type = "Cancel Invoice"; }

                excelName = "RegisterofOutwardSupply" + "_" + Type + ".xlsx";

                if (!string.IsNullOrEmpty(ObjRR.DBResponse.Data.ToString()))
                    return File(ObjRR.DBResponse.Data.ToString(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelName);
                else
                {
                    string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                    var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xlsx");
                    using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                    {
                        exl.AddCell("A1", "No data found");
                        exl.Save();
                        return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelName);
                    }
                }
            }
            catch
            {
                string name = DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
                var excelFile = Server.MapPath("~/Docs/Excel/" + name + ".xlsx");
                using (var exl = new DynamicExcel.ExcelGenerator(excelFile))
                {
                    exl.AddCell("A1", "No data found");
                    exl.Save();
                    return File(excelFile, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "RegisterofOutwardSupply.xlsx");
                }
            }
            // return null;
        }
        #endregion

        #region E04
        public ActionResult E04DetailsReport()
        {
            return PartialView();
        }

        [HttpGet]
        public ActionResult GetE04List()
        {
            Kdl_ReportRepository ObjER = new Kdl_ReportRepository();
            List<Kdl_E04Report> LstE04 = new List<Kdl_E04Report>();
            ObjER.ListofE04Report(0);
            if (ObjER.DBResponse.Data != null)
            {
                LstE04 = (List<Kdl_E04Report>)ObjER.DBResponse.Data;
            }
            return PartialView("ListOfE04DetailsReport", LstE04);
        }
        [HttpGet]
        public JsonResult LoadMoreE04List(int Page)
        {
            Kdl_ReportRepository ObjER = new Kdl_ReportRepository();
            var LstE04 = new List<Kdl_E04Report>();
            ObjER.ListofE04Report(Page);
            if (ObjER.DBResponse.Data != null)
            {
                LstE04 = (List<Kdl_E04Report>)ObjER.DBResponse.Data;
            }
            return Json(LstE04, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult ViewE04DetailsReport(int ID)
        {
            Kdl_E04Report ObjE04 = new Kdl_E04Report();
            Kdl_ReportRepository ObjER = new Kdl_ReportRepository();
            ObjER.GetE04DetailById(ID);
            if (ObjER.DBResponse.Data != null)
            {
                ObjE04 = (Kdl_E04Report)ObjER.DBResponse.Data;
            }
            return PartialView(ObjE04);
        }


        [HttpGet]
        public JsonResult GetE04Search(string SB_No = "", string SB_Date = "", string Exp_Name = "")
        {
            Kdl_ReportRepository ObjER = new Kdl_ReportRepository();
            List<Kdl_E04Report> LstE04 = new List<Kdl_E04Report>();
            ObjER.GetE04DetailSearch(SB_No, SB_Date, Exp_Name);
            if (ObjER.DBResponse.Data != null)
            {
                LstE04 = (List<Kdl_E04Report>)ObjER.DBResponse.Data;
            }
            //return PartialView("ListOfE04DetailsReport", LstE04);
            return Json(ObjER.DBResponse, JsonRequestBehavior.AllowGet);
        }

        #endregion
        #region Stuffing Acknowledgement Search       

        [HttpGet]
        public ActionResult StfAckSearch()
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();

            ObjGR.GetAllContainerNoForContstufserach("", 0);

            if (ObjGR.DBResponse.Data != null)
            {
                var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjGR.DBResponse.Data);
                var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                ViewBag.LstStuffing = Jobject["LstStuffing"];
                ViewBag.StateCont = Jobject["State"];
            }
            else
            {
                ViewBag.LstStuffing = null;
            }


            ObjGR.GetAllShippingBillNoForContstufserach("", 0);
            if (ObjGR.DBResponse.Data != null)
            {
                var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjGR.DBResponse.Data);
                var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                ViewBag.LstStuff = Jobject["LstStuff"];
                ViewBag.StateShipbill = Jobject["State"];
            }
            else
            {
                ViewBag.LstStuff = null;
            }

            return PartialView();
        }
        [HttpGet]
        public JsonResult SearchContainerNo(string cont)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllContainerNoForContstufserach(cont, 0);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult SearchShipbill(string shipbill)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllShippingBillNoForContstufserach(shipbill, 0);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult LoadContainerLists(string cont, int Page)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllContainerNoForContstufserach(cont, Page);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public JsonResult LoadShipbillLists(string shipbill, int Page)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllShippingBillNoForContstufserach(shipbill, Page);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult getcontstuffingacksearch(string container, string shipbill, string cfscode)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_ContStufAckRes> Lststufack = new List<Kdl_ContStufAckRes>();
            ObjGR.GetStufAckResult(container, shipbill, cfscode);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_ContStufAckRes>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region ASR Acknowledgement Search       

        [HttpGet]
        public ActionResult StuffingASRAckSearch()
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();

            //ObjGR.GetAllShippingBillNoForASRACK("", 0);
            //if (ObjGR.DBResponse.Data != null)
            //{
            //    var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjGR.DBResponse.Data);
            //    var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
            //    ViewBag.LstStuff = Jobject["LstStuff"];
            //    ViewBag.StateShipbill = Jobject["State"];
            //}
            //else
            //{
            //    ViewBag.LstStuff = null;
            //}

            return PartialView();
        }

        [HttpGet]
        public JsonResult ASRSearchContainerNo(string cont)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetCotainerNoForASRAck(cont, 0);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult ASRLoadContainerLists(string cont, int Page)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetCotainerNoForASRAck(cont, Page);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult ASRSearchShipbill(string shipbill)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllShippingBillNoForASRACK(shipbill, 0);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult ASRLoadShipbillLists(string shipbill, int Page)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            ObjGR.GetAllShippingBillNoForASRACK(shipbill, Page);
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult GetASRACKStatusSearch(string shipbill, string CFSCode, string container)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_ContStufAckRes> Lststufack = new List<Kdl_ContStufAckRes>();
            ObjGR.GetASRAckResult(shipbill, CFSCode, container);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_ContStufAckRes>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region DP Acknowledment Serach  

        [HttpGet]
        public ActionResult DPAckSearch()
        {
            return PartialView();
        }

        public JsonResult GetGatePassNoDPForAckSearch(string GatePassNo = "", int Page = 0)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_GatePassDPAckSearch> lstDPGPAck = new List<Kdl_GatePassDPAckSearch>();
            ObjGR.GetGatePassNoDPForAckSearch(GatePassNo, Page);
            //if (ObjGR.DBResponse.Data != null)
            //{
            //    lstDTGPAck = (List<Kdl_GatePassDTAckSearch>)ObjGR.DBResponse.Data;
            //}
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetContainerNoForDPAckSearch(string ContainerNo = "", int Page = 0)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_ContDPAckSearch> lstDPContACK = new List<Kdl_ContDPAckSearch>();
            ObjGR.GetContainerNoForDPAckSearch(ContainerNo, Page);
            //if (ObjGR.DBResponse.Data != null)
            //{
            //    lstDTContACK = (List<Kdl_ContDTAckSearch>)ObjGR.DBResponse.Data;
            //}
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetDPAckSearch(int GatePassId, string ContainerNo, int GatePassdtlId = 0)
        {

            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_DPAckRes> lstDPAckRes = new List<Kdl_DPAckRes>();
            ObjGR.GetDPAckSearch(GatePassId, ContainerNo, GatePassdtlId);

            if (ObjGR.DBResponse.Data != null)
            {
                lstDPAckRes = (List<Kdl_DPAckRes>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region DT Acknowledment Serach  

        [HttpGet]
        public ActionResult DTAckSearch()
        {
            return PartialView();
        }

        public JsonResult GetGatePassNoDTForAckSearch(string GatePassNo = "", int Page = 0)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_GatePassDTAckSearch> lstDTGPAck = new List<Kdl_GatePassDTAckSearch>();
            ObjGR.GetGatePassNoDTForAckSearch(GatePassNo, Page);

            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetContainerNoForDTAckSearch(string ContainerNo = "", int Page = 0)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_ContDTAckSearch> lstDTContACK = new List<Kdl_ContDTAckSearch>();
            ObjGR.GetContainerNoForDTAckSearch(ContainerNo, Page);

            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetDTAckSearch(int GatePassId, string ContainerNo)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_DTAckRes> lstDTAckRes = new List<Kdl_DTAckRes>();
            ObjGR.GetDTAckSearch(GatePassId, ContainerNo);

            if (ObjGR.DBResponse.Data != null)
            {
                lstDTAckRes = (List<Kdl_DTAckRes>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region Stuffing Loaded Search
        [HttpGet]
        public ActionResult StfLoadSearch()
        {
            ReportRepository ObjGR = new ReportRepository();

            /* ObjGR.GetAllContainerNoForContstufserach("", 0);

             if (ObjGR.DBResponse.Data != null)
             {
                 var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjGR.DBResponse.Data);
                 var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                 ViewBag.LstStuffing = Jobject["LstStuffing"];
                 ViewBag.StateCont = Jobject["State"];
             }
             else
             {
                 ViewBag.LstStuffing = null;
             }


             ObjGR.GetAllShippingBillNoForContstufserach("", 0);
             if (ObjGR.DBResponse.Data != null)
             {
                 var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjGR.DBResponse.Data);
                 var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                 ViewBag.LstStuff = Jobject["LstStuff"];
                 ViewBag.StateShipbill = Jobject["State"];
             }
             else
             {
                 ViewBag.LstStuff = null;
             }*/

            return PartialView();
        }
        /* [HttpGet]
         public JsonResult SearchContainerNo(string cont)
         {
             ReportRepository ObjGR = new ReportRepository();
             ObjGR.GetAllContainerNoForContstufserach(cont, 0);
             return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
         }
         [HttpGet]
         public JsonResult SearchShipbill(string shipbill)
         {
             ReportRepository ObjGR = new ReportRepository();
             ObjGR.GetAllShippingBillNoForContstufserach(shipbill, 0);
             return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
         }
         [HttpGet]
         public JsonResult LoadContainerLists(string cont, int Page)
         {
             ReportRepository ObjGR = new ReportRepository();
             ObjGR.GetAllContainerNoForContstufserach(cont, Page);
             return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
         }


         [HttpGet]
         public JsonResult LoadShipbillLists(string shipbill, int Page)
         {
             ReportRepository ObjGR = new ReportRepository();
             ObjGR.GetAllShippingBillNoForContstufserach(shipbill, Page);
             return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
         }*/
        [HttpGet]
        public JsonResult getloadstufsearch(string jobno)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_loadstuf> Lststufack = new List<Kdl_loadstuf>();
            ObjGR.GetStufloadResult(jobno);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_loadstuf>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult getloadstufasrsearch(string jobasrno)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_loadstufasr> Lststufack = new List<Kdl_loadstufasr>();
            ObjGR.GetStufloadasrResult(jobasrno);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_loadstufasr>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult getloadstufdpsearch(string jobdpno)
        {
            ReportRepository ObjGR = new ReportRepository();
            List<Kdl_loadstufdp> Lststufack = new List<Kdl_loadstufdp>();
            ObjGR.GetStufloaddpResult(jobdpno);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_loadstufdp>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult getloadstufdtsearch(string jobdtno)
        {
            Kdl_ReportRepository ObjGR = new Kdl_ReportRepository();
            List<Kdl_loadstufdt> Lststufack = new List<Kdl_loadstufdt>();
            ObjGR.GetStufloaddpResult(jobdtno);


            if (ObjGR.DBResponse.Data != null)
            {
                Lststufack = (List<Kdl_loadstufdt>)ObjGR.DBResponse.Data;
            }
            return Json(ObjGR.DBResponse, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region  Bond STORAGE COLLECTION REPORT 
        [HttpGet]
        public ActionResult BondStorageCollectionReport()
        {
            return PartialView();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult BondStorageCollectionReport(string FromDate, string ToDate)
        {
            try
            {
                var ObjRR = new Kdl_ReportRepository();
                ObjRR.BondStorageCollectionReport(FromDate, ToDate);
                if (ObjRR.DBResponse.Data != null)
                {
                    DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                    string Path = BondStorageCollectionReportPDF(ds, FromDate, ToDate);
                    return Json(new { Status = 1, Message = Path });

                }
                return Json(new { Status = -1, Message = "No data found" });
            }
            catch
            {
                return Json(new { Status = -1, Message = "Error" });
            }
        }
        [NonAction]
        public string BondStorageCollectionReportPDF(DataSet ds, string FromDate, string ToDate)
        {
            try
            {
                var FileName = "BondStorageCollectionReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='70%' valign='top' align='center'><h1 style='font-size: 16px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 7pt;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:7pt;'>" + ds.Tables[0].Rows[0]["CompanyAddress"].ToString() + "<br/>Email : " + ds.Tables[0].Rows[0]["EmailAddress"].ToString() + "</span><br/><label style='font-size: 7pt; font-weight:bold;'>Bond Storage Collection REGISTER</label><br/><label style='font-size: 7pt;'><b>From Date :</b> " + FromDate + " - <b>To Date :</b> " + ToDate + "</label></td>");
                Pages.Append("<td valign='top'><img align='right' src='ISO_IMG' width='100'/></td>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");
                Pages.Append("</td></tr>");
                Pages.Append("</thead></table>");

                int i = 1;
                decimal StoAmount = 0;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; border-bottom:0; font-size:7pt; text-align: center;'>");
                Pages.Append("<thead><tr>");
                Pages.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 5%;'>Sl No.</th>");
                Pages.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; width: 10%;'>Date</th>");
                Pages.Append("<th style='border-bottom: 1px solid #000; width: 10%;'>Storage Amount</th>");
                Pages.Append("</tr></thead>");
                Pages.Append("<tbody>");
                ds.Tables[0].AsEnumerable().ToList().ForEach(item =>
                {
                    Pages.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + i + "</td>");
                    Pages.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + item["Date"].ToString() + " </td>");
                    Pages.Append("<td style='border-bottom: 1px solid #000;'>" + item["Amount"].ToString() + "</td>");
                    Pages.Append("</tr>");
                    StoAmount = StoAmount + Convert.ToDecimal(item["Amount"]);
                    i++;
                });
                Pages.Append("<tr>");
                Pages.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; text-align:left;'>TOTAL</th>");
                Pages.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000;'>" + StoAmount + "</th></tr>");

                Pages.Append("</tbody></table>");

                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                Pages.Replace("ISO_IMG", Server.MapPath("~/Content/Images/iso_logo.jpg"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                //if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                //{
                //    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                //}
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO_IMG", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch (Exception ex)
            {
                return "";
            }
        }
        #endregion



        #region PDUtilizationSummary



        /*Invoice Report Detai;s Section-06.11.2017*/
        [HttpGet]
        public ActionResult DailySDCollectionReport()
        {
            //Login ObjLogin = (Login)Session["LoginUser"];
            //ViewBag.DistList = null;
            //Ppg_ReportRepository ObjReport = new Ppg_ReportRepository();
            //ObjReport.GetDistricts(ObjLogin.Uid);
            //if (ObjReport.DBResponse.Data != null)
            //{
            //    var JObj = JObject.Parse(JsonConvert.SerializeObject(ObjReport.DBResponse.Data));
            //    ViewBag.DistList = new SelectList(JObj["Dist"], "DistrictId", "DistrictName");
            //}

            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetSDCollectionUtilizationReport(DailyCashBook vm)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            List<PdSummary> LstPdSummary = new List<PdSummary>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.DailySDCollection(vm);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                LstPdSummary = (List<PdSummary>)ObjRR.DBResponse.Data;
                string Path = GeneratePDFSDDetReport(LstPdSummary, vm.PeriodFrom, vm.PeriodTo, Convert.ToDateTime(vm.PeriodFrom), Convert.ToDateTime(vm.PeriodTo));
                ObjRR.DBResponse.Status = 1;
                ObjRR.DBResponse.Message = Path;
                return Json(ObjRR.DBResponse);
            }
            else
            {
                return Json(ObjRR.DBResponse);
            }

        }


        [NonAction]
        public string GeneratePDFSDDetReport(List<PdSummary> SDData, string FromDate, string ToDate,DateTime fromdate,DateTime todate)
        {
            try
            {
                var FileName = "SdReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
                //***************************************************************************************

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>CFS Kandla</span><br/><label style='font-size: 14px; font-weight:bold;'>Daily SD Collection From " + FromDate + " To " + ToDate + "</label></td></tr>");
                Pages.Append("</tbody></table>");
                Pages.Append(" </td></tr>");
                Pages.Append("</thead>");

              
                Pages.Append("</table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
                Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>DATE</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>PARTY NAME</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>AMOUNT</th>");
                Pages.Append("</tr></thead>");
                Pages.Append("<tbody>");
                decimal MainTotal = 0M;
                while (fromdate<=todate)
                {

                    decimal subTotal = 0M;
                  
                    int flag = 0;
                    SDData.ForEach(item =>
                    {
                        if(item.PeriodFrom==fromdate.ToString("yyyy/MM/dd"))
                        {
                            Pages.Append("<tr>");
                           
                            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:left;'>" + item.ReceiptDate + "</td>");
                            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:left;'>" + item.PartyName + "</td>");
                            Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:right;'>" + item.Amount + "</td>");
                            Pages.Append("</tr>");
                            subTotal = subTotal+ Convert.ToDecimal(item.Amount);
                            MainTotal = MainTotal+ Convert.ToDecimal(item.Amount);
                            flag =1;
                        }
                       
                    });
                    if(flag==1)
                    {
                        Pages.Append("<tr>");
                        Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:left;'>Total</td>");
                        Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:left;'></td>");
                        Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:right;font-weight: bold;'>" + subTotal + "</td>");
                        Pages.Append("</tr>");
                    }



                    fromdate = fromdate.AddDays(1);
                }




               
                Pages.Append("<tr>");
                Pages.Append("<th style='border-right:1px solid #000;width:8%;text-align:left;'>Total :</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:8%;text-align:right;'></th>");
                Pages.Append("<th style='width:12%;text-align:right;'>"+ MainTotal + "</th>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
                Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
                Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
                Pages.Append("</tbody></table>");

                //***************************************************************************************
                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO_IMG", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }




        //[HttpPost, ValidateInput(false)]
        //[CustomValidateAntiForgeryToken]
        //public JsonResult GeneratePdSummaryUtilizationPDF(FormCollection fc)
        //{
        //    try
        //    {

        //        //string SubDomain = System.Configuration.ConfigurationManager.AppSettings["SubDomain"];
        //        // string FtpIdPath = "";
        //        //string LocalIdPath = "";
        //        var Pages = new string[1];
        //        var FileName = "SdSummary.pdf";
        //        Pages[0] = fc["Page"].ToString();
        //        // var GovtImg = Server.MapPath("~/Content/Images/gov.png");
        //        //Pages[0] = fc["Page"].ToString().Replace("GOVT_IMG", GovtImg).Replace("MODEL", DateTime.Today.ToShortDateString()).Replace("DIR/DED.............", fc["WaiverOrderNo"]);
        //        //int WavOrdrIssueId = Convert.ToInt32(fc["WavOrdrIssueId"]);
        //        //FtpIdPath = "WBDED/Docs/Waiver/WaiverOrder/" + WavOrdrIssueId;
        //        // LocalIdPath = Server.MapPath("~/Docs") + "/Report/RenewalPending/";
        //        string LocalDirectory = Server.MapPath("~/Docs") + "/" + Session.SessionID + "/Report/SdSummary/";
        //        if (!Directory.Exists(LocalDirectory))
        //            Directory.CreateDirectory(LocalDirectory);
        //        using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, true))
        //        {
        //            ObjPdf.HeadOffice = this.HeadOffice;
        //            ObjPdf.HOAddress = this.HOAddress;
        //            ObjPdf.ZonalOffice = this.ZonalOffice;
        //            ObjPdf.ZOAddress = this.ZOAddress;
        //            ObjPdf.GeneratePDF(LocalDirectory + FileName, Pages);

        //        }
        //        var ObjResult = new { Status = 1, Message = "/Docs/" + Session.SessionID + "/Report/SdSummary/" + FileName };
        //        return Json(ObjResult);

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { Status = "-1", Message = "", }, JsonRequestBehavior.DenyGet);
        //    }

        //}

        #endregion


        #region PDA Receipt Print

        [HttpPost]
        // [ValidateAntiForgeryToken]
        public JsonResult GetPDAReceiptReportNew(BulkReceiptReport ObjBulkReceiptReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetBulkPDACashreceipt(ObjBulkReceiptReport.PeriodFrom, ObjBulkReceiptReport.PeriodTo, ObjBulkReceiptReport.ReceiptNumber);
            if (ObjRR.DBResponse.Status == 1)
            {
                DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                string Path = GeneratePDAReceiptReport(ds);
                return Json(new { Status = 1, Message = Path });
            }
            return Json(new { Status = 0, Message = "No Data Found" });
        }
        [NonAction]
        public string GeneratePDAReceiptReport(DataSet ds)
        {
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
           
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
           
            List<string> lstSB = new List<string>();

            int i = 0;
          
                StringBuilder html = new StringBuilder();

                //Page Header
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'><tbody>");

                html.Append("<tr><td colspan='12'>");
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:8pt;'><tbody>");
                html.Append("<tr><th style='width:20%;'><img style='width:50%;' src='ImgLeft'/></th><th style='width:60%;'></th><th style='width:20%;'><img style='width:70%;' src='ImgRight'/></th></tr><tr><th colspan='3' style='text-align:center;vertical-align:bottom;'>CENTRAL WAREHOUSING CORPORATION<br />(A GOVT. OF INDIA UNDERTAKING)</th></tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr>");

                html.Append("<tr><td colspan='12' width='50%' style='text-align:center;'>Cash Deposit to PD Account Voucher</td></tr>");
             //   html.Append("<td colspan='6' width='50%' align='right'>" + objCompany[0].CompanyAddress + "</td></tr>");

            

                html.Append("<tr>");
                html.Append("<td colspan='4' width='33.33333333333333%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>");
                html.Append("<tr><td><b>Receipt No. : </b>" + lstInvoice[0].PdaTranRecNo + "</td></tr>");
                html.Append("<tr><td><b>Payee Name :</b>" + lstInvoice[0].EximTraderName + "</td></tr>");
                html.Append("<tr><td><b>Address: </b>" + lstInvoice[0].Address + "</td></tr>");
                html.Append("<tr><td><b>Folio No. : </b>" + lstInvoice[0].FolioNo + "</td></tr>");
                html.Append("</tbody></table></td>");
                html.Append("<td colspan='6' width='50%'><table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>");
                html.Append("<tr><th>Dated : :</th> <td>" + lstInvoice[0].PdaTransDate + "</td></tr>");
               
                html.Append("</tbody></table></td>");
                html.Append("</tr>");

               

                html.Append("<tr><td colspan='12'><table cellspacing='0' cellpadding='5' style='border:1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:7.5pt;'>");
                html.Append("<thead><tr><th style='border-right: 1px solid #000;'>Mode</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Drawee Bank</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Instrument No</th>");
                html.Append("<th style='border-right: 1px solid #000;'>Date</th>");
                html.Append("<th style='text-align:right;'>Amount</th></tr></thead>");
                html.Append("<tbody>");
            lstInvoice.ToList().ForEach(item =>
            {
                html.Append("<tr><td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + item.PdaPayType + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + item.PdaDrawBank + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + item.PdaInsNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-top: 1px solid #000;'>" + item.PdaChequeDate + "</td>");
                    html.Append("<td style='border-top: 1px solid #000; text-align:right;'>" + item.Amount + "</td></tr>");
            });
            html.Append("</tbody>");
                html.Append("</table></td></tr>");

             //   html.Append("<tr><td colspan='12'><b>CASHIER REMARKS :</b> " + item.Remarks + "</td></tr>");

                html.Append("<tr><td><br/><br/><br/><br/></td></tr>");
                html.Append("<tr>");
                html.Append("<th colspan='4' width='33.33333333333333%' align='left'>Received By :</th>");
                //html.Append("<th colspan='4' width='33.33333333333333%' align='center'>AM (A/cs)</th>");
                //html.Append("<th colspan='4' width='33.33333333333333%' align='right'>Manager (CFS)</th>");
                html.Append("</tr>");
                
                html.Append("</tbody></table>");

                html = html.Replace("ImgLeft", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                html = html.Replace("ImgRight", Server.MapPath("~/Content/Images/SwachhBharat-Logo.png"));
                lstSB.Add(html.ToString());
           
            var type = "bulkreport";
            var id = "BulkReceipt" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
            var fileName = id + ".pdf";
            string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
            if (!Directory.Exists(PdfDirectory))
                Directory.CreateDirectory(PdfDirectory);
            using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
            {
                rh.HeadOffice = "";
                rh.HOAddress = "";
                rh.ZonalOffice = "";
                rh.ZOAddress = "";
                rh.GeneratePDF(PdfDirectory + fileName, lstSB);
            }
            return "/Docs/" + type + "/" + fileName;
        }

        #endregion



        #region Bulk Invoice Print New External User

        public ActionResult BulkInvoiceReportNewExternalUser()
        {
            return View();
        }

        [HttpPost]
        //[ValidateAntiForgeryToken]
        public JsonResult GetBulkInvoiceReportNewExternalUser(BulkInvoiceReport ObjBulkInvoiceReport)
        {
            if (ObjBulkInvoiceReport.InvoiceNumber == null)
            {
                ObjBulkInvoiceReport.InvoiceNumber = "";
            }
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();





            Login objLogin = (Login)Session["LoginUser"];
            //When Module is selected All Condition against a party


            if (ObjBulkInvoiceReport.InvoiceModule == "All")
            {
                string ModuleName = "";
                //delete all the files in the folder before creating it
                if (System.IO.Directory.Exists(Server.MapPath("~/Docs/All/") + Session.SessionID))
                {
                    string deletelocation = Server.MapPath("~/Docs/All/") + Session.SessionID + "/";
                    DeleteDirectory(deletelocation);
                }

                ObjBulkInvoiceReport.PartyId = objLogin.Uid;
                //get all the distinct invoice module and invoices list with respect to party and date range 
                ObjRR.ModuleListWithInvoiceForExternalUser(ObjBulkInvoiceReport);
                if (ObjRR.DBResponse.Status == 1)
                {
                    DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                    List<dynamic> lstModule = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
                    IList lstDistModule = lstModule.Select(x => x.Module).Distinct().ToList();

                    string FilePath = "";


                    foreach (string Mod in lstDistModule)
                    {
                        //lstModule.Where(x => x.Module == Mod).ToList().ForEach(itemInv =>
                        //{
                        //    String ModuleName= itemInv.Module;
                        switch (Mod)
                        {
                            //Here ds is list of invoice of a module between two dates 
                            case "IMPYard":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "ASSESSMENT SHEET FCL";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforYard((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "IMPDeli":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "ASSESSMENT SHEET LCL";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforGodown((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "EXPLod":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "LOADED CONTAINER PAYMENT SHEET";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforEXPLod((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "EXP":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER MOVEMENT";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforEXP((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "IMPDest":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CCIN ENTRY";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforIMPDest((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BTT":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "BTT";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBTT((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                            case "ECYard":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "EMPTY CONTAINER PAYMENT SHEET";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECYard((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                            case "ECGodn":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "Empty Container Godown";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECGodn((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "CC":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CARGO SHIFTING";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforCC((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BND":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "FUMIGATION";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBND((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BNDadv":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "EXPORT CONTAINER STUFFING";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforContainerBNDadv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "BNDUnld":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "IMPORT TRAIN SUMMARY";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforBNDUnld((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "MiscInv":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforMiscInv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "Rent":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforMiscInv((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;
                            case "ECOut":
                                ObjBulkInvoiceReport.InvoiceModule = Mod;
                                ModuleName = "CONTAINER DEBIT INVOICE";
                                ObjBulkInvoiceReport.All = "All";
                                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);
                                FilePath = GeneratingBulkPDFforECOut((DataSet)ObjRR.DBResponse.Data, ModuleName, ObjBulkInvoiceReport.All);
                                break;

                        }


                    }
                    return Json(new { Status = 1, Data = FilePath });
                }
                else
                    return Json(new { Status = -1, Data = "No Record Found." });
            }

            else
            {

                ObjRR.GenericBulkInvoiceDetailsForPrintForExternalUser(ObjBulkInvoiceReport);//, objLogin.Uid

                //if (ObjRR.DBResponse.Status == 1)
                //{

                DataSet ds = (DataSet)ObjRR.DBResponse.Data;

                string FilePath = "";
                switch (ObjBulkInvoiceReport.InvoiceModule)
                {
                    case "IMPYard":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforYard(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "IMPDeli":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforGodown(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "EXPLod":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforEXPLod(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "EXP":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforEXP(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "IMPDest":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforIMPDest(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BTT":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBTT(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;

                    case "ECYard":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforECYard(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "ECGodn":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforECGodn(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "CC":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforCC(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BND":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBND(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BNDadv":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforContainerBNDadv(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "BNDUnld":
                        ObjBulkInvoiceReport.All = "";
                        FilePath = GeneratingBulkPDFforBNDUnld(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "MiscInv":
                        ObjBulkInvoiceReport.All = "";
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforMiscInv(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "Rent":
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforRent(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;
                    case "ECOut":
                        ObjRR.GenericBulkInvoiceDetailsForPrint(ObjBulkInvoiceReport);
                        FilePath = GeneratingBulkPDFforECOut(ds, ObjBulkInvoiceReport.InvoiceModuleName, ObjBulkInvoiceReport.All);
                        break;

                }

                return Json(new { Status = 1, Data = FilePath });
                //}
                //else
                //    return Json(new { Status = -1, Data = "No Record Found." });
            }
        }


        [HttpGet]
        [CustomValidateAntiForgeryToken]
        public ActionResult ListOfInvoiceDateWiseExternalUser(string FromDate, string ToDate, string Module = "All", int ShippingLineId = 0, int CHAId = 0)
        {
            ReportRepository ObjRR = new ReportRepository();
            List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetInvoiceListExternalUser(FromDate, ToDate, Module, objLogin.Uid, CHAId);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }

        }

        #endregion

        #region BulkDebitnoteReport External User
        [HttpGet]
        public ActionResult BulkDebitnoteReportExternalUser()
        {

            //ExportRepository objExport = new ExportRepository();
            //objExport.GetPaymentParty();
            //if (objExport.DBResponse.Status > 0)
            //    ViewBag.PaymentParty = JsonConvert.SerializeObject(objExport.DBResponse.Data);
            //else
            //    ViewBag.PaymentParty = null;
            return PartialView();
        }
        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult PrintDRNoteExternalUser(FormCollection fc)
        {
            //objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            Kdl_ReportRepository objRepo = new Kdl_ReportRepository();
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();
            Login objLogin = (Login)Session["LoginUser"];

            objRepo.PrintDetailsForBulkCRNoteForExternalUser(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"), "D", objLogin.Uid);
            if (objRepo.DBResponse.Data != null)
            {
                objCR = (PrintModelOfBulkCrCompany)objRepo.DBResponse.Data;
                string Path = GenerateDRNotePDF(objCR);
                return Json(new { Status = 1, Message = Path });
            }
            else
            {
                return Json(new { Status = -1, Message = "error" });
            }
        }

        //    public string GenerateCRNotePDF(PrintModelOfBulkCrCompany objCR)
        //    {
        //        string Note = "";
        //        string SACCode = "", note = "", fileName = "";
        //        objCR.lstCharges.Select(x => new { SACCode = x.SACCode }).Distinct().ToList().ForEach(item =>
        //        {
        //            if (SACCode == "")
        //                SACCode = item.SACCode;
        //            else
        //                SACCode = SACCode + "," + item.SACCode;
        //        });

        //            note = (Note == "C") ? "CREDIT NOTE" : "DEBIT NOTE";
        //        fileName = (Note == "C") ? ("CreditNote" + CRNoteId + ".pdf") : ("DebitNote" + CRNoteId + ".pdf");
        //        string Path = Server.MapPath("~/Docs/") + Session.SessionID;//+ "/CreditNote" + CRNoteId + ".pdf";
        //        if (!Directory.Exists(Server.MapPath("~/Docs/") + Session.SessionID))
        //        {
        //            Directory.CreateDirectory(Server.MapPath("~/Docs/") + Session.SessionID);
        //        }
        //        if (System.IO.File.Exists(Path + "/" + fileName))
        //        {
        //            System.IO.File.Delete(Path + "/" + fileName);

        //        }
        //        objCR.lstCrParty.ToList().ForEach(item =>
        //        {
        //            string html = "<table style='width:100%;font-size:9pt;font-family:Verdana,Arial,San-serif;border-collapse:collapse;'><thead><tr><th colspan='2' style='text-align:center;padding:8px;'>Principle Place of Business: <span style='border-bottom:1px solid #000;'>______________________</span><br/>" + note + "</th></tr><tr><th style='border:1px solid #000;text-align:center;padding:8px;width:50%;'>Details of Service Provider</th><th style='border:1px solid #000;text-align:center;padding:8px;width:50%;'>Details of Service Receiver</th></tr></thead><tbody><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>Name: " + objCR.CompanyName + "</td><td style='border:1px solid #000;text-align:left;padding:8px;'>Name: <span>" + item.PartyName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>Warehouse Address: <span>" + objCR.CompanyAddress + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>Address: <span>" + item.PartyAddress + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>City: <span>" + objCR.CompCityName + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>City: <span>" + item.PartyCityName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>State: <span>" + objCR.CompStateName + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>State: <span>" + item.PartyStateName + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>State Code: <span>" + objCR.CompStateCode + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'>State Code: <span>" + item.PartyStateCode + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>GSTIN: <span>" + objCR.CompGstIn + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'><span>GSTIN(if registered):" + item.PartyGSTIN + "</span></td></tr><tr><td style='border:1px solid #000;text-align:left;padding:8px;'>PAN:<span>" + objCR.CompPan + "</span></td><td style='border:1px solid #000;text-align:left;padding:8px;'><span></span></td></tr><tr><td style='text-align:left;padding:8px;'>Debit/Credit Note Serial No: <span style='border-bottom:1px solid #000;'>" + item.CRNoteNo + "</span><br/><br/>Date of Issue: <span style='border-bottom:1px solid #000;'>" + item.CRNoteDate + "</span></td><td style='text-align:left;padding:8px;'>Accounting Code of <span>" + SACCode + "</span><br/><br/>Description of Services: <span>Other Storage & Warehousing Services</span></td></tr><tr><td colspan='2' style='text-align:left;padding:8px;'>Original Bill of Supply/Tax Invoice No: <span style='border-bottom:1px solid #000;'>" + item.InvoiceNo + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date: <span style='border-bottom:1px solid #000;'>" + Convert.ToDateTime(item.InvoiceDate).ToString("dd/MM/yyyy") + "</span></td></tr><tr><td colspan='2'>";
        //        string htmltable = "<table style='width:100%;font-family:Verdana,Arial,San-serif;border-collapse:collapse;border:1px solid #000;font-size:7pt;'><thead><tr><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Sl No.</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;width:20%;'>Particulars</th><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;width:7%;'>Taxable Value</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>CGST</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>SGST</th><th colspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>IGST</th><th rowspan='2' style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Total Amount</th></tr><tr><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Reasons for increase / decrease in original invoice</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Rate</th><th style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>Amt</th></tr></thead><tbody>";
        //        string tr = "";
        //        int Count = 1;
        //        decimal IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        //            objCR.lstCharges.Where(y => y.CRNoteId == item.CRNoteId).ToList().ForEach(data =>
        //           {
        //                tr += "<tr><td style='border:1px solid #000;text-align:center;padding:5px;font-size:7pt;'>" + Count + "</td><td style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'>" + item.ChargeName + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.Taxable + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.CGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.CGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.SGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.SGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.IGSTPer + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.IGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;font-size:7pt;'>" + item.Total + "</td></tr>";
        //            IGSTAmt += item.IGSTAmt;
        //            CGSTAmt += item.CGSTAmt;
        //            SGSTAmt += item.SGSTAmt;
        //            Count++;
        //        });
        //        string AmountInWord = ConvertNumbertoWords((long)objCR.GrandTotal);
        //        string Remarks = objCR.Remarks;
        //        string tfoot = "<tr><td style='border:1px solid #000;text-align:center;padding:5px;'></td><td style='border:1px solid #000;text-align:left;padding:5px;'></td><td style='border:1px solid #000;text-align:center;padding:5px;font-weight:600;'>Total</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + CGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + SGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'></td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + IGSTAmt + "</td><td style='border:1px solid #000;text-align:right;padding:5px;'>" + objCR.TotalAmt + "</td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Total Debit/Credit Note Value (in figure)</span> <span>" + objCR.GrandTotal + "</span></td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Total Debit/Credit Note Value (in words)</span> <span>" + AmountInWord + "</span></td></tr><tr><td colspan='10' style='border:1px solid #000;text-align:left;padding:5px;font-size:7pt;'><span style='border-bottom:1px solid #000;font-weight:600;'>Remarks</span> <span>" + Remarks + "</span></td></tr></tbody></table></td></tr><tr><td colspan='2' style='text-align:left;padding:5px;'>Note:<br/><span style='padding:8px;'>1. The invoice issued earlier can be modified/cancelled by way of Debit Note/Credit Note.</span><br/><span style='padding:8px;'>2. Credit Note is to be issued where excess amount cliamed in original invoice.</span><br/><span style='padding:8px;'>3. Debit Note is to be issued where less amount claimed in original invoice.</span></td></tr><tr><td></td><td style='text-align:left;padding:8px;font-weight:600;'>Signature: ____________________________<br/><br/>Name of the Signatory: __________________ <br/><br/>Designation/Status: ____________________ </td></tr><tr><td style='text-align:left;padding:5px;'>To,<br/><span style='border-bottom:1px solid #000;'>____________________________ <br/>____________________________<br/>____________________________<br/></span><br/><br/>Copy To:<br/>1. Duplicate Copy for RM, CWC,RO -<br/>2. Triplicate Copy for Warehouse</td></tr></tbody></table>";
        //        html = html + htmltable + tr + tfoot;
        //        using (var RH = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f))
        //        {
        //            RH.GeneratePDF(Path + "/" + fileName, html);
        //        }
        //        return "/Docs/" + Session.SessionID + "/" + fileName;
        //    }


        //}


        #endregion
        #region BulkCreaditNoteReport External User
        [HttpGet]
        public ActionResult BulkCreaditNoteReportExternalUser()
        {

            //ExportRepository objExport = new ExportRepository();
            //objExport.GetPaymentParty();
            //if (objExport.DBResponse.Status > 0)
            //    ViewBag.PaymentParty = JsonConvert.SerializeObject(objExport.DBResponse.Data);
            //else
            //    ViewBag.PaymentParty = null;
            return PartialView();
        }



        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult PrintCRNoteExternalUser(FormCollection fc)
        {
            //objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            Kdl_ReportRepository objRepo = new Kdl_ReportRepository();
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();
            string Note = "CREDIT NOTE";
            Login objLogin = (Login)Session["LoginUser"];
            objRepo.PrintDetailsForBulkCRNoteForExternalUser(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"), "C",objLogin.Uid);
            if (objRepo.DBResponse.Data != null)
            {
                objCR = (PrintModelOfBulkCrCompany)objRepo.DBResponse.Data;
                string Path = GenerateDRNotePDF(objCR, Note);
                return Json(new { Status = 1, Message = Path });
            }
            else
            {
                return Json(new { Status = -1, Message = "error" });
            }
        }
        #endregion



     








        #region Bulk Receipt

        [HttpGet]
        public ActionResult BulkReceiptReportExternalUser()
        {


            return PartialView();
        }


        [HttpGet]
        [CustomValidateAntiForgeryToken]
        public ActionResult ListOfReceiptDateWiseForExternalUser(string FromDate, string ToDate)
        {
            ReportRepository ObjRR = new ReportRepository();
            //List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
            Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetReceiptListForExternalUser(FromDate, ToDate,objLogin.Uid);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }

        }




        [HttpPost]
        // [ValidateAntiForgeryToken]
        public JsonResult GetBulkReceiptReportNewExternalUser(BulkReceiptReport ObjBulkReceiptReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetBulkCashreceipt(ObjBulkReceiptReport.PeriodFrom, ObjBulkReceiptReport.PeriodTo, ObjBulkReceiptReport.ReceiptNumber);
            if (ObjRR.DBResponse.Status == 1)
            {
                DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                string Path = GenerateBulkReceiptReport(ds);
                return Json(new { Status = 1, Message = Path });
            }
            return Json(new { Status = 0, Message = "No Data Found" });
        }
     







        [HttpGet]
        [CustomValidateAntiForgeryToken]
        public ActionResult ListOfReceiptDateWiseExternalUser(string FromDate, string ToDate)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            //List<invoiceLIst> LstinvoiceLIst = new List<invoiceLIst>();
            //Login objLogin = (Login)Session["LoginUser"];
            ObjRR.GetReceiptList(FromDate, ToDate);//, objLogin.Uid
            if (ObjRR.DBResponse.Data != null)
            {
                //LstinvoiceLIst = (List<invoiceLIst>)ObjRR.DBResponse.Data;
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
            }

        }

        #endregion


        [HttpPost]
        [CustomValidateAntiForgeryToken]
        public JsonResult PrintDRNoteForExternalUser(FormCollection fc)
        {
            //objRR.GetBulkDebitNoteReport(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"));
            Kdl_ReportRepository objRepo = new Kdl_ReportRepository();
            PrintModelOfBulkCrCompany objCR = new PrintModelOfBulkCrCompany();
            Login objLogin = (Login)Session["LoginUser"];

            objRepo.PrintDetailsForBulkCRNoteForExternalUser(Convert.ToDateTime(fc["PeriodFrom"]).ToString("yyyy/MM/dd"), Convert.ToDateTime(fc["PeriodTo"]).ToString("yyyy/MM/dd"), "D",objLogin.Uid);
            if (objRepo.DBResponse.Data != null)
            {
                objCR = (PrintModelOfBulkCrCompany)objRepo.DBResponse.Data;
                string Path = GenerateDRNotePDF(objCR);
                return Json(new { Status = 1, Message = Path });
            }
            else
            {
                return Json(new { Status = -1, Message = "error" });
            }
        }
        #region tds deposit print
        public JsonResult GetTDSDepositReport(BulkReceiptReport ObjBulkReceiptReport)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetBulkCashreceipt(ObjBulkReceiptReport.PeriodFrom, ObjBulkReceiptReport.PeriodTo, ObjBulkReceiptReport.ReceiptNumber);
            if (ObjRR.DBResponse.Status == 1)
            {
                DataSet ds = (DataSet)ObjRR.DBResponse.Data;
                string Path = GenerateTDSDepositReport(ds);
                return Json(new { Status = 1, Message = Path });
            }
            return Json(new { Status = 0, Message = "No Data Found" });
        }
        [NonAction]
        public string GenerateTDSDepositReport(DataSet ds)
        {
            CurrencyToWordINR objCurr = new CurrencyToWordINR();
            List<dynamic> objCompany = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            List<dynamic> lstInvoice = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[1]);
            List<dynamic> lstContainer = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[2]);
            List<dynamic> lstCharges = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[3]);
            List<dynamic> lstMode = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[4]);
            List<string> lstSB = new List<string>();

            int i = 0;
            lstInvoice.ToList().ForEach(item =>
            {
                StringBuilder html = new StringBuilder();
                /*Header Part*/
                /*
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; '><tbody>");
                html.Append("<tr><td style='text-align: center;'><h1 style='font-size: 20px; line-height: 30px;margin: 0; padding: 0;'>" + objCompany[0].CompanyName + "</h1>");
                html.Append("<label style='display: block; font-size: 13px; line-height: 22px;'>(A Govt. of India Undertaking) </label><br />");
                html.Append("<span style='display: block; font-size: 13px; line-height: 22px; text-transform: uppercase; padding-bottom: 10px;'>ICD Patparganj-Delhi</span>");
                html.Append("</td></tr>");
                html.Append("<tr><td style='text-align: right;'><span style='display: block; font-size: 13px; line-height: 22px; text-transform: uppercase; padding-bottom: 10px;'>");
                html.Append("CWC GST No. <label>" + objCompany[0].GstIn + "</label></span></td></tr>");
                html.Append("<tr><td><table style=' border: 1px solid #000; padding: 10px; width:100%; margin-bottom: 10px;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><h2 style='font-size: 18px; padding-bottom: 10px; text-align: center;margin: 0; padding: 0;'>Tax Invoice</h2> </td></tr>");
                html.Append("<tr><td><table style='width:100%; margin-bottom: 10px;' cellspacing='0' cellpadding='5'><tbody>");
                html.Append("<tr><td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>Receipt No.</label> <span>" + item.ReceiptNo + "</span></td>");
                html.Append("<td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>Receipt Date : </label> <span>" + item.ReceiptDate + "</span></td></tr>");
                html.Append("<tr><td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>Invoice No.</label> <span>" + item.InvoiceNo + "</span></td>");
                html.Append("<td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>Invoice Date : </label> <span>" + item.InvoiceDate + "</span></td></tr>");
                html.Append("<tr><td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>Party Name : </label>");
                html.Append("<span>" + item.PartyName + "</span></td>");
                html.Append("<td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>State :</label> <span>" + item.PartyState + "</span> </td></tr>");
                html.Append("<tr><td style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>");
                html.Append("Party Address :</label> <span>" + item.PartyAddress + "</span></td><td style='font-size: 13px; line-height: 26px;'>");
                html.Append("<label style='font-weight: bold;'>State Code :</label> <span>" + item.PartyStateCode + "</span></td></tr>");
                html.Append("<tr><td style='font-size: 13px; line-height: 26px;' colspan='2'><label style='font-weight: bold;'>Party GST :</label> <span>" + item.PartyGSTNo + "</span></td>");
                html.Append("</tr></tbody> ");
                html.Append("</table></td></tr><tr><td><hr /></td></tr><tr><th><b style='text-align: left; font-size: 14px;margin-top: 10px;'>Container Details :</b> </th></tr>");
                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:90%;' cellspacing='0' cellpadding='10'>");
                html.Append("<thead><tr><th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>SR No.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>CFS Code</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>Container No.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>Size</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>From Date</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>To Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>Cargo Type</th>");
                html.Append("</tr></thead><tbody>");
                */
                /*************/
                /*Container Bind*/
                /*
                int i = 1;
                var InvoceIds = item.InvoiceId.Split(',');
                foreach (var InvId in InvoceIds)
                {
                    lstContainer.Where(x => x.InoviceId == Convert.ToInt32(InvId)).ToList().ForEach(elem =>
                    {
                        html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + i.ToString() + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + elem.CFSCode + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + elem.ContainerNo + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + elem.Size + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + elem.FromDate + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + elem.ToDate + "</td>");
                        html.Append("<td style='border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + (elem.CargoType == 0 ? "" : (elem.CargoType == 1 ? "Haz" : "Non-Haz")) + "</td>");
                        html.Append("</tr>");
                        i = i + 1;
                    });
                }
                */
                /***************/
                /*
                html.Append("</tbody></table></td></tr>");
                html.Append("<tr><th><h3 style='text-align: left; font-size: 14px;margin-top: 20px;'>Container Charges :</h3> </th></tr><tr><td>");
                html.Append("<table style=' border: 1px solid #000; border-bottom: 0; width:100%;' cellspacing='0' cellpadding='5'>");
                html.Append("<thead><tr>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 60px;'>SR No.</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 140px;'>Charge Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 24%;'>Description</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>HSN Code</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 80px;'>Rate</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 130px;'>Taxable Amt.</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>CGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>SGST</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 200px;'>IGST</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 100px;'>Total</th></tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Amt.</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Rate</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>Amt.</th></tr></thead>");
                html.Append("<tbody>");
                i = 1;
                */
                /*Charges Bind*/
                /*
                foreach (var InvId in InvoceIds)
                {
                    lstCharges.Where(y => y.InoviceId == Convert.ToInt32(InvId)).ToList().ForEach(data =>
                    {
                        html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + i.ToString() + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.OperationSDesc + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.OperationDesc + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.SACCode + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.Rate.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.Taxable.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.CGSTPer.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.CGSTAmt.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.SGSTPer.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.SGSTAmt.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.IGSTPer.ToString("0") + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.IGSTAmt.ToString("0") + "</td>");
                        html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.Total.ToString("0") + "</td></tr>");
                        i = i + 1;
                    });
                }
                html.Append("</tbody>");
                html.Append("</table>");
                html.Append("</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='border-top: 1px solid #000; border-left: 1px solid #000; width: 100%; margin-bottom: 10px; border-right: 1px solid #000; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='10'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: left; width: 120px;'>Total :</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; center; width: 144px;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 24%;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 90px;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: right; width: 160px;'>" + item.TotalTaxable.ToString("0") + "</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 10px;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: right; width: 210px;'>" + item.TotalCGST.ToString("0") + "</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: right; width: 210px;'>" + item.TotalSGST.ToString("0") + "</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: right; width: 210px;'>" + item.TotalIGST.ToString("0") + "</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 10px;'></th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 11px; text-align: right; width: 120px;'>" + item.InvoiceAmt.ToString("0") + "</th>");
                html.Append("</tr>");
                html.Append("<tr>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;' colspan='12'>Total Invoice (In Word) : " + objCurr.changeCurrencyToWords(item.InvoiceAmt.ToString("0")) + "</th>");
                html.Append("</tr>");
                html.Append("<tr>");
                html.Append("<th style='font-size: 12px; text-align: left; padding: 5px;' colspan='7'>Amount of Tax Subject of Reverse : 0</th>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("<table style='width:100%;' cellspacing='0' cellpadding='10'>");
                html.Append("<tbody>");
                html.Append("<tr>");
                html.Append("<td style='font-size: 12px; text-align: left; line-height: 30px;'>Receipt No.: <label style='font-weight: bold;'></label></td>");
                html.Append("<td style='font-size: 12px; text-align: left; line-height: 30px;'>Party Code: <label style='font-weight: bold;'>" + item.PartyCode.ToString() + "</label></td>");
                html.Append("</tr>");
                html.Append("<tr>");
                html.Append("<td style='font-size: 11px; text-align: left; line-height: 30px;'>*Cheques are subject to realisation</td>");
                html.Append("<td style='font-size: 11px; text-align: left; line-height: 30px;'>SAM(A/C)</td>");
                html.Append("</tr>");
                html.Append("</tbody>");
                html.Append("</table>");

                html.Append("</td></tr></tbody>");
                html.Append("</table>");

                html.Append("<table style='width:100%; border: 1px solid #000;' cellspacing='0' cellpadding='10'>");
                html.Append("<thead>");
                html.Append("<tr>");
                html.Append("<th style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;'>Mode</th>");
                html.Append("<th style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;'>Drawee Bank</th>");
                html.Append("<th style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;'>Instrument No</th>");
                html.Append("<th style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;'>Date</th>");
                html.Append("<th style='border-bottom: 1px solid #000; font-size: 12px; text-align: left; padding: 5px;'>Amount</th>");
                html.Append("</tr>");
                html.Append("</thead>");
                html.Append("<tbody>");
                lstMode.Where(z => z.CashReceiptId == item.CashReceiptId).ToList().ForEach(data =>
                {
                    html.Append("<tr>");
                    html.Append("<td style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; line-height: 15px;'>" + data.PayMode + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; line-height: 15px;'>" + data.DraweeBank + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; line-height: 15px;'>" + data.InstrumentNo + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; line-height: 15px;'>" + data.Date + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; border-right: 1px solid #000; font-size: 12px; text-align: left; line-height: 15px;'>" + data.Amount + "</td>");
                    html.Append("</tr>");
                });
                html.Append("</tbody></table>");
                */
                /***************/



                //Page Header
                html.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");

                html.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                html.Append("<td width='150%' valign='top' align='center'><h1 style='font-size: 20px; line-height: 30px;margin: 0; padding: 0;'>" + objCompany[0].CompanyName + "</h1>");
                html.Append("<label style='display: block; font-size: 13px; line-height: 22px;'>(A Govt. of India Undertaking) </label><br />");
                html.Append("<span style='font-size: 12px; padding-bottom: 10px;'>" + objCompany[0].CompanyAddress + "</span>");
                html.Append("<br /><label style='font-size: 14px; font-weight:bold;'>CASH RECEIPT</label>");
                html.Append("</td></tr>");

                //html.Append("<tr><td style='text-align: center;'><h1 style='font-size: 20px; line-height: 30px;margin: 0; padding: 0;'>" + objCompany[0].CompanyName + "</h1>");
                //html.Append("<label style='display: block; font-size: 13px; line-height: 22px;'>(A Govt. of India Undertaking) </label><br/>");
                //html.Append("<span style='display: block; font-size: 13px; line-height: 22px; text-transform: uppercase; padding-bottom: 10px;'>ICD Patparganj-Delhi</span>");
                //html.Append("<h2 style='font-size: 18px; padding-bottom: 10px; text-align: center;margin: 0; padding: 0;'>Cash Receipt</h2> </td></tr>");

                //Header
                html.Append("<tr><td colspan='12'><table style=' border: 1px solid #000; padding: 10px; width:100%; margin-bottom: 10px;'cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td><table style='width:100%; margin-bottom: 10px;' cellspacing='0' cellpadding='5'>");
                html.Append("<tbody><tr><td colspan='9' width='80%' style='font-size: 13px; line-height: 26px;'>");
                html.Append("<label style='font-weight: bold;'>No.</label> <span>" + item.ReceiptNo + "</span></td>");
                html.Append("<td colspan='3' width='20%' style='font-size: 13px; line-height: 26px; float:right;'><label style='font-weight: bold;'>Date : </label> <span>" + item.ReceiptDate + "</span></td>");
                html.Append("</tr>");
                html.Append("<tr><td colspan='12' style='font-size: 13px; line-height: 26px;'><label style='font-weight: bold;'>By : </label><span>" + item.PartyName + "</span></td></tr>");
                html.Append("</tbody></table>");
                html.Append("</td></tr><tr><td><hr/></td></tr><tr><td>");

                //Invoice Nos and Amounts
                html.Append("<table style=' border: 1px solid #000; border-bottom: 0; width:50%;' align='center' cellspacing='0' cellpadding='10'>");
                html.Append("<thead><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>Invoice No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>Amount</th>");
                html.Append("</tr></thead><tbody>");

                //Loop
                if (item.InvoiceNo.ToString() != "")
                {
                    var InvoiceIds = item.InvoiceId.Split(',');
                    var InvoiceNos = item.InvoiceNo.Split(',');
                    var InvoiceAmts = item.Amt.Split(',');
                    i = 0;
                    foreach (var Invoice in InvoiceNos)
                    {
                        html.Append("<tr>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + InvoiceNos[i] + "</td>");
                        html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center;'>" + InvoiceAmts[i] + "</td>");
                        html.Append("</tr>");

                        i = i + 1;
                    }
                }


                html.Append("</tbody></table></td></tr>");

                //Banks
                html.Append("<tr><td><table style=' border: 1px solid #000; border-bottom: 0; width:70%;' align='center' cellspacing='0' cellpadding='5'>");
                html.Append("<thead>");
                html.Append("<tr><th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 60px;'>Mode</th>");
                html.Append("<th rowspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 140px;'>Drawee Bank</th>");
                html.Append("<th colspan='2' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 100px;'>Certificate No.</th>");
                html.Append("<th rowspan='2' style='border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 50px;'>Amount</th>");
                html.Append("</tr><tr>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 80px;'>No</th>");
                html.Append("<th style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: center; width: 100px;'>Date</th>");
                html.Append("</tr></thead><tbody>");

                //loop
                decimal totalpaymentreceiptAmt = 0;
                i = 1;
                lstMode.Where(z => z.CashReceiptId == item.CashReceiptId).ToList().ForEach(data =>
                {
                    html.Append("<tr><td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.PayMode + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.DraweeBank + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.InstrumentNo + "</td>");
                    html.Append("<td style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.Date + "</td>");
                    html.Append("<td style='border-bottom: 1px solid #000; font-size: 10px; text-align: center;'>" + data.Amount + "</td>");
                    html.Append("</tr>");
                    totalpaymentreceiptAmt = totalpaymentreceiptAmt + data.Amount;

                    i = i + 1;

                });

                //TDS
                html.Append("<tr>");
                html.Append("<td colspan='4' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: right; font-weight: bold;'>TDS</td>");
                html.Append("<td colspan='1' style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>" + item.TdsAmount.ToString() + "</td></tr>");


                //Total
                html.Append("<tr>");
                html.Append("<td colspan='4' style='border-right: 1px solid #000; border-bottom: 1px solid #000; font-size: 12px; text-align: right; font-weight: bold;'>Total Payment Receipt Amount</td>");
                html.Append("<td colspan='1' style='border-bottom: 1px solid #000; font-size: 10px; text-align: center; width: 50px;'>" + totalpaymentreceiptAmt + "</td></tr></tbody></table>");
                html.Append("</td></tr></tbody></table>");

                html.Append("<table style='border-top: 1px solid #000; border-left: 1px solid #000; width: 100%; margin-bottom: 10px; border-right: 1px solid #000; border-bottom: 1px solid #000;' cellspacing='0' cellpadding='10'>");
                html.Append("<tbody><tr>");
                html.Append("<th style='font-size: 12px; text-align: left; padding: 5px;' colspan='12'>In Words : " + objCurr.changeCurrencyToWords(totalpaymentreceiptAmt.ToString("0")) + "</th></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; margin-bottom: 80px;' cellspacing='0' cellpadding='10'>");
                html.Append("<tbody>");
                html.Append("<tr><td width='10%' valign='top' align='right' style='font-size:13px;'><b>Remarks : </b></td><td colspan='2' width='85%' style='font-size:12px; line-height:22px;'>" + item.Remarks + "</td></tr>");
                //html.Append("<td style='font-size: 12px; text-align: left; padding: 5px;' colspan='12'><b>Remarks : </b> " + item.Remarks + "</td></tr>");
                html.Append("</tbody></table>");

                html.Append("<table style='width: 100%; margin-bottom: 10px;' cellspacing='0' cellpadding='10'><tbody><tr>");
                html.Append("<th style='width:60%;'></th>");
                html.Append("<th style='border-top: 1px solid #000; font-size: 12px; text-align: center; padding: 5px;'>For Central Warehousing Corporation</th>");
                html.Append("</tr></tbody></table></td></tr></tbody></table>");

                html = html.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                lstSB.Add(html.ToString());
            });
            var type = "bulkreport";
            var id = "BulkReceipt" + DateTime.Now.ToOADate().ToString().Replace(".", string.Empty);
            var fileName = id + ".pdf";
            string PdfDirectory = Server.MapPath("~/Docs") + "/" + type + "/";
            if (!Directory.Exists(PdfDirectory))
                Directory.CreateDirectory(PdfDirectory);
            using (var rh = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
            {
                rh.HeadOffice = "";
                rh.HOAddress = "";
                rh.ZonalOffice = "";
                rh.ZOAddress = "";
                rh.GeneratePDF(PdfDirectory + fileName, lstSB);
            }
            return "/Docs/" + type + "/" + fileName;
        }
        #endregion


        #region Account Report Export Cargo In General Carting
        [HttpGet]
        public ActionResult ExportCargoReport()
        {
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetCargoReport(string AsOnDate)
        {
            if (ModelState.IsValid)
            {
                DSR_ReportRepository ObjRR = new DSR_ReportRepository();
                ObjRR.GetCargoExport(AsOnDate);
                string Path = "";
                List<Hdb_ExpCargo> lstData = new List<Hdb_ExpCargo>();
                lstData = (List<Hdb_ExpCargo>)ObjRR.DBResponse.Data;
                Path = GeneratePDFExpCarReport(lstData, AsOnDate);

                return Json(new { Status = 1, Data = Path }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }
        }
        [NonAction]
        public string GeneratePDFExpCarReport(List<Hdb_ExpCargo> lstData, string Date)
        {
            try
            {
                var FileName = "ExportCargoReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");

                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 28px; line-height: 30px;margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1>");
                Pages.Append("<label style='font-size: 14px;'>(A Govt. of India Undertaking) </label><br />");
                Pages.Append("<span style='font-size: 14px; padding-bottom: 10px;'></span><br/><span style='font-size: 14px; padding-bottom: 10px;'>opp:Custom, Boundary of KPT, Near West Gate No.2. P.B.No.1,Kandla-370210</span><br/><label style='font-size: 14px;'></label><br/><label style='font-size: 14px;'>As On Date - " + Date + "</label><br/><label style='font-size: 14px;'></label>");
                Pages.Append("<br /><label style='font-size: 16px; font-weight:bold;'>Accrued Income Report for Export Cargo In General Carting</label>");
                Pages.Append("</td>");
                Pages.Append("<td valign='top'><img align='right' src='ISO' width='100'/></td>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");
                Pages.Append("</td></tr>");

                //Pages.Append("<tr><td colspan='12'>");
                //Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                //Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                //Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>CFS Kukatpally-Hyderabad</span><br/><span style='font-size:12px;'><b>As On Date - </b> " + Date + "</span><br/><label style='font-size: 14px; font-weight:bold;'>Account Report for Export Cargo In General Carting</label></td></tr>");
                //Pages.Append("</tbody></table>");
                //Pages.Append("</td></tr>");
                Pages.Append("</thead></table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; border-bottom:none; font-size:8pt;'>");
                Pages.Append("<thead><tr>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>S No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;'>Entry No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>In Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Sb No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Sb Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Shed</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Storage Type</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>FCL / LCL</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Area</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>No Of Days</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>No Of Week</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>Storage Amt</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;width:12%;text-align:right;'>Insurance Amt</th>");
                Pages.Append("</tr></thead>");
                Pages.Append("<tbody>");
                lstData.ForEach(item =>
                {
                    Pages.Append("<tr>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;'>" + item.EntryNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.InDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.SbNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.SbDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.Shed + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.StorageType + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.FCLLCL + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.Area + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>" + item.NoOfDays + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>" + item.NoOfWeek + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>" + item.GeneralAmount + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.InsuranceAmount + "</td>");
                    Pages.Append("</tr>");
                    i++;
                });

                Pages.Append("<tr>");
                Pages.Append("<th colspan='7' style='width:3%;'>Total :</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:8%;'></th>");
                Pages.Append("<th style='border-right:1px solid #000;width:8%;'>" + lstData.AsEnumerable().Sum(item => item.Area) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:6%;'>" + lstData.AsEnumerable().Sum(item => item.NoOfDays) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:6%;'>" + lstData.AsEnumerable().Sum(item => item.NoOfWeek) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:6%;'>" + lstData.AsEnumerable().Sum(item => item.GeneralAmount) + "</th>");
                Pages.Append("<th style='width:12%;text-align:right;'>" + lstData.AsEnumerable().Sum(item => item.InsuranceAmount) + "</th>");
                Pages.Append("</tr>");

                Pages.Append("</tbody></table>");

                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }


        #endregion

        #region Accounts Report for Import Cargo
        [HttpGet]
        public ActionResult ImportCargoAccountsReport()
        {
            HDBMasterRepository ObjYR = new HDBMasterRepository();
            ObjYR.GetAllGodown();
            if (ObjYR.DBResponse.Data != null)
            {
                ViewBag.ListOfGodown = (List<CwcExim.Areas.Master.Models.HDBGodown>)ObjYR.DBResponse.Data;
            }
            else ViewBag.ListOfGodown = null;
            return PartialView();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetImpCargo(string AsOnDate, string GodownId, string GodownName)
        {
            if (ModelState.IsValid)
            {
                Hdb_ReportRepository ObjRR = new Hdb_ReportRepository();
                ObjRR.GetImpCargo(AsOnDate, GodownId);
                string Path = "";
                List<Hdb_ImpCargo> lstData = new List<Hdb_ImpCargo>();
                lstData = (List<Hdb_ImpCargo>)ObjRR.DBResponse.Data;
                Path = GeneratePDFImpCargo(lstData, AsOnDate, GodownName);

                return Json(new { Status = 1, Data = Path }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var ErrorMessage = string.Join(",", ModelState.Values.SelectMany(m => m.Errors).Select(e => e.ErrorMessage));
                return Json(new { Status = 0, Message = ErrorMessage });
            }
        }
        [NonAction]
        public string GeneratePDFImpCargo(List<Hdb_ImpCargo> lstData, string Date, string GodownName)
        {
            try
            {
                var FileName = "ImpCargoReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");

                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 28px; line-height: 30px;margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1>");
                Pages.Append("<label style='font-size: 14px;'>(A Govt. of India Undertaking) </label><br />");
                Pages.Append("<span style='font-size: 14px; padding-bottom: 10px;'></span><br/><span style='font-size: 14px; padding-bottom: 10px;'>opp:Custom, Boundary of KPT, Near West Gate No.2. P.B.No.1,Kandla-370210</span><br/><label style='font-size: 14px;'></label><br/><label style='font-size: 14px;'>As On Date - " + Date + "</label><br/><label style='font-size: 14px;'>Shed Cd - " + GodownName + "</label>");
                Pages.Append("<br /><label style='font-size: 16px; font-weight:bold;'>Account Report for Import Cargo</label>");
                Pages.Append("</td>");
                Pages.Append("<td valign='top'><img align='right' src='ISO' width='100'/></td>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");
                Pages.Append("</td></tr>");

                //Pages.Append("<tr><td colspan='12'>");
                //Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                //Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                //Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 28px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 14px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:14px;'>CFS Kukatpally-Hyderabad</span><br/><span style='font-size:14px;'><b>As On Date - </b> " + Date + "</span><br/><span style='font-size:14px;'><b>Shed Cd - </b>" + GodownName + "</span><br/><label style='font-size: 16px; font-weight:bold;'>Account Report for Import Cargo</label></td></tr>");
                //Pages.Append("</tbody></table>");
                //Pages.Append("</td></tr>");
                Pages.Append("</thead></table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; border-bottom:none; font-size:8pt;'>");
                Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>S No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;'>OBL No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>Dstf Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Entry No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Entry Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Size</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>FCL / LCL</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Storage Type</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>Item No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>Pkg</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>Rcvd Pkg</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>Gr Wt</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Area</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Slot No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>Remarks</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>Total Wk</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>Storage Amount</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;width:12%;text-align:right;'>Insurance Amount</th></tr></thead>");
                Pages.Append("<tbody>");
                lstData.ForEach(item =>
                {
                    Pages.Append("<tr>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:12%;'>" + item.BOLNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:6%;'>" + item.DestuffingEntryDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.CFSCode + "</td>");

                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.EntryDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.Size + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.LCLFCL + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.StorageArea + "</td>");

                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>" + item.CommodityAlias + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>" + item.NoOfUnits + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:4%;'>" + item.NoOfUnitsRec + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;'>" + item.Weight.ToString("0.00") + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.Area.ToString("0.00") + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.LocationName + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:7%;'>" + item.Remarks + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>" + item.TotWk + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:5%;'>" + item.Amount + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.InsuranceAmount + "</td>");
                    Pages.Append("</tr>");
                    i++;
                });

                Pages.Append("<tr>");
                Pages.Append("<th colspan='2' style='width:3%;'>Total :</th>");
                Pages.Append("<th style='width:6%;'></th>");
                Pages.Append("<th style='width:7%;'></th>");
                Pages.Append("<th style='width:7%;'></th>");
                Pages.Append("<th style='width:7%;'></th>");
                Pages.Append("<th style='width:7%;'></th>");
                Pages.Append("<th style='width:7%;'></th>");
                Pages.Append("<th style='width:4%;'></th>");
                Pages.Append("<th style='border-right:1px solid #000;width:4%;'>" + lstData.AsEnumerable().Sum(item => item.NoOfUnits) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:4%;'>" + lstData.AsEnumerable().Sum(item => item.NoOfUnitsRec) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:8%;'>" + lstData.AsEnumerable().Sum(item => item.Weight) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:7%;'>" + lstData.AsEnumerable().Sum(item => item.Area) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:7%;'></th>");
                Pages.Append("<th style='border-right:1px solid #000;width:7%;'></th>");
                Pages.Append("<th style='border-right:1px solid #000;width:5%;'>" + lstData.AsEnumerable().Sum(item => item.TotWk) + "</th>");
                Pages.Append("<th style='border-right:1px solid #000;width:5%;'>" + lstData.AsEnumerable().Sum(item => item.Amount) + "</th>");
                Pages.Append("<th style='width:12%;text-align:right;'>" + lstData.AsEnumerable().Sum(item => item.InsuranceAmount) + "</th>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");

                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4Landscape, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }
        #endregion

        //Added by Susmita-24-04-2024
        #region Tds Deduction Report
        public ActionResult TdsDeductionReport()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GetTdsDeductionReport(Kdl_TdsDeductionReport vm)
        {

            Response.AppendHeader("content-disposition", "attachment;filename=TDSDeductionReport.xls");
            Response.Charset = "";
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.ContentType = "application/vnd.ms-excel";

            Kdl_ReportRepository obj = new Kdl_ReportRepository();
            obj.TdsDeductionExcelRpt(vm.PeriodFrom, vm.PeriodTo);
            DataSet ds = new DataSet();
            ds = (DataSet)obj.DBResponse.Data;
            Response.Write(TdsDeductionReportExcelPDF(ds, vm.PeriodFrom, vm.PeriodTo));
            Response.End();

            return Content("xc");
        }

        private string TdsDeductionReportExcelPDF(DataSet ds, string FromDate, string ToDate)
        {


            List<dynamic> lstTdsDeductionRptSummary = ConvertingDataTabletoDynamic.ToDynamic(ds.Tables[0]);
            var i = 1;
            var FileName = "TdsDeductionReport.pdf";
            string html = "<html><body>";

            //Report of TDS Deduction Report
            html += "<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px; font-size:8pt;'><tbody>";
            html += "<tr><td colspan='12' valign='top' align='center'><h1 style='font-size: 20px; margin: 0; padding: 0;'>TDS Deduction Report</h1></td></tr>";
            html += "<tr><td colspan='10' valign='top' align='center'><h1 style='font-size: 20px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION, DELHI : RO KANDLA(" + FromDate + " to " + ToDate + ") </h1></td></tr>";
            html += "<tr><td colspan='12'><table cellspacing='0' cellpadding='15' style='text-align: center; border: 1px solid #000; width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; font-size:7pt;'>";

            html += "<thead>";

            html += "<tr>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>SL NO.</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Branch Name</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Name Of Depositor</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>TAN Number of Depositor</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Invoice No</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Invoice Date</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>Invoice Amount</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>TDS Amount</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000;'>TDS Deduction Date</th>";

            html += "</tr>";
            html += "</thead>";
            html += "<tbody>";
            int totalInvAmt = 0;
            int totalTdsAmt = 0;

            lstTdsDeductionRptSummary.ToList().ForEach(item =>
            {
                try
                {

                    html += "<tr>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + i + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.BranchName + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.DepositorName + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.TanNumber + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.InvoiceNo + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.InvoiceDate + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.Amount + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.TDS + "</td>";
                    html += "<td style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + item.ReceiptDate + "</td>";
                    html += "</tr>";

                    totalInvAmt = totalInvAmt + Convert.ToInt32(item.Amount);
                    totalTdsAmt = totalTdsAmt + Convert.ToInt32(item.TDS);

                    i++;

                }
                catch (Exception Ex)
                {

                }
            });

            html += "<tr>";
            html += "<th colspan='6' style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: right;'>TOTAL :</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + totalInvAmt + "</th>";
            html += "<th style='border-right: 1px solid #000; border-top: 1px solid #000; text-align: center;'>" + totalTdsAmt + "</th>";
            html += "<th style='border-top: 1px solid #000; text-align: center;'></th>";
            html += "</tr>";
            html += "</tbody>";
            html += "</table></td></tr>";
            html += "</tbody></table>";

            html += "</body></html>";
            string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/HtmlReport";

            if (!Directory.Exists(LocalDirectory))
            {
                Directory.CreateDirectory(LocalDirectory);
            }
            if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
            {
                System.IO.File.Delete(LocalDirectory + "/" + FileName);
            }

            System.IO.File.WriteAllText(LocalDirectory + "/" + FileName, html);


            FileInfo fi = new FileInfo(LocalDirectory + "/" + FileName);



            //Open a file for Read\Write
            FileStream fs = fi.Open(FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read);


            StreamReader sr = new StreamReader(fs);

            //Use the ReadToEnd method to read all the content from file
            string fileContent = sr.ReadToEnd();

            //Close the StreamReader object after operation
            sr.Close();
            // fs.Close();

            return fileContent;
        }

        #endregion

        //Added by Manik 26-12-2024
        #region SD Details Report

        public ActionResult SDDetailsReport()
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetAllPartyForSDDetail("", 0);
            if (ObjRR.DBResponse.Data != null)
            {
                var Jobj = Newtonsoft.Json.JsonConvert.SerializeObject(ObjRR.DBResponse.Data);
                var Jobject = Newtonsoft.Json.Linq.JObject.Parse(Jobj);
                ViewBag.LstParty = Jobject["LstParty"];
                ViewBag.State = Jobject["State"];
            }
            return PartialView("SDDetailsReportKandla");
        }


        [HttpGet]
        public JsonResult SearchParty(string PartyCode)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetAllPartyForSDDetail(PartyCode, 0);
            return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult LoadParty(string PartyCode, int Page)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
            ObjRR.GetAllPartyForSDDetail(PartyCode, Page);
            return Json(ObjRR.DBResponse, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetSDDetReport(string FromDate, string ToDate, int PartyId)
        {
            Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();

            string Fdt = Convert.ToDateTime(FromDate).ToString("yyyy-MM-dd");
            string Tdt = Convert.ToDateTime(ToDate).ToString("yyyy-MM-dd");

            ObjRR.GetSDDetailStatement(PartyId, Fdt, Tdt);
            string Path = "";
            if (ObjRR.DBResponse.Data != null)
            {
                KdlSDDetailsStatement SDData = new KdlSDDetailsStatement();
                SDData = (KdlSDDetailsStatement)ObjRR.DBResponse.Data;

                Path = GeneratePDFSDDetReport(SDData, FromDate, ToDate);
            }
            return Json(new { Status = 1, Data = Path }, JsonRequestBehavior.AllowGet);
        }


        [NonAction]
        public string GeneratePDFSDDetReport(KdlSDDetailsStatement SDData, string FromDate, string ToDate)
        {
            try
            {
                var FileName = "SdReport.pdf";
                StringBuilder Pages = new StringBuilder();
                string LocalDirectory = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
                //***************************************************************************************

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 5px;'><thead>");
                Pages.Append("<tr><td colspan='12'>");
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; font-family: Arial, Helvetica, sans-serif; margin: 0;'><tbody>");
                Pages.Append("<tr><td valign='top'><img align='right' src='IMGSRC' width='90'/></td>");
                Pages.Append("<td width='100%' valign='top' align='center'><h1 style='font-size: 22px; margin: 0; padding: 0;'>CENTRAL WAREHOUSING CORPORATION</h1><label style='font-size: 12px;'>(A Govt. of India Undertaking)</label><br/><span style='font-size:12px;'>ICD Kandla</span><br/><label style='font-size: 14px; font-weight:bold;'>SD STATEMENT</label></td></tr>");
                Pages.Append("</tbody></table>");
                Pages.Append(" </td></tr>");
                Pages.Append("</thead>");

                Pages.Append(" <tbody>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party :</b>" + SDData.PartyName + "</td></tr>");
                Pages.Append(" <tr><td colspan='12' style='font-size:12px;'><b>Folio No :</b> " + SDData.PartyCode + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>CWC GST No :</b> " + SDData.CompanyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Party GST No :</b> " + SDData.PartyGst + "</td></tr>");
                Pages.Append("<tr><td colspan='12' style='font-size:12px;'><b>Period :</b> " + FromDate + " - " + ToDate + "</td></tr>");
                Pages.Append("</tbody></table>");

                int i = 1;
                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse; border:1px solid #000; font-size:8pt;'>");
                Pages.Append("<thead><tr><th style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>Sl. No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>Invoice No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Invoice Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>Receipt No</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Receipt Date</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Pay Receipt</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>Transaction Type</th>");
                Pages.Append("<th style='border-bottom:1px solid #000;width:12%;'>Transaction Amount</th></tr></thead>");
                Pages.Append("<tbody>");
                SDData.lstInvc.ForEach(item =>
                {
                    Pages.Append("<tr>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:3%;'>" + i + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:9%;text-align:center;'>" + item.InvoiceNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.InvoiceDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:11%;text-align:center;'>" + item.ReceiptNo + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.ReceiptDate + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:right;'>" + item.ReceiptAmt.ToString() + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;border-right:1px solid #000;width:8%;text-align:center;'>" + item.TranType + "</td>");
                    Pages.Append("<td style='border-bottom:1px solid #000;width:12%;text-align:right;'>" + item.TranAmt.ToString() + "</td>");
                    Pages.Append("</tr>");
                    i++;
                });
                Pages.Append("<tr>");
                Pages.Append("<th colspan='7' style='border-right:1px solid #000;width:8%;text-align:right;'>Invoice Utilization Balance :</th>");
                Pages.Append("<th style='width:12%;text-align:right;'>" + SDData.UtilizationAmount + "</th>");
                Pages.Append("</tr>");
                Pages.Append("</tbody></table>");

                Pages.Append("<table cellspacing='0' cellpadding='5' style='width:100%; border-collapse:collapse;font-size:9pt;'><tbody>");
                Pages.Append("<tr><td><span><br/><br/></span></td></tr>");
                Pages.Append("<tr><td colspan='12'><p><b>N.B :</b> This is a computer generated statement. Doesn't require any signature.</p></td></tr>");
                Pages.Append("</tbody></table>");

                //***************************************************************************************
                Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));

                if (!Directory.Exists(LocalDirectory))
                {
                    Directory.CreateDirectory(LocalDirectory);
                }
                if (System.IO.File.Exists(LocalDirectory + "/" + FileName))
                {
                    System.IO.File.Delete(LocalDirectory + "/" + FileName);
                }
                //Pages.Replace("IMGSRC", Server.MapPath("~/Content/Images/CWCPDF.PNG"));
                //Pages.Replace("ISO", Server.MapPath("~/Content/Images/iso_logo.jpg"));
                using (var ObjPdf = new ReportingHelper(PdfPageSize.A4, 40f, 40f, 40f, 40f, false, true))
                {
                    ObjPdf.HeadOffice = this.HeadOffice;
                    ObjPdf.HOAddress = this.HOAddress;
                    ObjPdf.ZonalOffice = this.ZonalOffice;
                    ObjPdf.ZOAddress = this.ZOAddress;
                    ObjPdf.GeneratePDF(LocalDirectory + "/" + FileName, Pages.ToString());
                }
                return "/Docs/" + Session.SessionID + "/Report/" + FileName;
            }
            catch
            {
                return "";
            }
        }

        [HttpPost]
        public JsonResult GetSDDetExcelReport(string FromDate, string ToDate, int PartyId)
        {
            try
            {
                Kdl_ReportRepository ObjRR = new Kdl_ReportRepository();
                string Fdt = DateTime.ParseExact(FromDate, "dd/MM/yyyy", null).ToString("yyyy-MM-dd");
                string Tdt = DateTime.ParseExact(ToDate, "dd/MM/yyyy", null).ToString("yyyy-MM-dd");

                ObjRR.GetSDDetailStatement(PartyId, Fdt, Tdt);

                string path = "";
                string fileName = "";
                string returnPath = "";
                if (ObjRR.DBResponse?.Data != null)
                {
                    KdlSDDetailsStatement SDData = ObjRR.DBResponse.Data as KdlSDDetailsStatement;

                    if (SDData != null)
                    {
                        var workbook = GenerateExcelSDDetReport(SDData, FromDate, ToDate);

                        fileName = $"PartyWiseSDDetailsReport.xlsx";
                        string sessionFolder = Server.MapPath("~/Docs/") + Session.SessionID + "/Report";
                        if (!Directory.Exists(sessionFolder))
                        {
                            Directory.CreateDirectory(sessionFolder);
                        }
                        if (System.IO.File.Exists(sessionFolder + "/" + fileName))
                        {
                            System.IO.File.Delete(sessionFolder + "/" + fileName);
                        }
                        path = Path.Combine(sessionFolder, fileName);
                        workbook.SaveAs(path);
                        returnPath = "/Docs/" + Session.SessionID + "/Report/" + fileName;
                    }
                }

                return Json(new { Status = 1, Data = returnPath }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { Status = 0, Message = ex.Message });
            }
        }


        [NonAction]
        private XLWorkbook GenerateExcelSDDetReport(KdlSDDetailsStatement SDData, string FromDate, string ToDate)
        {
            var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Party_Wise_Report");
            worksheet.Style.Fill.BackgroundColor = XLColor.White;
            worksheet.PageSetup.PaperSize = XLPaperSize.A4Paper;
            worksheet.PageSetup.FitToPages(1, 0);
            worksheet.PageSetup.Margins.Top = 0.2;
            worksheet.PageSetup.Margins.Bottom = 0.2;
            worksheet.PageSetup.Margins.Left = 0.2;
            worksheet.PageSetup.Margins.Right = 0.2;

            // Add headers
            worksheet.Range("A1:H1").Merge();
            worksheet.Range("A2:H2").Merge();
            worksheet.Range("A3:H3").Merge();
            worksheet.Range("A4:H4").Merge();

            worksheet.Range("A6:B6").Merge();
            worksheet.Range("A7:B7").Merge();
            worksheet.Range("A8:B8").Merge();
            worksheet.Range("A9:B9").Merge();
            worksheet.Range("A10:B10").Merge();

            worksheet.Range("C6:H6").Merge();
            worksheet.Range("C7:H7").Merge();
            worksheet.Range("C8:H8").Merge();
            worksheet.Range("C9:H9").Merge();
            worksheet.Range("C10:H10").Merge();

            worksheet.Cell(1, 1).Value = ZonalOffice;
            worksheet.Cell(1, 1).Style.Font.FontSize = 20;
            worksheet.Cell(1, 1).Style.Font.Bold = true;
            worksheet.Cell(1, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(2, 1).Value = "(A Govt. of India Undertaking)";
            worksheet.Cell(2, 1).Style.Font.FontSize = 10;
            worksheet.Cell(2, 1).Style.Font.Bold = true;
            worksheet.Cell(2, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(2, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(3, 1).Value = ZOAddress;
            worksheet.Cell(3, 1).Style.Font.FontSize = 9;
            worksheet.Cell(3, 1).Style.Font.Bold = true;
            worksheet.Cell(3, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(3, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(4, 1).Value = "SD STATEMENT";
            worksheet.Cell(4, 1).Style.Font.FontSize = 12;
            worksheet.Cell(4, 1).Style.Font.Bold = true;
            worksheet.Cell(4, 1).Style.Font.Underline = XLFontUnderlineValues.Single;
            worksheet.Cell(4, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(4, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(6, 1).Value = "Party";
            worksheet.Cell(6, 1).Style.Font.FontSize = 11;
            worksheet.Cell(6, 1).Style.Font.Bold = true;
            worksheet.Cell(6, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(6, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(6, 3).Value = ": " + SDData.PartyName;
            worksheet.Cell(6, 3).Style.Font.FontSize = 11;
            worksheet.Cell(6, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(6, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(7, 1).Value = "Folio No";
            worksheet.Cell(7, 1).Style.Font.FontSize = 11;
            worksheet.Cell(7, 1).Style.Font.Bold = true;
            worksheet.Cell(7, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(7, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(7, 3).Value = ": ";
            worksheet.Cell(7, 3).Style.Font.FontSize = 11;
            worksheet.Cell(7, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(7, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(8, 1).Value = "CWC GST No";
            worksheet.Cell(8, 1).Style.Font.FontSize = 11;
            worksheet.Cell(8, 1).Style.Font.Bold = true;
            worksheet.Cell(8, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(8, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(8, 3).Value = ": " + SDData.CompanyGst;
            worksheet.Cell(8, 3).Style.Font.FontSize = 11;
            worksheet.Cell(8, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(8, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(9, 1).Value = "Party GST No";
            worksheet.Cell(9, 1).Style.Font.FontSize = 11;
            worksheet.Cell(9, 1).Style.Font.Bold = true;
            worksheet.Cell(9, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(9, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(9, 3).Value = ": " + SDData.PartyGst;
            worksheet.Cell(9, 3).Style.Font.FontSize = 11;
            worksheet.Cell(9, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(9, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(10, 1).Value = "Period";
            worksheet.Cell(10, 1).Style.Font.FontSize = 11;
            worksheet.Cell(10, 1).Style.Font.Bold = true;
            worksheet.Cell(10, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(10, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(10, 3).Value =": "+ FromDate + " - " + ToDate;
            worksheet.Cell(10, 3).Style.Font.FontSize = 11;
            worksheet.Cell(10, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
            worksheet.Cell(10, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 1).Value = "Sl. No.";
            worksheet.Cell(11, 1).Style.Font.FontSize = 11;
            worksheet.Cell(11, 1).Style.Font.Bold = true;
            worksheet.Cell(11, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 1).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 2).Value = "Invoice No.";
            worksheet.Cell(11, 2).Style.Font.FontSize = 11;
            worksheet.Cell(11, 2).Style.Font.Bold = true;
            worksheet.Cell(11, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 2).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 3).Value = "Invoice Date";
            worksheet.Cell(11, 3).Style.Font.FontSize = 11;
            worksheet.Cell(11, 3).Style.Font.Bold = true;
            worksheet.Cell(11, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 4).Value = "Receipt No";
            worksheet.Cell(11, 4).Style.Font.FontSize = 11;
            worksheet.Cell(11, 4).Style.Font.Bold = true;
            worksheet.Cell(11, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 4).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 4).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 5).Value = "Receipt Date";
            worksheet.Cell(11, 5).Style.Font.FontSize = 11;
            worksheet.Cell(11, 5).Style.Font.Bold = true;
            worksheet.Cell(11, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 5).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 5).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 6).Value = "Pay Receipt";
            worksheet.Cell(11, 6).Style.Font.FontSize = 11;
            worksheet.Cell(11, 6).Style.Font.Bold = true;
            worksheet.Cell(11, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 6).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 6).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 6).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(11, 7).Value = "Transaction Type";
            worksheet.Cell(11, 7).Style.Font.FontSize = 11;
            worksheet.Cell(11, 7).Style.Font.Bold = true;
            worksheet.Cell(11, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 7).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 7).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 7).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Cell(11, 7).Style.Alignment.WrapText = true;

            worksheet.Cell(11, 8).Value = "Transaction Amount";
            worksheet.Cell(11, 8).Style.Font.FontSize = 11;
            worksheet.Cell(11, 8).Style.Font.Bold = true;
            worksheet.Cell(11, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#c1c1c1");
            worksheet.Cell(11, 8).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(11, 8).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(11, 8).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Cell(11, 8).Style.Alignment.WrapText = true;
            worksheet.PageSetup.AddVerticalPageBreak(11);


            // Add data rows
            int row = 12;
            int sl = 1;
            foreach (var item in SDData.lstInvc)
            {
                worksheet.Cell(row, 1).Value = sl;
                worksheet.Cell(row, 1).Style.Font.FontSize = 10;
                worksheet.Cell(row, 1).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                worksheet.Cell(row, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                worksheet.Cell(row, 2).Value = item.InvoiceNo;
                worksheet.Cell(row, 2).Style.Font.FontSize = 10;
                worksheet.Cell(row, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                worksheet.Cell(row, 2).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                worksheet.Cell(row, 3).Value = item.InvoiceDate;
                worksheet.Cell(row, 3).Style.NumberFormat.Format = "dd/MM/yyyy";
                worksheet.Cell(row, 3).Style.Font.FontSize = 10;
                worksheet.Cell(row, 3).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                worksheet.Cell(row, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                worksheet.Cell(row, 4).Value = item.ReceiptNo;
                worksheet.Cell(row, 4).Style.Font.FontSize = 10;
                worksheet.Cell(row, 4).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                worksheet.Cell(row, 4).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                worksheet.Cell(row, 5).Value = item.ReceiptDate;
                worksheet.Cell(row, 5).Style.NumberFormat.Format = "dd/MM/yyyy";
                worksheet.Cell(row, 5).Style.Font.FontSize = 10;
                worksheet.Cell(row, 5).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 5).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                worksheet.Cell(row, 5).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                worksheet.Cell(row, 6).Value = item.ReceiptAmt;
                worksheet.Cell(row, 6).Style.Font.FontSize = 10;
                worksheet.Cell(row, 6).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 6).Style.NumberFormat.Format = "#,##0.00";

                worksheet.Cell(row, 7).Value = item.TranType;
                worksheet.Cell(row, 7).Style.Font.FontSize = 10;
                worksheet.Cell(row, 7).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 7).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                worksheet.Cell(row, 7).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                worksheet.Cell(row, 7).Style.Alignment.WrapText = true;

                worksheet.Cell(row, 8).Value = item.TranAmt;
                worksheet.Cell(row, 8).Style.Font.FontSize = 10;
                worksheet.Cell(row, 8).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                worksheet.Cell(row, 8).Style.NumberFormat.Format = "#,##0.00";
                worksheet.Cell(row, 8).Style.Alignment.WrapText = true;

                row++;
                sl++;
            }
            worksheet.Range($"A{row}:G{row}").Merge();
            worksheet.Cell(row, 1).Value = "Invoice Utilization Balance :";
            worksheet.Cell(row, 1).Style.Font.FontSize = 10;
            worksheet.Cell(row, 1).Style.Font.Bold = true;
            worksheet.Range($"A{row}:G{row}").Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(row, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

            worksheet.Cell(row, 8).Value = SDData.UtilizationAmount;
            worksheet.Cell(row, 8).Style.Font.FontSize = 10;
            worksheet.Cell(row, 8).Style.Font.Bold = true;
            worksheet.Cell(row, 8).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
            worksheet.Cell(row, 8).Style.NumberFormat.Format = "#,##0.00";

            worksheet.Columns().AdjustToContents();

            return workbook;
        }
        #endregion

    }
}