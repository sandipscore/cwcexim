@model CwcExim.Areas.Export.Models.Ppg_ContainerDeliverySystem


@if (ViewBag.StuffingReqList != null)
{
    <input type="hidden" id="hdnStuffingReq" value="@ViewBag.StuffingReqList" />
}
else
{
    <input type="hidden" id="hdnStuffingReq" value="" />
}

<style>
    .slimScrollDiv {
        height: 300px !important;
    }

    #slim_scroll {
        height: 300px !important;
    }

    #slim_scroll_1 {
        height: 300px !important;
    }

    .table.tblhd {
        border-bottom: 0;
    }

    .table.tblhd1 {
        border-bottom: 0;
    }

    .modal {
        padding-top: 70px;
    }
</style>

<script type="text/javascript" src="/scripts/jquery.nicescroll.min.js"></script>
<script type="text/javascript">
    $(function () {
        $('#slim_scroll').slimScroll({
            allowPageScroll: true
        });
    });

    $(function () {
        $('#slim_scroll_1').slimScroll({
            allowPageScroll: true
        });
    });
</script>
<style>
    .table-striped > tbody > tr > td > input[type=text], .table-striped > tbody > tr > td > select, .table-striped > tfoot > tr > td > input[type=text], .table-striped > tfoot > tr > td > select {
        width: auto !important;
    }
</style>

@*@using (Ajax.BeginForm("AddEditContainerStuffingApproval", "Loni_CWCExportV2", new AjaxOptions
    {
        Confirm = "Are you sure you want to  Save?",
        HttpMethod = "POST",
        OnSuccess = "OnSuccess",
        OnFailure = "OnFailure"
    }))
    {*@

<div class="container-fluid">
    <div style="width:90%;margin-left:auto;margin-right:auto;">
        <div class="row clearfix">
            @using (Ajax.BeginForm("AddEditContainerDelivery", "Loni_CWCExportV2", new AjaxOptions
            {
                Confirm = "Are you sure you want to  Save?",
                HttpMethod = "POST",
                OnSuccess = "OnSuccess",
                OnFailure = "OnFailure"
            }))
            {
                @Html.AntiForgeryToken()

                <div class="panel with-nav-tabs panel-primary cwc_panel">
                    <div class="panel-heading cwc_panel_heading">
                        <ul class="nav nav-tabs" id="DivTabs">
                            <li class="active"><a href="#DivContainerStuffing" data-toggle="tab">Container Delivery</a></li>
                        </ul>
                    </div>
                    <div class="panel-body">
                        <div class="tab-content">
                            <div class="tab-pane fade in active" id="DivContainerStuffing">
                                <div id="DivAddContainerStuffing">

                                    @*<div class="row Form_Space_top">
                                            <div class="form-group Form_Input">
                                                <div class="col-md-1-5">
                                                    <label>Approval Date:</label>
                                                </div>
                                                <div class="col-md-2-5 Date_Img">
                                                    @Html.TextBoxFor(m => m.ApprovalDate, new { @class = "form-control input_sm", @readonly = true })
                                                    @Html.ValidationMessageFor(m => m.ApprovalDate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>*@

                                    <div class="row Form_Space_top">
                                        <div class="form-group Form_Input">
                                            <div class="col-md-1-5">
                                                <label>Container No:</label>
                                            </div>
                                            <div class="col-md-2-5">
                                              @*  @Html.HiddenFor(m => m.CFSCode)*@
                                                @Html.TextBoxFor(m => m.ContainerNo, new { @readonly = true, @onkeydown = "PopupActivate('stuffingModal');" })
                                                <span class="search" id="stuffingsearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#stuffingModal" onclick="ContainerReqBinding();"></i></span>
                                                @Html.ValidationMessageFor(m => m.ContainerNo, "", new { @class = "text-danger" })
                                            </div>


                                            <div class="col-md-1-5 col-md-offset-4">
                                                <label>CFSCode:</label>
                                            </div>
                                            <div class="col-md-2-5 Date_Img">
                                              @Html.TextBoxFor(m => m.CFSCode, new { @readonly = true })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row Form_Space_top">
                                        <div class="form-group Form_Input">
                                            <div class="col-md-1-5">
                                                <label>GatePass No:</label>
                                            </div>
                                            <div class="col-md-2-5">
                                                @Html.HiddenFor(m => m.GatePassId)
                                                @Html.TextBoxFor(m => m.GatePassNo, new { @readonly = true })
                                            </div>


                                            <div class="col-md-1-5 col-md-offset-4">
                                                <label>GatePass Date:</label>
                                            </div>
                                            <div class="col-md-2-5 Date_Img">
                                                @Html.TextBoxFor(m => m.GatePassDate, new { @readonly = true })
                                            </div>
                                        </div>
                                    </div>


                                    <div class="row Form_Space_top">
                                        <div class="form-group Form_Input">
                                            <div class="col-md-1-5">
                                                <label>Party Name:</label>
                                            </div>
                                            <div class="col-md-10-5">
                                                @Html.HiddenFor(m => m.PartyId)
                                                @Html.TextBoxFor(m => m.PartyName, new { @readonly = true })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row Form_Space_top">
                                        <div class="form-group Form_Input">
                                            <div class="col-md-1-5">
                                                <label>Actual Time of Arrival:</label>
                                            </div>
                                            <div class="col-md-2-5 Date_Img">
                                                @Html.TextBoxFor(m => m.ActualTimeOfArrival, new { @class = "form-control input_sm", @readonly = true })
                                                @Html.ValidationMessageFor(m => m.ActualTimeOfArrival, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    


                                    @*<div class="row Form_Space_top">
                                            <div class="form-group Form_Input">
                                                <div class="col-md-1-5">
                                                    <label>Port of Call Name:</label>
                                                </div>
                                                <div class="col-md-2-5">
                                                    @Html.HiddenFor(m => m.PortOfCallId)
                                                    @Html.TextBoxFor(m => m.PortOfCallName, new { @readonly = true, @onkeydown = "PopupActivate('PortOfCallModal');" })
                                                    <span class="search" id="PortOfCallsearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#PortOfCallModal"></i></span>
                                                    @Html.ValidationMessageFor(m => m.PortOfCallName, "", new { @class = "text-danger" })
                                                </div>

                                                <div class="col-md-1-5 col-md-offset-4">
                                                    <label>Port of Call Coded:</label>
                                                </div>
                                                <div class="col-md-2-5">
                                                    @Html.TextBoxFor(m => m.PortOfCallCode, new { @readonly = true, @onkeydown = "PopupActivate('PortOfCallModal');" })
                                                    <span class="search" id="PortOfCallsearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#PortOfCallModal"></i></span>
                                                    @Html.ValidationMessageFor(m => m.PortOfCallCode, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row Form_Space_top">
                                            <div class="form-group Form_Input">
                                                <div class="col-md-1-5">
                                                    <label>Next Port of Call Name:</label>
                                                </div>
                                                <div class="col-md-2-5">
                                                    @Html.HiddenFor(m => m.NextPortOfCallId)
                                                    @Html.TextBoxFor(m => m.NextPortOfCallName, new { @readonly = true, @onkeydown = "PopupActivate('NextPortOfCallModal');" })
                                                    <span class="search" id="NextPortOfCallsearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#NextPortOfCallModal"></i></span>
                                                    <span style="color:red" id="ErrNextPortOfCall"></span>
                                                </div>

                                                <div class="col-md-1-5 col-md-offset-4">
                                                    <label>Next Port of Call Coded:</label>
                                                </div>

                                                <div class="col-md-2-5">
                                                    @Html.TextBoxFor(m => m.NextPortOfCallCode, new { @readonly = true, @onkeydown = "PopupActivate('NextPortOfCallModal');" })
                                                    <span class="search" id="NextPortOfCallsearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#NextPortOfCallModal"></i></span>
                                                    <span style="color:red" id="ErrNextPortOfCall"></span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row Form_Space_top">
                                            <div class="form-group Form_Input">
                                                <div class="col-md-1-5">
                                                    <label>Mode of Transport:</label>
                                                </div>
                                                <div class="col-md-2-5">
                                                    @Html.DropDownListFor(m => m.ModeOfTransport, new List<SelectListItem>
                                               {
                                                new SelectListItem { Text="Sea",Value="1"},
                                                new SelectListItem { Text="Rail",Value="2"},
                                                new SelectListItem { Text="Truck",Value="3"},
                                                new SelectListItem { Text="Air",Value="4"}
                                                }, new { @class = "form-control input-sm" })
                                                </div>
                                            </div>
                                        </div>*@

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="stoke SignUp_space_bottom2 SignUp_space_top2"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-offset-4 col-md-2 SignUp_space_bottom">
                            <input type="submit" class="btn log_Btn_sm" value="Save" id="BtnSaveContainerStuff" />
                        </div>
                        <div class="col-md-2">
                            <input type="button" class="btn log_Btn_sm" value="Reset" onclick="ResetAllField()" />
                        </div>

                    </div>
                    <div class="logSuccMsg" style="background-color:transparent" id="DivContainerStuffingMsg"></div>
                    <div class="logErrMsg Form_Space_bottom" style="background-color:transparent" id="DivContainerStuffingErrMsg"></div>

                    <div class="row Form_Space_top Form_Space_bottom">
                        <div class="form-group Form_Input">
                            <div class="col-md-2">
                                <input type="button" id="btnShowList" value="Show List" onclick="ShowList()" class="btn log_Btn_sm" />
                            </div>
                            <div class="col-md-offset-2-5 col-md-4" style="text-align:right;">
                                <label>Container/CBT No :</label>
                            </div>
                            <div class="col-md-3">
                                @Html.TextBox("ContSearch", "", new { placeholder = "Search Here" })
                                <span class="search"><i class="fa fa-search" aria-hidden="true" onclick="SearchStuffing()"></i></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div id="DivContainerStuffingList">
                            <table class="table table-bordered table-striped dataTable" style="width:100%; table-layout:fixed; word-break:break-word; overflow:hidden;">
                                <thead>
                                    <tr>
                                        <td>S.No</td>
                                        <td>Arrival Date </td>
                                       <td>Container/CBT No</td>
                                       <td>CFS Code</td>
                                        <td>GatePass No</td>
                                        <td>GatePass Date</td>
                                        <td>View</td>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                    <div class="clearfix"></div>

                </div>
            }
            @Scripts.Render("~/bundles/jqueryval")
        </div>
    </div>
</div>

<div id="stuffingModal" class="modal fade mTabindex" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" onclick="StuffingModalClose()"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of Container No</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="stuffingbox" type="text" tabindex="401" />
                <ul class="navList" id="lststuffing"></ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" onclick="StuffingModalClose()">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script>

    $(document).ready(function () {
        //  StuffingReqBinding();
    });
    $("#ActualTimeOfArrival").datetimepicker({
        dateFormat: "dd/mm/yy",
        timeFormat: "HH:mm:ss",
        showOn: "button",
        buttonImage: "/Content/images/calendar.png",
        buttonImageOnly: true,
        buttonText: "Select date",
        changeMonth: true,
        changeYear: true,
        showAnima: "fadein",
        hour: '23',
        minute: '59',
        second: '59',
        onClose: function () {
            $(".Date_Img .Error_Msg").text("");
        }
    });
    //$("#ActualTimeOfArrival").datepicker({
    //    dateFormat: "dd/mm/yy",
    //    showOn: "button",
    //    buttonImage: "/Content/images/calendar.png",
    //    buttonImageOnly: true,
    //    buttonText: "Select date",
    //    changeMonth: true,
    //    changeYear: true,
    //    showAnima: "fadein",
    //    onClose: function () {
    //        $("[data-valmsg-for='ApprovalDate']").html('');
    //    }
    //}).datepicker("setDate", "0");

    function ShowList() {
        debugger;
        $('#DivContainerStuffingList').load('/Export/Loni_CWCExportV2/GetContainerDeliveryList');
    }

    function LoadContainerStuffing() {
        $('#DivBody').load('/Export/WLJ_CWCExport/CreateContainerStuffing');
    }

    function SearchStuffing() {
        debugger;
        if ($('#ContSearch').val().trim() == "" || $('#ContSearch').val().trim() == null) {
            ShowList();
        }
        else {
            $('#DivContainerStuffingList').load('/Export/Loni_CWCExportV2/GetContainerDeliverySearch?SearchValue=' + $('#ContSearch').val().trim());

        }
    }

    function ResetAllField() {
        $('#DivBody').load('/Export/Loni_CWCExportV2/CreateContainerDeliveryInformation');
    }
    function OnSuccess(data) {
        debugger;
        if (data.Status == 1) {
            if (data.Status == 1) {
                if ($('#DivContainerStuffingMsg').hasClass('logErrMsg'))
                    $('#DivContainerStuffingMsg').html(data.Message);
                $('#DivContainerStuffingMsg').removeClass('logErrMsg').addClass('logSuccMsg');
                $('#DivContainerStuffingMsg').html(data.Message);
                setTimeout(ResetAllField, 3000);
            }
            else {
                if ($('#DivContainerStuffingMsg').hasClass('logSuccMsg'))
                    $('#DivContainerStuffingMsg').removeClass('logSuccMsg').addClass('logErrMsg');
                $('#DivSucMsg').html(data.Message);
            }
            setTimeout(function () { $('#DivSucMsg').html(''); }, 5000);
        }
        else {
            $('#DivContainerStuffingErrMsg').html(data.Message);
            setTimeout(function () { $('#DivContainerStuffingErrMsg,#DivContainerStuffingMsg').html(''); }, 5000);
        }
    }
    function OnFailure()
    { }

    function ContainerReqBinding() {
        debugger;

        var html = '';
        var tab = 401;
        $.ajax({
            url: '/Export/Loni_CWCExportV2/LoadContainer',
            type: 'GET',
            
            success: function (data) {
                debugger
                if (data.Status == 1) {
                    $.each(data.Data.lstContainer, function (i, item) {
                        debugger;

                        html += '<li tabindex=' + tab + '_' + i + ' onkeypress="selectStuffing(&quot;' + item.CFSCode + '&quot;,&quot;' + item.GatePassId + '&quot;,&quot;' + item.ContainerNo + '&quot;);" onclick="selectStuffing(&quot;' + item.CFSCode + '&quot;,&quot;' + item.GatePassId + '&quot;,&quot;' + item.ContainerNo + '&quot;);">' + item.ContainerNo + '-' + item.CFSCode + '</li>';
                    });
                    $('#lststuffing').html(html);
                }
            }
        });



    }
    $('#stuffingbox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lststuffing > li').show();
        else {
            $('#lststuffing > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });
    function selectStuffing(CFSCode,GatePassId, ContainerNo) {
        debugger;
      
        $('#ContainerNo').val(ContainerNo);
        $('#CFSCode').val(CFSCode);
        $('#GatePassId').val(GatePassId);
       
        //$('#Size').val(StuffingRequest.Size);

        $("#stuffingModal").modal("hide");
        $('#stuffingbox').val('');
        $('#lststuffing > li').show();


        var html = '';
        var tab = 401;
        $.ajax({
            url: '/Export/Loni_CWCExportV2/LoadContainerdetails',
            type: 'GET',
            data: { GatePassId: GatePassId },
            success: function (data) {
                debugger
                if (data.Status == 1) {
                    
                        debugger;
                        $('#GatePassNo').val(data.Data.Container.GatePassNo);
                        $('#GatePassId').val(data.Data.Container.GatePassId);
                        $('#GatePassDate').val(data.Data.Container.GatePassDate);
                        $('#PartyId').val(data.Data.Container.PartyId);
                        $('#PartyName').val(data.Data.Container.PartyName);
                        
                   
                    $('#lststuffing').html(html);
                }
            }
        });

    }

    function StuffingModalClose() {
        $('#stuffingModal').modal("hide");
        $('#stuffingbox').val('');
        $('#StuffingReqNo').focus();
        $('#lststuffing > li').show();
    }

    function PopupActivate(Id) {
        //debugger;
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }

        if (CharCode == 32) {

            $('#' + Id).modal('show');

            if (Id == "stuffingModal") {
                //debugger;
                $('#stuffingbox').focus();
                StuffingReqBinding();
            }

            if (Id == "PortOfCallModal") {
                //debugger;
                $('#PortOfCallbox').focus();
                //PartyBinding();

                LoadPortOfCall();

            }

            if (Id == "NextPortOfCallModal") {
                //debugger;
                $('#NextPortOfCallbox').focus();
                // PayeeBinding();
                LoadNextPortOfCall();
            }

            //if (Id == "PortModal") {
            //    //debugger;
            //    $('#Portbox').focus();
            //    PortBinding();
            //}
            //if (Id == "TransportModal") {
            //    //debugger;
            //    $('#Transportbox').focus();
            //    TransportBinding();
            //}
        }

    }

    $('#stuffingModal').on('shown.bs.modal', function () {
        $('#stuffingbox').focus();
    });
    $('#PortOfCallModal').on('shown.bs.modal', function () {
        $('#PortOfCallbox').focus();
    });
    $('#NextPortOfCallModal').on('shown.bs.modal', function () {
        $('#NextPortOfCallbox').focus();
    });

    $('.mTabindex').keydown(function (e) {
        ////debugger;
        var $focusable = $(this).find("[tabindex]:not([tabindex='-1'])");
        if ($focusable.last().is(":focus") && !e.shiftKey && e.key == "Tab") {
            e.preventDefault();
            $focusable.first().focus();
        }
        else
            if ($focusable.first().is(":focus") && e.shiftKey && e.key == "Tab") {
                e.preventDefault();
                $focusable.last().focus();
            }
    });





    //function SearchSRNo() {
    //    var SearchValue = $('#SearchSR').val().trim();
    //    $('#StuffingList').load('/Export/Loni_CWCExportV2/GetContainerStuffingApprovalSearch?SearchValue=' + SearchValue);
    //}

</script>

@*<script>

        function debounce(func, wait, immediate) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        };

    </script>*@
