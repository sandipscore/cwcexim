@model CwcExim.Areas.Master.Models.PpgMovementCharge

@using (Ajax.BeginForm("AddEditMstMovementCharge", "LoniCWCCharges", new AjaxOptions
{
    Confirm = "Are you sure you want to  Save?",
    HttpMethod = "POST",
    OnSuccess = "MovementChargeOnSuccess",
    OnFailure = "MovementChargeOnFailure"
}))
{
    @Html.AntiForgeryToken()
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">               
                <div class="row SignUp_space_bottom">
                    <div class="col-md-12 cwc_body">                       
                        <h5>Movement Charges <span class="triangle"></span></h5>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">                            
                            <label>Effective Date:</label>
                        </div>
                        <div class="col-md-2 Date_Img">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(m => m.EffectiveDate, new { @class = "form-control input-sm", @id = "MovementEffectiveDate", @readonly = true })
                            @Html.ValidationMessageFor(m => m.EffectiveDate, "", new { @class = "Error_Msg" })
                        </div>
                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.MovementVia, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.MovementVia, new List<SelectListItem> {
                       new SelectListItem {Text="LONI",Value="LONI" },
                       new SelectListItem {Text="TKD",Value="TKD" },
                        new SelectListItem {Text="ROAD",Value="ROAD" },
                   }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.MovementVia, "", new { @class = "Error_Msg" })
                        </div>      
                        @*<div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.MovementBy, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.MovementBy, new List<SelectListItem> {
                       new SelectListItem {Text="Road",Value="Road" },
                       new SelectListItem {Text="Train",Value="Train" },
                   }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.MovementBy, "", new { @class = "Error_Msg" })
                        </div>*@
                        <div class="col-md-1-5 col-md-offset-2 col_cus_2 padding_rt">
                            <label>Origin:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.Origin, new List<SelectListItem> {
                       new SelectListItem { Text="FAC",Value="FAC"},
                       new SelectListItem { Text="NON FAC",Value="NON FAC"}
                   }, "----Select----", new { @class = "form-contol input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.Origin, "", new { @class = "Error_Msg" })
                        </div>                      
                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.CargoType, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.CargoType, new List<SelectListItem> {
                                new SelectListItem {Text="Haz",Value="1" },
                                new SelectListItem {Text="Non Haz",Value="2" },
                                }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.CargoType, "", new { @class = "Error_Msg" })
                        </div>    
                        @*<div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.MovementVia, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.MovementVia, new List<SelectListItem> {
                       new SelectListItem {Text="LONI",Value="LONI" },
                       new SelectListItem {Text="TKD",Value="TKD" },
                   }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.MovementVia, "", new { @class = "Error_Msg" })
                        </div>*@                      
                        <div class="col-md-1-5 col-md-offset-2 col_cus_2 padding_rt" style="padding-right:0px;">
                            <span>Size:</span>
                        </div>
                        <div class="col-md-2">                        
                            @Html.DropDownListFor(m => m.Size, new List<SelectListItem> {
                                new SelectListItem { Text="--Select--",Value=""},
                                 new SelectListItem { Text="20",Value="20"},
                                 new SelectListItem { Text="40",Value="40"}
                            }, new { @class = "form-control input-sm" })                           
                        </div>
                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">

                        <div class="col-md-1-5 col_cus_2">
                            <label>Rate:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(m => m.Rate, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.Rate, "", new { @class = "Error_Msg" })
                        </div>
                        @*<div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.CargoType, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.CargoType, new List<SelectListItem> {
                                new SelectListItem {Text="Haz",Value="1" },
                                new SelectListItem {Text="Non Haz",Value="2" },
                                }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.CargoType, "", new { @class = "Error_Msg" })
                        </div>*@                       
                        

                    </div>
                </div>
                <div class="row">
                    <div class="stoke SignUp_space_bottom SignUp_space_top"></div>
                </div>
                <div class="row">
                    <div class="col-md-offset-4 col-md-2" style="text-align:center">
                        <input type="submit" id="BtnSave" value="Save" class="btn log_Btn_sm" />
                    </div>
                    <div class="col-md-2">
                        <input type="button" id="BtnReset" value="Reset" class="btn log_Btn_sm" onclick="ClearMovementCharge()" />
                    </div>
                </div>
                <div class="logSuccMsg Form_Space_top SignUp_space_bottom2" id="DivMovementSuccMsg" style="background-color:transparent;"></div>

            </div>
        </div>
    </div>
}
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div id="DivMovementRateList"></div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jqueryval")
<script>
    $(function () {
        $('#MovementEffectiveDate').datepicker({
            dateFormat: "dd/mm/yy",
            showOn: "button",
            buttonImage: "/Content/images/calendar.png",
            buttonImageOnly: true,
            buttonText: "Select date",
            changeMonth: true,
            changeYear: true,
            showAnima: "fadein",
            onClose: function () {
                $(".Date_Img .Error_Msg").text("");
            }
        });
        LoadMovementChargeList();
    });
    function LoadMovementChargeList() {
        $('#DivMovementRateList').load('/Master/LoniCWCCharges/MovementChargeList');
    }
    function ClearMovementCharge() {
        $('input[type="text"],select').val('');
        $('[data-valmsg-for]').html('');
        $('#Reefer').prop("checked", false);
    }
    function MovementChargeOnSuccess(data) {
        if (data.Status == 1) {
            if ($('#DivMovementSuccMsg').hasClass('logErrMsg'))
                $('#DivMovementSuccMsg').removeClass('logErrMsg').addClass('logSuccMsg');
            $('#DivMovementSuccMsg').html(data.Message);
            LoadMovementChargeList();
            ClearMovementCharge();
        }
        else {
            if ($('#DivMovementSuccMsg').hasClass('logSuccMsg'))
                $('#DivMovementSuccMsg').removeClass('logSuccMsg').addClass('logErrMsg');
            $('#DivMovementSuccMsg').html(data.Message);
        }
        setTimeout(function () { $('#DivMovementSuccMsg').html(''); }, 5000);
    }
    function MovementChargeOnFailure() { }
</script>
