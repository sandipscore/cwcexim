@model CwcExim.Areas.Master.Models.WFLDCWCChargesGroundRent
@using (Ajax.BeginForm("AddEditMstGroundRent", "VLDAMaster", new AjaxOptions
{
    Confirm = "Are you sure you want to  Save?",
    HttpMethod = "POST",
    OnSuccess = "GrndRentOnSuccess",
    OnFailure = "GrndRentOnFailure"
}))
{

    @Html.AntiForgeryToken()
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">

                <div class="row SignUp_space_bottom">
                    <div class="col-md-12 cwc_body">
                        <h5>Ground Rent <span class="triangle"></span></h5>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            <label>Effective Date:</label>
                        </div>
                        <div class="col-md-2 Date_Img">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(m => m.EffectiveDate, new { @class = "form-control input-sm", @id = "GroundEffectiveDate", @readonly = true })
                            @Html.ValidationMessageFor(m => m.EffectiveDate, "", new { @class = "Error_Msg" })
                        </div>
                        <div class="col-md-offset-2 col-md-1-5 col_cus_2">
                            <label>SAC Code:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(m => m.SacCode, new { @class = "form-control input-sm", @readonly = true })
                            <span class="search"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#myModal"></i></span>
                            @Html.ValidationMessageFor(m => m.SacCode, "", new { @class = "Error_Msg" })
                        </div>

                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            <label>Days Range:</label>
                        </div>
                        <div class="col-md-2">
                            <table>
                                <tbody>
                                    <tr>
                                        <td style="width:40%;">
                                            <span class="ReQSimbol">*</span>
                                            @Html.TextBoxFor(m => m.DaysRangeFrom, new { @class = "form-control input-sm", style = "padding:3px 5px;" })
                                            @Html.ValidationMessageFor(m => m.DaysRangeFrom, "", new { @class = "Error_Msg" })
                                        </td>
                                        <td style="text-align:center;">-</td>
                                        <td style="width:40%;">
                                            <span class="ReQSimbol">*</span>
                                            @Html.TextBoxFor(m => m.DaysRangeTo, new { @class = "form-control input-sm", style = "padding:3px 5px;" })
                                            @Html.ValidationMessageFor(m => m.DaysRangeTo, "", new { @class = "Error_Msg" })
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="col-md-1-5 col-md-offset-2 col_cus_2 padding_rt">
                            <label>Container/CBT Type:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.ContainerType, new List<SelectListItem> {
                       new SelectListItem { Text="Empty Container",Value="1"},
                       new SelectListItem { Text="Loaded Container",Value="2"}
                   }, "----Select----", new { @class = "form-contol input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.ContainerType, "", new { @class = "Error_Msg" })
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.CommodityType, new List<SelectListItem> {
                       new SelectListItem { Text="HAZ",Value="1"},
                       new SelectListItem { Text="Non HAZ",Value="2"}
                   }, "----Select----", new { @class = "form-contol input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.CommodityType, "", new { @class = "Error_Msg" })
                        </div>
                        @*<div class="col-md-1-5 col-md-offset-3">
                                @Html.LabelFor(m => m.Reefer, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-2">
                                <div class="boolean-container">
                                    @Html.CheckBoxFor(m => m.Reefer)
                                    <label for="Reefer"><i class="square"></i></label>
                                </div>
                            </div>*@
                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            <label>Rent Amount:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(m => m.RentAmount, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.RentAmount, "", new { @class = "Error_Msg" })
                        </div>
                        @*<div class="col-md-1-5 col-md-offset-3" style="padding-right:0px;">
                                @Html.LabelFor(m => m.ElectricityCharge, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-2">
                                <span class="ReQSimbol">*</span>
                                @Html.TextBoxFor(m => m.ElectricityCharge, new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.ElectricityCharge, "", new { @class = "Error_Msg" })
                            </div>*@

                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.Size, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.Size, new List<SelectListItem> {
                       new SelectListItem {Text="20",Value="20" },
                       new SelectListItem {Text="40",Value="40" },                       
                   }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.Size, "", new { @class = "Error_Msg" })
                        </div>
                        <div class="col-md-1-5 col-md-offset-2 col_cus_2">
                            <label>Operation Type:</label>
                        </div>
                        <div class="col-md-2">
                            <span class="ReQSimbol">*</span>
                            @Html.DropDownListFor(m => m.OperationType, new List<SelectListItem> {
                       new SelectListItem {Text="Import",Value="1" },
                       new SelectListItem {Text="Export",Value="2" },
                   }, "----Select----", new { @class = "form-control input-sm dropdown" })
                            @Html.ValidationMessageFor(m => m.OperationType, "", new { @class = "Error_Msg" })
                        </div>

                    </div>
                </div>
                <div class="row Form_Space_top">
                    <div class="form-group Form_Input">
                        <div class="col-md-1-5 col_cus_2">
                            @Html.LabelFor(m => m.IsODC, new { @class = "InputLabel" })
                        </div>
                        <div class="col-md-2">
                            <div class="boolean-container">
                                @Html.CheckBoxFor(m => m.IsODC)
                                <label for="IsODC"><i class="square"></i></label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="stoke SignUp_space_bottom SignUp_space_top"></div>
                </div>
                <div class="row">
                    <div class="col-md-offset-4 col-md-2" style="text-align:center">
                        <input type="submit" id="BtnSave" value="Save" class="btn log_Btn_sm" />
                    </div>
                    <div class="col-md-2">
                        <input type="button" id="BtnReset" value="Reset" class="btn log_Btn_sm" onclick="ClearGroundRent()" />
                    </div>
                </div>
                <div class="logSuccMsg Form_Space_top SignUp_space_bottom2" id="DivGrndSuccMsg" style="background-color:transparent;"></div>

            </div>
        </div>
    </div>
}
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div id="DivGroundRentList"></div>
        </div>
    </div>
</div>
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">List of SAC Code</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="box" type="text" />
                <ul class="navList" id="PartyList">
                    @{
                        if (ViewBag.ListOfSAC != null)
                        {
                            foreach (var item in ViewBag.ListOfSAC)
                            {
                                <li id="@item">@item</li>
                            }
                        }
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jqueryval")
<script>
    $(function () {
        $('#GroundEffectiveDate').datepicker({
            dateFormat: "dd/mm/yy",
            showOn: "button",
            buttonImage: "/Content/images/calendar.png",
            buttonImageOnly: true,
            buttonText: "Select date",
            changeMonth: true,
            changeYear: true,
            showAnima: "fadein",
            onClose: function () {
                $(".Date_Img .Error_Msg").text("");
            }
        });
        LoadGroundRentList();
    });
    function LoadGroundRentList() {
        $('#DivGroundRentList').load('/Master/VLDAMaster/GroundRentList');
    }
    function ClearGroundRent() {
        $('input[type="text"],select').val('');
        $('[data-valmsg-for]').html('');
        $('#IsODC').prop("checked", false);
    }
    function GrndRentOnSuccess(data) {
        debugger;
        if (data.Status == 1) {
            if ($('#DivGrndSuccMsg').hasClass('logErrMsg'))
                $('#DivGrndSuccMsg').removeClass('logErrMsg').addClass('logSuccMsg');
            $('#DivGrndSuccMsg').html(data.Message);
            // $('#DivBody').load('/Master/WFLDMaster/CreateGroundRent');
            setTimeout(ClearGroundRent, TimeInSeconds);
            LoadGroundRentList();
            //ClearGroundRent();
        }
        else {
            if ($('#DivGrndSuccMsg').hasClass('logSuccMsg'))
                $('#DivGrndSuccMsg').removeClass('logSuccMsg').addClass('logErrMsg');
            $('#DivGrndSuccMsg').html(data.Message);
        }
        setTimeout(function () { $('#DivGrndSuccMsg').html(''); }, 5000);
    }
    function GrndRentOnFailure() { }
    $('#box').keyup(function () {
        var valThis = $(this).val().toLowerCase();
        if (valThis == "") {
            $('.navList > li').show();
        } else {
            $('.navList > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(valThis) >= 0) ? $(this).show() : $(this).hide();
            });
        };
    });

    $('.navList li').on("click", function () {
        $('#SacCode').val($(this).text());
        $("#myModal").modal("hide");
    });
    var TimeInSeconds;
    $(document).ready(function () {
        TimeInSeconds = 5000;        
       
        });
</script>

