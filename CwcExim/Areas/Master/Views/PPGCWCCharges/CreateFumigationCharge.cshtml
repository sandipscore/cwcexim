@model CwcExim.Areas.Master.Models.PpgFumigationCharge

@{
    AjaxOptions options = new AjaxOptions();
    //options.Confirm = "Are You Sure You Want To Save?";
    options.HttpMethod = "POST";
    options.OnSuccess = "ChargesEntryOnSuccess";
    options.OnFailure = "ChargesEntryOnFailure";
    options.InsertionMode = InsertionMode.InsertAfter;
}

<script>
    $('#EffectiveDate').datepicker({
        dateFormat: "dd/mm/yy",
        showOn: "button",
        buttonImage: "/Content/images/calendar.png",
        buttonImageOnly: true,
        buttonText: "Select Date",
        changeMonth: true,
        changeYear: true,
        showAnima: "fadein",
        onClose: function () {
            $('[data-valmsg-for="EffectiveDate"]').html('<span></span>');
        }
    });
</script>

<div id="DivAddFumigationCharge">
    <div class="row">
        <div class="col-md-12">
            <div class="row SignUp_space_bottom">
                <div class="col-md-12 cwc_body">
                    <h5>Fumigation Charges <span class="triangle"></span></h5>
                </div>
            </div>

            @using (Ajax.BeginForm("AddEditFumigationChargeForCargo", "PPGCWCCharges", options))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.StringifyData)
                <div class="row Form_Space_top">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label class="Radiocontainer">
                                Cargo
                                @Html.RadioButton("Type", "1", new { @class = "", @id = "Cargo", @checked = true, @onclick = "GoToCargo();" })
                                <span class="checkmark"></span>
                            </label>
                            <label class="Radiocontainer">
                                Container
                                @Html.RadioButton("Type", "2", new { @class = "", @id = "Container", @onclick = "GoToContainer();" })
                                <span class="checkmark"></span>
                            </label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <span class="ReQSimbol">*</span>
                            <label>Effective Date:</label>
                            <div class="position-relative Date_Img">
                                @Html.TextBoxFor(m => m.EffectiveDate, new { @class = "", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.EffectiveDate, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <span class="ReQSimbol">*</span>
                            <label>Area From:</label>
                            <div class="position-relative Date_Img">
                                @Html.TextBoxFor(m => m.FromWeight, new { @class = "" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <span class="ReQSimbol">*</span>
                        <label>Area To:</label>
                        @Html.TextBoxFor(m => m.ToWeight, new { @class = "" })
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <span class="ReQSimbol">*</span>
                            <label>Rate:</label>
                            <div class="position-relative Date_Img">
                                @Html.TextBoxFor(m => m.WeightRate, new { @class = "" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-left">
                    <input type="button" class="btn btn-primary mr-1 btn-100px" id="btnAddDet" value="Add" onclick="AddEntryDet()">
                    <input type="button" class="btn btn-primary-border btn-100px" id="btnResetDet" value="Reset" onclick="ResetEntryDet()">
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div id="tblEntryDet"></div>
                    </div>
                </div>

                <div class="row">
                    <div class="stoke SignUp_space_top SignUp_space_bottom"></div>
                </div>

                <div class="d-flex justify-content-left">
                    <input type="submit" class="btn btn-primary mr-1 btn-100px" value="Save" id="BtnSave">
                    <input type="button" class="btn btn-primary-border btn-100px" id="btnReset" value="Reset" onclick="ResetAllFields()">
                </div>

                <div class="row Form_Space_top">
                    <div class="logSuccMsg SignUp_space_bottom2" style="background-color:transparent">
                        <div id="DivEntryChargesMsg"></div>
                    </div>
                </div>

            }
            <div class="row">
                <div class="col-md-12">
                    <div id="DivChargeEntryList"></div>
                </div>
            </div>

        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jqueryval")
<script>
    var Status = 0;
    $(document).ready(function () {
        ArrayEntryDet = [];
        LoadChargeList();

    });
    function GoToCargo() {
        debugger;
        $("#DivRbtnContainer").hide();
        $('#DivAddFumigationCharge').load('/Master/PPGCWCCharges/CreateFumigationCharge');
    }

    function GoToContainer() {
        debugger;
        $("#DivRbtnCargo").hide();
        $('#DivAddFumigationCharge').load('/Master/PPGCWCCharges/CreateFumigationChargeContainer');
    }


    //function ValidateEntryData() {
    //    debugger;
    //    var Status = true;
    //    if ($('#FromWeight').val() == "") {
    //        $('[data-valmsg-for="FromWeight"]').html('<span>Fill Out This Field</span>');
    //        Status = false;
    //    }
    //    if ($('#FromWeight').val() != "") {
    //        if (!DecimalValidationGW("FromWeight")) {
    //            $('[data-valmsg-for="FromWeight"]').html('<span>Weight must be a decimal up to 2 places and less then 99999999.99<span>');
    //            Status = false;
    //        }
    //    }
    //    if ($('#ToWeight').val() == "") {
    //        $('[data-valmsg-for="ToWeight"]').html('<span>Fill Out This Field</span>');
    //        Status = false;
    //    }
    //    if ($('#ToWeight').val() != "") {
    //        if (!DecimalValidationGW("ToWeight")) {
    //            $('[data-valmsg-for="ToWeight"]').html('<span>Weight must be a decimal up to 2 places and less then 99999999.99<span>');
    //            Status = false;
    //        }
    //    }

    //    if ($('#WeightRate').val() == "") {
    //        $('[data-valmsg-for="WeightRate"]').html('<span>Fill Out This Field</span>');
    //        Status = false;
    //    }
    //    if ($('#WeightRate').val() != "") {
    //        if (!DecimalValidationGW("WeightRate")) {
    //            $('[data-valmsg-for="WeightRate"]').html('<span>Rate must be a decimal up to 2 places and less then 99999999.99<span>');
    //            Status = false;
    //        }
    //    }
    //}
    function DecimalValidationGW(elem) {
        var State = true;
        var Value = $('#' + elem).val();
        if (!Value.match(/^[\d]{1,8}\.\d{0,2}$/) && !Value.match(/^[\d]{1,8}$/))
            State = false;
        return State;
    }

    var ArrayEntryDet = [];
    function AddEntryDet() {
        //if (ValidateEntryData()) {
        debugger;
        if ($('#FromWeight').val() == '') {
            alert("Fill Out Weight From Field");
            return false;

        }
        if ($('#FromWeight').val() != "") {
            if (!DecimalValidationGW("FromWeight")) {
                alert("Weight must be a decimal up to 2 places and less then 99999999.99");
                return false;
            }
        }
        if ($('#ToWeight').val() == '') {
            alert("Fill Out Weight To Field");
            return false;

        }
        if ($('#ToWeight').val() != "") {
            if (!DecimalValidationGW("ToWeight")) {
                alert("Weight must be a decimal up to 2 places and less then 99999999.99");
                return false;
            }
        }
        if ($('#WeightRate').val() == '') {
            alert("Fill Out Rate Field");
            return false;

        }
        if ($('#WeightRate').val() != "") {
            if (!DecimalValidationGW("WeightRate")) {
                alert("Rate must be a decimal up to 2 places and less then 99999999.99");
                return false;
            }
        }

        var ChargeEntryDet = {
            "EffectiveDate": $('#EffectiveDate').val(),
            "FromWeight": $('#FromWeight').val(),
            "ToWeight": $('#ToWeight').val(),
            "WeightRate": $('#WeightRate').val()
        };
        ArrayEntryDet.push(ChargeEntryDet);
        $('#tblEntryDet').html('');
        GenerateTable();
        ResetEntryDet();
        $('[data-valmsg-for]').html('');

    }
    function GenerateTable() {
        tablehtml = '';
        var tablehtml = '<table id="tblEntryDet" class="table table-striped table-bordered dataTable" style="width:100%;"><thead><tr><th class="text-center">SL No</th><th>Effective Date</th><th>Weight From</th><th>Weight To</th><th>Rate</th><th class="text-center">Remove</th></tr></thead><tbody>';
        $.each(ArrayEntryDet, function (i, data) {
            tablehtml += '<tr><td class="text-center">' + (i + 1) + '</td><td>' + data.EffectiveDate + '</td><td>' + data.FromWeight + '</td><td>' + data.ToWeight + '</td><td>' + data.WeightRate + '</td><td class="text-center"><a href="#" onclick="DeleteEntryDet(' + i + ')"><i class="fa fa-window-close Delete"></i></a></td></tr>';
        });
        tablehtml += '</tbody></table>';
        $('#tblEntryDet').html(tablehtml);
    }

    function ResetEntryDet() {
        $('[data-valmsg-for]').html('');
        $('input[type="text"],Select,textarea').val('');
    }

    $('#BtnSave').on("click", function () {
        debugger;
        if ($('#tblEntryDet>tbody').html() == '' || $('#tblEntryDet>tbody').html() == undefined) {
            $('#DivEntryChargesMsg').html('Add The Record To Save');

        }

        else {
            $('#StringifyData').val(JSON.stringify(ArrayEntryDet));
            setTimeout(function () { $('#DivEntryChargesMsg').html(''); }, 5000);
            ArrayEntryDet = [];
        }

    });

    function ChargesEntryOnSuccess(data) {
        debugger;
        if (data.Status == 1) {
            if ($('#DivEntryChargesMsg').hasClass('logErrMsg'))
                $('#DivEntryChargesMsg').removeClass('logErrMsg').addClass('logSuccMsg');
            $('#DivEntryChargesMsg').html(data.Message);
            ResetAllFields();
            LoadChargeList();
        }
    }
    function ResetAllFields() {
        debugger;
        $('[data-valmsg-for]').html('');
        $('input[type="text"],Select,textarea').val('');
        //  $('#tblEntryDet>tbody').html('');
        $('#tblEntryDet').html('');
        ArrayEntryDet = [];
        $('#StringifyData').val('');
    }
    function LoadChargeList() {
        debugger;
        $('#DivChargeEntryList').load('/Master/PPGCWCCharges/ListOfFumigationChargeDetails');
    }

    function DeleteEntryDet(i) {
        debugger;
        ArrayEntryDet.splice(i, 1);
        GenerateTable();
    }
    function ChargesEntryOnFailure() { }

</script>
