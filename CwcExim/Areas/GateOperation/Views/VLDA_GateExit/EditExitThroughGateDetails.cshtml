@model CwcExim.Areas.GateOperation.Models.WFLDExitThroughGateDetails


                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ExitIdDtls)
                    @Html.HiddenFor(m => m.ExitIdHeader)
                @*@Html.HiddenFor(m => m.ShippingLineId)*@
@if (ViewBag.ShippingLineId !=null)
{
<input type="hidden" id="ShippingLineIdDtl" name="ShippingLineIdDtl" value=@ViewBag.ShippingLineId />
}
else
{
    <input type="hidden" id="ShippingLineIdDtl" name="ShippingLineIdDtl" />
}
@if (ViewBag.cfsCode != null)
{
    <input type="hidden" id="EditCfsCode" name="EditCfsCode" value=@ViewBag.cfsCode />
}
else
{
    <input type="hidden" id="EditCfsCode" name="EditCfsCode" />
}





<input type="hidden" id="txtCFSCode" name="txtCFSCode" />



<input type="hidden" id="ViewFlagEdit" name="ViewFlagEdit" value="@ViewBag.EditMode" />

@{ 
if(ViewBag.LstcontainerJson != null)
                   {
<input type="hidden" id="LstcontainerJson" value="@ViewBag.LstcontainerJson.ToString()" />
                    }
                    else
                    {
<input type="hidden" id="LstcontainerJson" value="" />
    }
}
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5" style="padding-right:0px;">
                                    @Html.Label("Container/CBT/Cargo No:")
                                </div>
                                <div class="col-md-2-5">
                                    @Html.Hidden("txtContainerId")
                                    @Html.TextBoxFor(m=>m.ContainerNo, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "30" })
                                    @Html.ValidationMessageFor(m => m.ContainerNo, "", new { @class = "Error_Msg" })
                                    <span class="search" id="ShippingLineSearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#ContainerModal"></i></span>
                                </div>
                                <div class="col-md-1" style="padding-right:0px;">
                                   
                                    @Html.Label("Size :")
                                </div>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(m=>m.Size, new List<SelectListItem>
                               {
                                new SelectListItem { Text="20",Value="20"},
                                new SelectListItem { Text="40",Value="40"},
                                //new SelectListItem { Text="ODC",Value="ODC"},
                                }, "----Select----", new { @class = "form-control input-sm" })
                                   @Html.ValidationMessageFor(m => m.Size, "", new { @class = "Error_Msg" })
                                </div>
                                <div class="col-md-1" style="padding-right:0px;display:none;">
                                    <label>Reefer:</label>
                                </div>
                                <div class="col-md-1" style="display:none;">
                                    <div class="boolean-container">
                                        <div class="boolean-container">
                                            @Html.CheckBoxFor(m => m.Reefer, new { @class = "", @id = "Reefer" })
                                            <label for="Reefer"><i class="square"></i></label>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5" style="padding-right:0px;">
                                    @Html.Label("Shipping Line:")
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextBoxFor(m => m.ShippingLine, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "30" })
                                    @Html.ValidationMessageFor(m => m.ShippingLine,"", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5" style="padding-right:0px;">
                                    @Html.Label("CHA Name:")
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextBoxFor(m => m.CHAName, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "30" })
                                    @Html.ValidationMessageFor(m => m.CHAName,"", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5" style="padding-right:0px;">
                                    @Html.Label("Cargo Description:")
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextAreaFor(m => m.CargoDescription, new { @class = "form-cotrol input-sm", @style = "width:100%;height:100px;", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "1000" })
                                    @Html.ValidationMessageFor(m => m.CargoDescription, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5">
                                    @Html.Label("Cargo Type:")
                                </div>
                                <div class="col-md-2-5">
                                    @Html.DropDownListFor(m => m.CargoType, new List<SelectListItem>
                               {
                                new SelectListItem { Text="HAZ",Value="1"},
                                new SelectListItem { Text="NON-HAZ",Value="2"},
                                
                                }, "----Select----", new { @class = "form-control input-sm" })
                                    @Html.ValidationMessageFor( m=> m.CargoType, "", new { @class = "Error_Msg" })                                  
                                </div>
                                <div class="col-md-1-5 col-md-offset-4" style="padding-right:0px;">
                                    @Html.Label("Vehicle No:")
                                </div>
                                <div class="col-md-2-5">
                                    @*<input type="text" id="txtVehicleNo" name="txtVehicleNo" />*@
                                    @Html.TextBoxFor(m=>m.VehicleNo, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return AllowOnlyInteger(event)", maxlength = "10" })
                                    @Html.ValidationMessageFor(m => m.VehicleNo, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5">
                                    @Html.Label("No of Packages:")
                                </div>
                                <div class="col-md-2-5">
                                    @*@Html.TextBox("txtNoOfPackages", null,new { @class = "form-control intpu-sm"})*@
                                    @Html.TextBoxFor(m => m.NoOfPackages, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return AllowOnlyInteger(event)", maxlength = "10" })
                                    @Html.ValidationMessageFor(m => m.NoOfPackages, "", new { @class = "Error_Msg" })
                                </div>
                                <div class="col-md-1-5 col-md-offset-4 padding_rt">
                                   <label>Gross Weight:</label>
                                </div>
                                <div class="col-md-2-5">
                                    @Html.TextBoxFor(m => m.GrossWeight, "", new { @class = "form-control input-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return AllowOnlyDecimal(event)", maxlength = "12" })
                                    @Html.ValidationMessageFor(m => m.GrossWeight,"", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5" style="padding-right:0px;">
                                    @Html.Label("Depositor Name:")
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextBoxFor(m => m.DepositorName, "", new { @class = "form-control intpu-sm", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "30" })
                                    @Html.ValidationMessageFor(m => m.DepositorName, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                        <div class="row Form_Space_top">
                            <div class="form-group Form_Input">
                                <div class="col-md-1-5">
                                    @Html.Label("Remarks:")
                                </div>
                                <div class="col-md-10-5">
                                    @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control intpu-sm", @style = "width:100%;height:100px;", @onblur = "ClearErrMsg(this)", onkeypress = "return ValidateData(event)", maxlength = "1000" })
                                    @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "Error_Msg" })
                                </div>
                            </div>
                        </div>
                       
                        <div class="logSuccMsg Form_Space_bottom Form_Space_top" id="DivMsg" style="background-color:transparent"></div>
                                <div class="logSuccMsg SignUp_space_bottom2" style="background-color:transparent">
                                <div id="DivExitThroughGateMsg"></div>
                                </div>
<div id="ContainerModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content popup_modal">
            <div class="modal-header popup_header">
                <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title"> Entered Container</h4>
            </div>
            <div class="modal-body popup_body">
                <input placeholder="Search Me" id="Containerbox" type="text" />
                <ul class="navList" id="lstContainer">
                    @{
                        if (@ViewBag.Lstcontainer != null)
                        {
                            @*foreach (var item in @ViewBag.Lstcontainer)
                            {
                                <li id="@item.ContainerName">@item.ContainerName</li>
                            }*@
                        }
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-offset-6 col-md-6">
                        <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




                   
              

@Scripts.Render("~/bundles/jqueryval")
<script>
    @*var ShippingId=@ViewBag.ShippingLineId;
    if (@ViewBag.ShippingLineId  != null) {
        $("#ShippingLineId").val(ShippingId);
        alert($("#ShippingLineId").val());
    }*@
    
    var TimeInSeconds;
    $(document).ready(function () {

        TimeInSeconds = 5000;

        GenerateLstContainer();



    });

    function ResetGateEntry() {
        $('input[type="text"],textarea,select').val('');
        $('input[type="checkbox"').prop('checked', false);
        $('[data-valmsg-for]').html('');
    }
    //function GateEntryOnSuccess(data) { }
   // function GateEntryOnFailure() { }
    function LoadGateExitView() {
        $('#DivBody').load('/GateOperation/VLDA_GateExit/CreateExitThroughGate');
    }

    function GateExitOnSuccess(data) {

        debugger;
        var data = JSON.parse(data);
        if (data.Status == 1 ||data.Status==2) {
            if ($('#DivExitThroughGateMsg').hasClass('logErrMsg'))
                $('#DivExitThroughGateMsg').removeClass('logErrMsg').addClass('logSuccMsg');
            $('#DivExitThroughGateMsg').html(data.Message);
            setTimeout(LoadGateExitView, TimeInSeconds);
            GetExitThroughGateList();
        }
        //else if (data.Status == 2) {
        //    $('[data-valmsg-for="CountryName"]').html('<span>' + data.Message + '</span>');
        //}
        //else if (data.Status == 3) {
        //    $('[data-valmsg-for="CountryAlias"]').html('<span>' + data.Message + '</span>');
        //}
        else {
            if ($('#DivExitThroughGateMsg').hasClass('logSuccMsg'))
                $('#DivExitThroughGateMsg').removeClass('logSuccMsg').addClass('logErrMsg');
            $('#DivExitThroughGateMsg').html(data.Message);
        }
    }
    function GateExitOnFailure() {
        alert("Error");
    }



    function ClearErrMsg(elem) {
        $('[data-valmsg-for="' + elem.id + '"]').html('');
    }

    function ValidateData(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if (CharCode == 32) {
            return true;
        }
        if ((CharCode > 31 & CharCode < 48) || (CharCode > 57 & CharCode < 65) || (CharCode > 90 & CharCode < 97) || (CharCode > 122)) {
            evt.preventDefault();
            return false;
        }
        return true;
    }

    function AllowOnlyInteger(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if ((CharCode > 47 & CharCode < 58) || CharCode == 8) {
            return true;
        }
        else {
            evt.preventDefault;
            return false;
        }
    }
    function AllowOnlyDecimal(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if ((CharCode > 47 & CharCode < 58) || (CharCode == 46) || CharCode == 8) {
            return true;
        }
        else {
            evt.preventDefault;
            return false;
        }
    }

</script>

<script>
    function GenerateLstContainer() {
        debugger;
        if ($('#LstcontainerJson').val() != null && $('#LstcontainerJson').val() != "") {
            var parties = JSON.parse($('#LstcontainerJson').val());
            var html = '';
            $.each(parties, function (i, item) {
                html += '<li id="' + item.ContainerName + '" " onclick="GetPayByDetails(this)">' + item.ContainerName + '</li>';
            });
            $('#lstContainer').html(html);
        }
    }


    function GetPayByDetails(elem) {
        $("#ContainerNo").val('');
        $('#ContainerNo').val($(elem).text());
        $('#txtContainerId').val($(elem).attr('id'));

        $("#ContainerModal").modal("hide");

        var parties = JSON.parse($('#LstcontainerJson').val());
        var payby = $.grep(parties, function (item) { return item.ContainerName == $(elem).attr('id'); })[0];
        debugger;
        $('#ShippingLineIdDtl').val('');
        $('#ShippingLine').val(payby.shippingLine);
        $('#ShippingLineIdDtl').val(payby.shippingLineId);
        $('#CFSCode').val(payby.CFSCode);
        alert($('#CFSCode').val());
        $('#shippingLineId').val($('#ShippingLineIdDtl').val());
         //alert($('#shippingLineId').val());
    }

    $('#Containerbox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstContainer > li').show();
        else {
            $('#lstContainer > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });

</script>