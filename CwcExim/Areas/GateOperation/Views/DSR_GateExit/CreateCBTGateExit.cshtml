@model CwcExim.Areas.GateOperation.Models.DSRGateExitCBT

@{
    AjaxOptions options = new AjaxOptions();
    //options.Confirm = "Are You Sure You Want To Save?";
    options.HttpMethod = "POST";
    options.OnSuccess = "GateExitOnSuccess";
    options.OnFailure = "GateExitOnFailure";
    options.InsertionMode = InsertionMode.InsertAfter;
}
<script type="text/javascript">
    var TimeInSeconds;
    $(document).ready(function () {

        TimeInSeconds = 3000;



    });

    function GetExitThroughGateList() {
        debugger;
        //$('#DivGateExitList').load('/GateOperation/Hdb_CWCImport/EntryThroughGateList');
        var Token = $('input[name="__RequestVerificationToken"]').val();
        $.ajax({
            url: '/GateOperation/DSR_GateExit/GetAllCBTExitThroughGate',
            type: 'GET',
            headers: { '__RequestVerificationToken': Token },
            dataType: 'text',
            async: false,
            success: function (data) {
                // alert(data);GetContainerForGatePass
                if (data != null && data != "" && data !=undefined) {
                    $("#DivGateExitList").html('');
                    $("#DivGateExitList").html(data);
                }
                else
                {
                    $("#DivGateExitList").html('');

                }
            }
        });
    }


</script>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-offset-0-5 col-md-11">
            <div class="Head_h4">

                @using (Ajax.BeginForm("AddEditExitThroughGateCBT", "DSR_GateExit", options))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m=>m.GateInDate)
                    <div class="row">
                        <div class="col-md-12">
                            <h4>CBT Exit Through Gate</h4>
                        </div>
                    </div>
                    <div class="row Form_Space_top">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2">
                                <label>Gate Exit No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.GateExitNo, new { @class = "form-control input-sm", @readonly = "true" })
                                @Html.ValidationMessageFor(m => m.GateExitNo, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-2 col-md-offset-1-5 col_cus_2 col_cus_offset_0_5 padding_rt">
                                <label>Gate Exit Date & Time:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5 Date_Img">
                                @Html.TextBoxFor(m => m.GateExitDateTime, new { @class = "form-control", placeholder = "dd/mm/yyyy", @readonly = true,Value = DateTime.Now.ToString("dd/MM/yyyy") })
                                @Html.ValidationMessageFor(m => m.GateExitDateTime, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-2 col_cus_2_5">
                                <div class="input-group clockpicker" data-placement="left" data-align="top">
                                    <input type="text" id="time" name="time" class="form-control" value="00:00" readonly="readonly" style="background-color:#fff;z-index:0;" />
                                    <input type="hidden" id="EditTime" name="EditTime" value="@ViewBag.strTime" />
                                    <span class="input-group-addon" style="padding:2px 10px;">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top Form_Space_bottom">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>CBT No:</label>
                            </div>
                            <div class="col-md-2-5">
                                @Html.TextBoxFor(m => m.CBTNo, new { @class = "form-control input-sm", @readonly = "true" })
                                <span class="search" id="CBTModalSearch"><i class="fa fa-search" aria-hidden="true" data-toggle="modal" data-target="#CBTModal"></i></span>
                                @Html.ValidationMessageFor(m => m.CBTNo, "", new { @class = "Error_Msg" })
                                @Html.HiddenFor(m=>m.CFSCode)
                            </div>
                            <div class="col-md-1-5 col_cus_2 col_cus_offset_3 col-md-offset-4">
                                @Html.LabelFor(m => m.Size, new { @class = "InputLabel" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-2 col_cus_2_5 ">
                                @Html.TextBoxFor(m => m.Size, new { @class = "form-control", @readonly = true })
                                @Html.ValidationMessageFor(m => m.Size, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row Form_Space_top Form_Space_bottom">
                        <div class="form-group Form_Input">
                            <div class="col-md-1-5 col_cus_2 padding_rt">
                                <label>Driver Name:</label>
                            </div>
                            <div class="col-md-4-5">
                                @Html.TextBoxFor(m => m.DriverName, new { @class = "form-control input-sm" })
                                @Html.ValidationMessageFor(m => m.DriverName, "", new { @class = "Error_Msg" })
                            </div>
                            <div class="col-md-1-5 col_cus_2 col-md-offset-2">
                                <label>Contact No:</label>
                            </div>
                            <div class="col-md-2 col_cus_2_5 ">
                                @Html.TextBoxFor(m => m.ContactNo, new { @class = "form-control", maxlength = "10", onkeypress = "return AllowOnlyInteger(event)" })
                                @Html.ValidationMessageFor(m => m.Size, "", new { @class = "Error_Msg" })
                            </div>
                        </div>
                    </div>
                  
                    <div class="row">
                        <div class="stoke SignUp_space_top2 SignUp_space_bottom2"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-offset-4 col-md-2">
                            <input type="submit" id="btnSave" class="btn log_Btn_sm" value="Save" />
                        </div>
                        <div class="col-md-2">
                            <input type="button" id="btnReset" class="btn log_Btn_sm" value="Reset" onclick="ResetAllFields()" />
                        </div>
                    </div>
                   

                        <div class="logSuccMsg Form_Space_top" id="DivMsg" style="background-color:transparent"></div>
                            <div class="logSuccMsg SignUp_space_bottom2" style="background-color:transparent">
                                <div id="DivExitThroughGateMsg" style="background-color:transparent"></div>
                            </div>
                            @*}*@

                        


                            <div id="CBTModal" class="modal fade" role="dialog">
                                <div class="modal-dialog">
                                    <!-- Modal content-->
                                    <div class="modal-content popup_modal">
                                        <div class="modal-header popup_header">
                                            <button type="button" class="close" data-dismiss="modal"><i class="fa fa-times" aria-hidden="true"></i></button>
                                            <h4 class="modal-title"> CBT No</h4>
                                        </div>
                                        <div class="modal-body popup_body">
                                            <input placeholder="Search Me" id="CBTbox" type="text" />
                                            <ul class="navList" id="lstCBT">
                                                @{
                                                    if (@ViewBag.LstCBT != null)
                                                    {
                                                        foreach (var item in @ViewBag.LstCBT)
                                                        {
                                                            <li id="@item.CFSCode" onclick="GetCBTDet('@item.CBTNo','@item.CFSCode','@item.Size','@item.GateInDate')">@item.CBTNo</li>
                                                        }
                                                    }
                                                }
                                            </ul>
                                        </div>
                                        <div class="modal-footer">
                                            <div class="row">
                                                <div class="col-md-offset-6 col-md-6">
                                                    <button type="button" class="btn log_Btn_sm" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                                                    }

                <div class="row Form_Space_top Form_Space_bottom">
                    <div class="form-group Form_Input">
                        <div class="col-md-offset-5 col-md-4" style="text-align:right;">
                            <label>CBT No:</label>
                        </div>
                        <div class="col-md-3">
                            @Html.TextBox("GESearch", "", new { placeholder = "Search Here" })
                            @*<input id="PartyCode" name="PartyCode" type="text" value="gfh gf">*@
                            <span class="search"><i class="fa fa-search" aria-hidden="true" onclick="SearchGateExit()"></i></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div id="DivGateExitList"></div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")
<script>

    function GetCBTDet(CBTNo, CFSCode, Size, GateInDate)
    {
        debugger;
        var cbt = CBTNo.split('_');
        $('#CBTNo').val(cbt[0]);
        $('#CFSCode').val(CFSCode);
        $('#Size').val(Size);
        $('#GateInDate').val(GateInDate);
        $('#CBTModal').modal("hide");

    }


    $('#CBTbox').keyup(function () {
        var val = $(this).val().toLowerCase();
        if (val == "")
            $('#lstCBT > li').show();
        else {
            $('#lstCBT > li').each(function () {
                var text = $(this).text().toLowerCase();
                (text.indexOf(val) >= 0 ? $(this).show() : $(this).hide());
            });
        }
    });


   

 

    $(document).ready(function () {



        GetExitThroughGateList();

        var editTime = $("#EditTime").val();
        //alert(editTime);
        if (editTime != null && editTime != "") {
            $("#time").val(editTime);
        }

        $("#GateExitDateTime").datepicker({
            dateFormat: "dd/mm/yy",
            showOn: "button",
            buttonImage:  "/Content/images/calendar.png",
            buttonImageOnly: true,
            buttonText: "Select date",
            changeMonth: true,
            maxDate: new Date(),
            changeYear: true,
            showAnima: "fadein",
            onSelect: function (dateText) {
                var From = $('#GateInDate').val();
                var To = $('#GateExitDateTime').val().toString("dd/mm/yyyy");
                var SF = From.split('/');
                var ST = To.split('/');
                var STyear = ST[2].split(" "); //Split Time and Year From InvoiceDate;
                //var FromDate = new Date(SF[2], (Number(SF[1]) - 1), SF[0]);
                //var ToDate = new Date(ST[2], (Number(ST[1]) - 1), ST[0]);
                var FromDate = SF[1] + '/' + SF[0] + '/' + SF[2]; // Createing Date In DD/MM/YYYY;
                var ToDate = ST[1] + '/' + ST[0] + '/' + STyear[0]; // Createing Date In DD/MM/YYYY;
                var dt1 = new Date(FromDate);
                var dt2 = new Date(ToDate);
                if (dt1 > dt2) {
                    alert("Gate Exit Date Must be Greater Than or Equal To Gate Entry Date !!");
                    return false;
                }
                else
                    return true;
            },
            onClose: function () {
                $(".Date_Img .Error_Msg").text("");
                $('[data-valmsg-for="Data"]').html('<span></span>');
            }
        });

       

       
    });
   

    function LoadGateExitView() {
        $('#DivBody').load('/GateOperation/DSR_GateExit/CreateCBTGateExit');
    }

    function GateExitOnSuccess(data) {

        debugger;
        if (data.Status == 1 || data.Status == 2) {

            if ($('#DivExitThroughGateMsg').hasClass('logErrMsg'))
                $('#DivExitThroughGateMsg').removeClass('logErrMsg').addClass('logSuccMsg');
            $('#DivExitThroughGateMsg').html(data.Message);
            setTimeout(LoadGateExitView, TimeInSeconds);
            //GetExitThroughGateList();
        }

        else {
            if ($('#DivExitThroughGateMsg').hasClass('logSuccMsg'))
                $('#DivExitThroughGateMsg').removeClass('logSuccMsg').addClass('logErrMsg');
            $('#DivExitThroughGateMsg').html(data.Message);
        }
    }
    function GateExitOnFailure() {
    }

   

   

    function ClearErrMsg(elem) {
        $('[data-valmsg-for="' + elem.id + '"]').html('');
    }

    function ValidateData(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if (CharCode == 32) {
            return true;
        }
        if ((CharCode > 31 & CharCode < 48) || (CharCode > 57 & CharCode < 65) || (CharCode > 90 & CharCode < 97) || (CharCode > 122)) {
            evt.preventDefault();
            return false;
        }
        return true;
    }

    function AllowOnlyInteger(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if ((CharCode > 47 & CharCode < 58) || CharCode == 8) {
            return true;
        }
        else {
            evt.preventDefault;
            return false;
        }
    }
    function AllowOnlyDecimal(evt) {
        var CharCode;
        if (window.event) {
            CharCode = window.event.keyCode;
        }
        else {
            CharCode = evt.which;
        }
        if ((CharCode > 47 & CharCode < 58) || (CharCode == 46) || CharCode == 8) {
            return true;
        }
        else {
            evt.preventDefault;
            return false;
        }
    }
   

    $('#btnSave').on("click", function () {
        debugger;
        var From = $('#GateInDate').val();
        var To = $('#GateExitDateTime').val().toString("dd/mm/yyyy");
        var SF = From.split('/');
        var ST = To.split('/');
        var STyear = ST[2].split(" "); //Split Time and Year From InvoiceDate;
        //var FromDate = new Date(SF[2], (Number(SF[1]) - 1), SF[0]);
        //var ToDate = new Date(ST[2], (Number(ST[1]) - 1), ST[0]);
        var FromDate = SF[1] + '/' + SF[0] + '/' + SF[2]; // Createing Date In DD/MM/YYYY;
        var ToDate = ST[1] + '/' + ST[0] + '/' + STyear[0]; // Createing Date In DD/MM/YYYY;
        var dt1 = new Date(FromDate);
        var dt2 = new Date(ToDate);
        if (dt1 > dt2) {
            alert("Gate Exit Date Must be Greater Than or Equal To Gate Entry Date !!");
            return false;
        }
        else if($('#CBTNo').val()=="" || $('#CBTNo').val()==undefined)
        {
            alert("Select CBTNo !!");
            return false;
        }
        else
        {
            return true;
        }
    });



    function ResetAllFields() {
        $('[data-valmsg-for]').html('');
        $('#GateExitNo').val('');
        $('#GateInDate').val('');
        $('#CBTNo').val('');
        $('#CFSCode').val('');
        $('#Size').val('');
        $('#DriverName').val('');
        $('#ContactNo').val('');

    }

   

  
    $('.clockpicker').clockpicker({
        donetext: 'Done',
        twelvehour: true
    });

    function SearchGateExit() {
        debugger;
        if ($('#GESearch').val().trim() == "" || $('#GESearch').val().trim() == null) {
            GetExitThroughGateList();
        }
        else {
            $('#DivGateExitList').load('/GateOperation/DSR_GateExit/SearchGateExitCBT?CBTNo=' + $('#GESearch').val().trim());

        }
    }

</script>





