@model CwcExim.Models.SignupWithId


@{

    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.Confirm = "Do you wish to submit this form?";
    options.OnBegin = "OnBegin";
    options.OnComplete = "OnComplete";
    options.OnFailure = "OnFailure";
    options.OnSuccess = "OnSuccess";
    options.LoadingElementDuration = 1000;
    options.LoadingElementId = "divProgress";
    options.UpdateTargetId = "divResponse";
    options.InsertionMode = InsertionMode.InsertAfter;
}

@using (Ajax.BeginForm("SignUp", "User", null,options, new { id = "FormSignUp" }))
{
    @Html.AntiForgeryToken()

    <div class="container-fluid form-horizontal">
        
            <div class="row">
                <div class="col-md-12 SignUp_head">
                    <h4>SignUp</h4>
                </div>
            </div>
        <div class="row">
            <div class="singup_body">
                    <div class="row SignUp_space_top SignUp">
                        <div class="col-md-1-5" style="padding:0px 5px;">
                            @Html.LabelFor(model => model.LoginId, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-4-5" style="padding:0px 5px;">
                            @Html.EditorFor(model => model.LoginId, new { htmlAttributes = new { @class = "form-control",id="LoginWithId" }})
                            @Html.HiddenFor(model => model.LoginId,new { htmlAttributes = new { id = "HdnLoginWithId" } })
                            @Html.ValidationMessageFor(model => model.LoginId, "", new { @class = "SignUpErr" })
                        </div>
                        <div class="col-md-1-5" style="padding:0px 5px;">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-4-5" style="padding:0px 5px;">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "SignUpErr" })
                        </div>
                    </div>
                    <div class="row SignUp_space_top2 SignUp">
                        <div class="col-md-1-5" style="padding:0px 5px;">
                            @Html.LabelFor(model => model.PanNo, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-4-5" style="padding:0px 5px;">
                            @Html.EditorFor(model => model.PanNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PanNo, "", new { @class = "SignUpErr" })
                        </div>
                    </div>
                <div class="row SignUp_space_top2 SignUp_space_bottom2">
                    <div style="padding:5px 15px;border:1px solid #337ab7">
                        <div class="row Form_Space_top SignUp">
                            <div class="col-md-1-5" style="padding:0px 5px;">
                                @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-4-5" style="padding:0px 5px;">
                                @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", @id = "TxtMobile" } })
                                @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "SignUpErr" })
                            </div>
                            <div class="col-md-1-5" style="padding:0px 5px;">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                            </div>
                            <div class="col-md-4-5" style="padding:0px 5px;">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "TxtEmail" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "SignUpErr" })
                            </div>
                        </div>
                        <div class="row Form_Space_top Form_Space_bottom SignUp">
                            <div class="col-md-2-5" style="padding:0px 5px;font-size:13.5px;">
                                @Html.Label("Mobile Verification Code:", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-1-5" style="padding:0px 5px;">
                                @Html.TextBoxFor(model => model.GeneratedMobileCode, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.GeneratedMobileCode, "", new { @class = "SignUpErr" })
                            </div>
                            <div class="col-md-2" style="padding:0px 5px 0px 0px;">
                                <input id="BtnMobileGenerateCode" type="button" onmouseup="GenerateMobileCode()" value="Generate code" class="btn SignUp_btn" />
                            </div>
                            <div class="col-md-2-5" style="padding:0px 5px;font-size:13.5px;">
                                @Html.Label("E-mail Verification Code:", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-1-5" style="padding:0px 5px;">
                                @Html.TextBoxFor(model => model.GeneratedEmailCode, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.GeneratedEmailCode, "", new { @class = "SignUpErr" })
                            </div>
                            <div class="col-md-2" style="padding:0px 5px 0px 0px;">
                                <input id="BtnEmailGenerateCode" type="button" onmouseup="GenerateEmailCode()" value="Generate code" class="btn SignUp_btn" />
                            </div>
                        </div>
                    </div>
                </div>
                    <div class="row SignUp_space_top2 SignUp">
                        <div class="col-md-1-5" style="padding:0px 5px;">
                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-3-5" style="padding:0px 5px;">
                            <a class="Pass_popup" href="#" data-toggle="tooltip" data-placement="right" title="Password must contain at least : 1 Lowercase character,1 Upper Case character and 1 numeric digit. Special Character is optional and only specified ones are allowed : &amp; # . _ - $,  Password should be minimum 8 characters and maximum 20 characters long."><i class="fa fa-2x fa-question-circle" aria-hidden="true"></i></a>
                            @Html.PasswordFor(model => model.Password, new { @autocomplete = "off", @class = "form-control" })
                            @Html.HiddenFor(model => model.HdnPassword)
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "SignUpErr" })
                        </div>
                        <div class="col-md-2-5" style="padding:0px 5px;">
                            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-3-5" style="padding:0px 5px;">
                            @Html.PasswordFor(model => model.ConfirmPassword, new { @autocomplete = "off", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "SignUpErr" })
                        </div>
                    </div>
                    <div class="row SignUp_space_top">
                        <div class="col-md-offset-5 col-md-2">
                            <input style="width:100%;" type="submit" value="Save" class="btn Log_Btn" />
                        </div>
                    </div>
                </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqueryval")
<div id="DivPwdErrMsg" class="logErrMsg"></div>
<div id="DivConfirmMsg" class="logSuccMsg"></div>
<script>   
    $('#TxtLoginId').val('');   
    $(document).ready(function () {
        if ($('#LoginWithId').val() != '')
            $('#LoginWithId').attr('disabled', true);
        else
            $('#LoginWithId').attr('disabled', false);

        $('.log_modal').css("width", "75% !important");
       
    });    
</script>
<script>
$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip();
});
</script>


<script type="text/javascript">

    $("#FormSignUp").submit(function (e)
    {
        var frmVlalidation = $('#FormSignUp').valid();
        if (frmVlalidation == true)
        {
            if (CheckPasswordPolicy() == true)
            {
                Encrypt();
                var self = this;
                $.ajax({
                    processData: false,
                    contentType: false,
                    data: new FormData(this),
                    type: $(this).attr('method'),
                    url: $(this).attr('action'),
                    success: function (data)
                    {
                        OnSuccess(data);
                    }
                });
            }
        }

        return (false);
    });

    // Code for mobile
    function GenerateMobileCode()
    {
         var ObjData = new Object();
            ObjData.Mobile = $('#TxtMobile').val();
            if ($('#TxtMobile').val() == '') {
                $('#DivPwdErrMsg').html("Please Enter Mobile No.");
            }
            else {
                $('#DivPwdErrMsg').html('');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GenerateCodeForMobile", "User",null)',
                    contentType: 'application/json',
                    dataType: "Json",
                    data: JSON.stringify(ObjData),
                    success: function (data) {
                        if (data.Status == 1)
                        {
                            $('#DivConfirmMsg').html("Verification Code has been sent to your Mobile sucessfully");
                            $('#BtnMobileGenerateCode').val('Regenerate code');
                        }                       
                    }
                });
            }
        @*$.ajax({
            url: '@Url.Action("GenerateCodeForMobile", "User",null)',
            type: 'GET',
            success: function (data) {
                alert(data);
                $('#BtnMobileGenerateCode').val('Regenerate code');
            }
        });*@

    }

    // Code for Email
    function GenerateEmailCode()
    {

            var ObjData = new Object();
            ObjData.EmailId = $('#TxtEmail').val();
            if ($('#TxtEmail').val() == '') {
                $('#DivPwdErrMsg').html("Please Enter Email ID");
            }
            else {
                $('#DivPwdErrMsg').html('');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GenerateCodeForEmail", "User",null)',
                    contentType: 'application/json',
                    dataType: "Json",
                    data: JSON.stringify(ObjData),
                    success: function (data) {
                        if (data.Status == 1)
                        {
                            $('#DivConfirmMsg').html("Verification Code has been sent to your email sucessfully");
                            $('#BtnEmailGenerateCode').val('Regenerate code');
                        }
                        //alert(data);
                        //$('#BtnEmailGenerateCode').val('Regenerate code');

                    }
                });
            }       
    }
    function OnBegin() {
        //$("#divMsg").append("<h3>Beginning Ajax request.</h3>");
    }
    function OnComplete() {
        // $("#divMsg").append("<h3>Completing Ajax request.</h3>");
    }
    function OnSuccess(data)
    {
        if (data.Status == 1)
        {
            Clear();
            $('#DivConfirmMsg').html("User Created Successfully");
            $('#BtnMobileGenerateCode').val('Generate code');
            $('#BtnEmailGenerateCode').val('Generate code');
        }
        else if (data.Status == -1)
        {
            $('#Password').val($('#HdnPassword').val());
            $('#ConfirmPassword').val($('#HdnPassword').val());
            $('#DivConfirmMsg').html("Please fill all the required fields");
        }
        else
        {
            $('#Password').val($('#HdnPassword').val());
            $('#ConfirmPassword').val($('#HdnPassword').val());
            $('#DivConfirmMsg').html(data.Message);
        }

    }
    function OnFailure() {
        $("#divMsg").append("<h3>Ajax request failed.</h3>");
    }

    function Clear()
    {
        $("input[type=text]").val("");
        $("input[type=Email]").val("");
        $("input[type=Password]").val("");
    }

    function Encrypt()
    {
        $('#HdnPassword').val($('#Password').val());
        $('#Password').val(md5($('#Password').val()));
        $('#ConfirmPassword').val(md5($('#ConfirmPassword').val()));
        return true;
    }

    function CheckPasswordPolicy()
    {
        var Password = $('#Password').val();
        if ($('#LoginWithId').val().toUpperCase() == Password.toUpperCase())
        {
            $('#DivPwdErrMsg').html('Login ID and Password must not be same.');
            return false;
        }
        else if (!Password.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@('@')._$#-]+$/))
        {
            $('#DivPwdErrMsg').html('Password Policy does not match');
            return false;
        }
        else if ((Password.length < 8) || (Password.length > 21))
        {
            $('#DivPwdErrMsg').html('Password must be minimum 8 characters long and maximum 20 characters long.');
            return false;
        }
        else
        {
            return true;
        }
    }
</script>