@model CwcExim.Models.SignUpWithoutId


@{


    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.Confirm = "Do you wish to submit this form?";
    options.OnBegin = "OnBegin";
    options.OnComplete = "OnComplete";
    options.OnFailure = "OnFailure";
    options.OnSuccess = "OnSuccess";
    options.LoadingElementDuration = 1000;
    options.LoadingElementId = "divProgress";
    options.UpdateTargetId = "divResponse";
    options.InsertionMode = InsertionMode.InsertAfter;
}

@using (Ajax.BeginForm("UserCreation", "User", null, options, new { id = "FormUserCreation" }))
{
    @Html.AntiForgeryToken()

<div class="container-fluid">

    <div class="row">
        <div class="col-md-12 SignUp_head">
            <h4>User Creation</h4>
        </div>
    </div>
    <div class="row">
        <div class="singup_body col-md-12">
            <div class="row SignUp_space_top SignUp">
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.LoginId, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.TextBoxFor(model => model.LoginId, new { @class = "form-control", id = "LoginWithoutId" })
                    @*@Html.HiddenFor(model => model.LoginId, new { htmlAttributes = new { id = "HdnLoginWithoutId" } })*@
                    @Html.ValidationMessageFor(model => model.LoginId, "", new { @class = "SignUpErr" })
                </div>
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "SignUpErr" })
                </div>
            </div>
            <div class=" row SignUp_space_top2 SignUp">
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.PanNo, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.TextBoxFor(model => model.PanNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PanNo, "", new { @class = "SignUpErr" })
                </div>
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.DistrictName, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @if (Model.DistrictList != null && Model.DistrictList.Count() > 0)
                    {
                    @Html.DropDownListFor(m => m.DistrictId, new SelectList(Model.DistrictList, "DistrictId", "DistrictName"), "-----Select-----", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "SignUpErr" })
                    }
                    else
                    {
                    <select class="form-control" data-val="true" data-val-number="The field District must be a number." data-val-required="Fill Out This Field" id="DistrictId" name="DistrictId">
                        <option value="">-----Select-----</option>
                    </select>
                    <span class="field-validation-valid SignUpErr" data-valmsg-for="DistrictId" data-valmsg-replace="true"></span>
                    }


                </div>
            </div>
            <div class="row SignUp_space_top SignUp">
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.TextAreaFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", id = "txtAddress" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "SignUpErr" })
                </div>
                <div class="col-md-1-5">
                    @Html.LabelFor(model => model.PinCode, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.TextBoxFor(model => model.PinCode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PinCode, "", new { @class = "SignUpErr" })
                </div>
            </div>
                    <div class="row Form_Space_top SignUp">
                        <div class="col-md-1-5" style="padding-right:0px;">
                           <label>Mobile No:</label>
                        </div>
                        <div class="col-md-4-5">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control", @id = "TxtMobileWithoutId" })
                            @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "SignUpErr" })
                        </div>
                        <div class="col-md-1-5">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })<span class="LabelColon">:</span>
                        </div>
                        <div class="col-md-4-5">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "TxtEmailWithoutId" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "SignUpErr" })
                        </div>
                    </div>
                    <div class="row Form_Space_top Form_Space_bottom SignUp">
                        <div class="col-md-2-5" style="padding-right:0px;">
                            @Html.Label("Mobile Verification Code:", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-1-5">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(model => model.GeneratedMobileCode, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.GeneratedMobileCode, "", new { @class = "SignUpErr" })
                        </div>
                        <div class="col-md-2">
                            <input id="BtnMobileNoGenerateCode" type="button" onmouseup="GenerateMobileCode()" value="Generate code" class="btn log_Btn_sm" style="width:100%;font-size:0.9em;" />
                        </div>
                        <div class="col-md-2-5" style="padding-right:0px;">
                            @Html.Label("E-mail Verification Code:", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-1-5">
                            <span class="ReQSimbol">*</span>
                            @Html.TextBoxFor(model => model.GeneratedEmailCode, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.GeneratedEmailCode, "", new { @class = "SignUpErr" })
                        </div>
                        <div class="col-md-2">
                            <input id="BtnEmailIdGenerateCode" type="button" onmouseup="GenerateEmailCode()" value="Generate code" class="btn log_Btn_sm" style="width:100%;font-size:0.9em;" />
                        </div>
                    </div>

            <div class="row SignUp_space_top2 SignUp">
                <div class="col-md-1-5">
                   <label>Password:</label>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    <a class="Pass_popup" href="#" data-toggle="tooltip" data-placement="right" title="Password must contain at least : 1 Lowercase character,1 Upper Case character and 1 numeric digit. Special Character is optional and only specified ones are allowed : &amp; # . _ - $,  Password should be minimum 8 characters and maximum 20 characters long."><i class="fa fa-2x fa-question-circle" aria-hidden="true"></i></a>
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "PasswordForWithoutId" })
                    @Html.HiddenFor(model => model.HdnPassword)
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "SignUpErr" })
                </div>
                <div class="col-md-1-5">
                   <label>Confirm Password:</label>
                </div>
                <div class="col-md-4-5">
                    <span class="ReQSimbol">*</span>
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "SignUpErr" })
                </div>
            </div>
            <div class="row Form_Space_top Form_Space_bottom">
                <div class="stoke"></div>
            </div>
            <div class="row SignUp_space_top">
                <div class="col-md-offset-5 col-md-2">
                    <input type="submit" value="Save" class="btn Log_Btn" />
                </div>
            </div>
        </div>
    </div>
</div>
}
@Scripts.Render("~/bundles/jqueryval")
<div id="DivPwdErrMsg" class="logErrMsg"></div>
<div id="DivConfirmMsg" class="logSuccMsg"></div>


<script type="text/javascript">

    $("#FormUserCreation").submit(function (e) {

        var frmVlalidation = $('#FormUserCreation').valid();
        if (frmVlalidation == true) {
            if (CheckPasswordPolicy() == true) {

                Encrypt();
                var self = this;
                $.ajax({
                    processData: false,
                    contentType: false,
                    data: new FormData(this),
                    type: $(this).attr('method'),
                    url: $(this).attr('action'),
                    success: function (data) {
                        OnSuccess(data);
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            }
        }

        return (false);
    });

    // Code for mobile
    function GenerateMobileCode() {
        var ObjData = new Object();
        ObjData.Mobile = $('#TxtMobileWithoutId').val();
        if ($('#TxtMobileWithoutId').val() == '') {
            $('#DivPwdErrMsg').html("Please Enter Mobile No.");
        }
        else {
            $('#DivPwdErrMsg').html('');
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GenerateCodeForMobile", "User",null)',
                contentType: 'application/json',
                dataType: "Json",
                data: JSON.stringify(ObjData),
                success: function (data) {
                    if (data.Status == 1) {
                        $('#DivConfirmMsg').html("Verification Code has been sent to your Mobile sucessfully");
                        $('#BtnMobileNoGenerateCode').val('Regenerate code');
                    }
                }
            });
        }
        @*$.ajax({
            url: '@Url.Action("GenerateCodeForMobile", "User",null)',
            type: 'GET',
            success: function (data) {
                alert(data);
                $('#BtnMobileNoGenerateCode').val('Regenerate code');
            }
        });*@

    }

    // Code for Email
    function GenerateEmailCode() {
        debugger;
        var ObjData = new Object();
        ObjData.EmailId = $('#TxtEmailWithoutId').val();
        if ($('#TxtEmailWithoutId').val() == '') {
            $('#DivPwdErrMsg').html("Please Enter Email ID");
        }
        else {
            $('#DivPwdErrMsg').html('');
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GenerateCodeForEmail", "User",null)',
                contentType: 'application/json',
                dataType: "Json",
                data: JSON.stringify(ObjData),
                success: function (data) {
                    if (data.Status == 1) {
                        $('#DivConfirmMsg').html("Verification Code has been sent to your email sucessfully");
                        $('#BtnEmailIdGenerateCode').val('Regenerate code');
                    }

                }
            });
        }

        @*$.ajax({
            url: '@Url.Action("GenerateCodeForEmail", "User",null)',
            type: 'GET',
            success: function (data) {
                alert(data);
                $('#BtnEmailGenerateCode').val('Regenerate code');
            }
        });*@
    }
    function OnBegin() {
        //if (CheckPasswordPolicy() == true)
        //{
        //    Encrypt();
        //}
        //else
        //    e.preventDefault();

    }
    function OnComplete() {
        // $("#divMsg").append("<h3>Completing Ajax request.</h3>");
    }
    function OnSuccess(data) {
        if (data.Status == 1) {
            Clear();
            $('#DivConfirmMsg').html("User Created Successfully");
            $('#BtnMobileNoGenerateCode').val('Generate code');
            $('#BtnEmailIdGenerateCode').val('Generate code');
        }
        else if (data.Status == -1) {
            $('#PasswordForWithoutId').val($('#HdnPassword').val());
            $('#ConfirmPassword').val($('#HdnPassword').val());
            $('#DivConfirmMsg').html("Please fill all the required fields");
        }
        else {
            $('#PasswordForWithoutId').val($('#HdnPassword').val());
            $('#ConfirmPassword').val($('#HdnPassword').val());
            $('#DivConfirmMsg').html(data.Message);
        }

    }
    function OnFailure() {
        $("#divMsg").append("<h3>Ajax request failed.</h3>");
    }

    function Clear() {
        $("input[type=text]").val("");
        $("input[type=Email]").val("");
        $("input[type=Password]").val("");
        $('textarea').val("");
        $('select').each(function (i) {
            $('select')[i].childNodes[0].selected = true
        });


    }

    function Encrypt() {
        $('#HdnPassword').val($('#PasswordForWithoutId').val());
        $('#PasswordForWithoutId').val(md5($('#PasswordForWithoutId').val()));
        $('#ConfirmPassword').val(md5($('#ConfirmPassword').val()));
        return true;
    }

    function CheckPasswordPolicy() {
        var Password = $('#PasswordForWithoutId').val();
        if ($('#LoginWithoutId').val().toUpperCase() == Password.toUpperCase()) {
            $('#DivPwdErrMsg').html('Login ID and Password must not be same.');
            return false;
        }
        else if (!Password.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@('@')._$#-]+$/)) {
            $('#DivPwdErrMsg').html('Password Policy does not match');
            return false;
        }
        else if ((Password.length < 8) || (Password.length > 21)) {
            $('#DivPwdErrMsg').html('Password must be minimum 8 characters long and maximum 20 characters long.');
            return false;
        }
        else {
            return true;
        }
    }
</script>
<script>
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });
</script>
